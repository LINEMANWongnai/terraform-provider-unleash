// Package unleash provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package unleash

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for AddonTypeSchemaAlertsType.
const (
	Error   AddonTypeSchemaAlertsType = "error"
	Info    AddonTypeSchemaAlertsType = "info"
	Success AddonTypeSchemaAlertsType = "success"
	Warning AddonTypeSchemaAlertsType = "warning"
)

// Defines values for AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1.
const (
	AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1Unknown AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1 = "unknown"
)

// Defines values for AdvancedPlaygroundRequestSchemaProjects1.
const (
	AdvancedPlaygroundRequestSchemaProjects1Asterisk AdvancedPlaygroundRequestSchemaProjects1 = "*"
)

// Defines values for ApiTokenSchemaType.
const (
	ApiTokenSchemaTypeAdmin    ApiTokenSchemaType = "admin"
	ApiTokenSchemaTypeClient   ApiTokenSchemaType = "client"
	ApiTokenSchemaTypeFrontend ApiTokenSchemaType = "frontend"
)

// Defines values for ConstraintSchemaOperator.
const (
	ConstraintSchemaOperatorDATEAFTER     ConstraintSchemaOperator = "DATE_AFTER"
	ConstraintSchemaOperatorDATEBEFORE    ConstraintSchemaOperator = "DATE_BEFORE"
	ConstraintSchemaOperatorIN            ConstraintSchemaOperator = "IN"
	ConstraintSchemaOperatorNOTIN         ConstraintSchemaOperator = "NOT_IN"
	ConstraintSchemaOperatorNUMEQ         ConstraintSchemaOperator = "NUM_EQ"
	ConstraintSchemaOperatorNUMGT         ConstraintSchemaOperator = "NUM_GT"
	ConstraintSchemaOperatorNUMGTE        ConstraintSchemaOperator = "NUM_GTE"
	ConstraintSchemaOperatorNUMLT         ConstraintSchemaOperator = "NUM_LT"
	ConstraintSchemaOperatorNUMLTE        ConstraintSchemaOperator = "NUM_LTE"
	ConstraintSchemaOperatorSEMVEREQ      ConstraintSchemaOperator = "SEMVER_EQ"
	ConstraintSchemaOperatorSEMVERGT      ConstraintSchemaOperator = "SEMVER_GT"
	ConstraintSchemaOperatorSEMVERLT      ConstraintSchemaOperator = "SEMVER_LT"
	ConstraintSchemaOperatorSTRCONTAINS   ConstraintSchemaOperator = "STR_CONTAINS"
	ConstraintSchemaOperatorSTRENDSWITH   ConstraintSchemaOperator = "STR_ENDS_WITH"
	ConstraintSchemaOperatorSTRSTARTSWITH ConstraintSchemaOperator = "STR_STARTS_WITH"
)

// Defines values for CreateStrategySchemaParametersType.
const (
	CreateStrategySchemaParametersTypeBoolean    CreateStrategySchemaParametersType = "boolean"
	CreateStrategySchemaParametersTypeList       CreateStrategySchemaParametersType = "list"
	CreateStrategySchemaParametersTypeNumber     CreateStrategySchemaParametersType = "number"
	CreateStrategySchemaParametersTypePercentage CreateStrategySchemaParametersType = "percentage"
	CreateStrategySchemaParametersTypeString     CreateStrategySchemaParametersType = "string"
)

// Defines values for CreateStrategyVariantSchemaPayloadType.
const (
	CreateStrategyVariantSchemaPayloadTypeCsv    CreateStrategyVariantSchemaPayloadType = "csv"
	CreateStrategyVariantSchemaPayloadTypeJson   CreateStrategyVariantSchemaPayloadType = "json"
	CreateStrategyVariantSchemaPayloadTypeNumber CreateStrategyVariantSchemaPayloadType = "number"
	CreateStrategyVariantSchemaPayloadTypeString CreateStrategyVariantSchemaPayloadType = "string"
)

// Defines values for CreateStrategyVariantSchemaWeightType.
const (
	CreateStrategyVariantSchemaWeightTypeFix      CreateStrategyVariantSchemaWeightType = "fix"
	CreateStrategyVariantSchemaWeightTypeVariable CreateStrategyVariantSchemaWeightType = "variable"
)

// Defines values for CreateUserResponseSchemaRootRole1.
const (
	CreateUserResponseSchemaRootRole1Admin  CreateUserResponseSchemaRootRole1 = "Admin"
	CreateUserResponseSchemaRootRole1Editor CreateUserResponseSchemaRootRole1 = "Editor"
	CreateUserResponseSchemaRootRole1Member CreateUserResponseSchemaRootRole1 = "Member"
	CreateUserResponseSchemaRootRole1Owner  CreateUserResponseSchemaRootRole1 = "Owner"
	CreateUserResponseSchemaRootRole1Viewer CreateUserResponseSchemaRootRole1 = "Viewer"
)

// Defines values for CreateUserSchemaRootRole1.
const (
	CreateUserSchemaRootRole1Admin  CreateUserSchemaRootRole1 = "Admin"
	CreateUserSchemaRootRole1Editor CreateUserSchemaRootRole1 = "Editor"
	CreateUserSchemaRootRole1Member CreateUserSchemaRootRole1 = "Member"
	CreateUserSchemaRootRole1Owner  CreateUserSchemaRootRole1 = "Owner"
	CreateUserSchemaRootRole1Viewer CreateUserSchemaRootRole1 = "Viewer"
)

// Defines values for DeprecatedProjectOverviewSchemaMode.
const (
	DeprecatedProjectOverviewSchemaModeOpen      DeprecatedProjectOverviewSchemaMode = "open"
	DeprecatedProjectOverviewSchemaModePrivate   DeprecatedProjectOverviewSchemaMode = "private"
	DeprecatedProjectOverviewSchemaModeProtected DeprecatedProjectOverviewSchemaMode = "protected"
)

// Defines values for EdgeTokenSchemaType.
const (
	EdgeTokenSchemaTypeAdmin    EdgeTokenSchemaType = "admin"
	EdgeTokenSchemaTypeClient   EdgeTokenSchemaType = "client"
	EdgeTokenSchemaTypeFrontend EdgeTokenSchemaType = "frontend"
)

// Defines values for EventSchemaType.
const (
	EventSchemaTypeAddonConfigCreated                       EventSchemaType = "addon-config-created"
	EventSchemaTypeAddonConfigDeleted                       EventSchemaType = "addon-config-deleted"
	EventSchemaTypeAddonConfigUpdated                       EventSchemaType = "addon-config-updated"
	EventSchemaTypeApiTokenCreated                          EventSchemaType = "api-token-created"
	EventSchemaTypeApiTokenDeleted                          EventSchemaType = "api-token-deleted"
	EventSchemaTypeApiTokenUpdated                          EventSchemaType = "api-token-updated"
	EventSchemaTypeApplicationCreated                       EventSchemaType = "application-created"
	EventSchemaTypeBannerCreated                            EventSchemaType = "banner-created"
	EventSchemaTypeBannerDeleted                            EventSchemaType = "banner-deleted"
	EventSchemaTypeBannerUpdated                            EventSchemaType = "banner-updated"
	EventSchemaTypeChangeAdded                              EventSchemaType = "change-added"
	EventSchemaTypeChangeDiscarded                          EventSchemaType = "change-discarded"
	EventSchemaTypeChangeEdited                             EventSchemaType = "change-edited"
	EventSchemaTypeChangeRequestApplied                     EventSchemaType = "change-request-applied"
	EventSchemaTypeChangeRequestApprovalAdded               EventSchemaType = "change-request-approval-added"
	EventSchemaTypeChangeRequestApproved                    EventSchemaType = "change-request-approved"
	EventSchemaTypeChangeRequestCancelled                   EventSchemaType = "change-request-cancelled"
	EventSchemaTypeChangeRequestConfigurationUpdated        EventSchemaType = "change-request-configuration-updated"
	EventSchemaTypeChangeRequestCreated                     EventSchemaType = "change-request-created"
	EventSchemaTypeChangeRequestDiscarded                   EventSchemaType = "change-request-discarded"
	EventSchemaTypeChangeRequestRejected                    EventSchemaType = "change-request-rejected"
	EventSchemaTypeChangeRequestScheduled                   EventSchemaType = "change-request-scheduled"
	EventSchemaTypeChangeRequestScheduledApplicationFailure EventSchemaType = "change-request-scheduled-application-failure"
	EventSchemaTypeChangeRequestScheduledApplicationSuccess EventSchemaType = "change-request-scheduled-application-success"
	EventSchemaTypeChangeRequestSentToReview                EventSchemaType = "change-request-sent-to-review"
	EventSchemaTypeClientMetrics                            EventSchemaType = "client-metrics"
	EventSchemaTypeClientRegister                           EventSchemaType = "client-register"
	EventSchemaTypeContextFieldCreated                      EventSchemaType = "context-field-created"
	EventSchemaTypeContextFieldDeleted                      EventSchemaType = "context-field-deleted"
	EventSchemaTypeContextFieldUpdated                      EventSchemaType = "context-field-updated"
	EventSchemaTypeDbPoolUpdate                             EventSchemaType = "db-pool-update"
	EventSchemaTypeDefaultStrategyUpdated                   EventSchemaType = "default-strategy-updated"
	EventSchemaTypeDropEnvironments                         EventSchemaType = "drop-environments"
	EventSchemaTypeDropFeatureTags                          EventSchemaType = "drop-feature-tags"
	EventSchemaTypeDropFeatures                             EventSchemaType = "drop-features"
	EventSchemaTypeDropProjects                             EventSchemaType = "drop-projects"
	EventSchemaTypeDropStrategies                           EventSchemaType = "drop-strategies"
	EventSchemaTypeDropTagTypes                             EventSchemaType = "drop-tag-types"
	EventSchemaTypeDropTags                                 EventSchemaType = "drop-tags"
	EventSchemaTypeEnvironmentCreated                       EventSchemaType = "environment-created"
	EventSchemaTypeEnvironmentDeleted                       EventSchemaType = "environment-deleted"
	EventSchemaTypeEnvironmentImport                        EventSchemaType = "environment-import"
	EventSchemaTypeEnvironmentUpdated                       EventSchemaType = "environment-updated"
	EventSchemaTypeFeatureArchived                          EventSchemaType = "feature-archived"
	EventSchemaTypeFeatureCreated                           EventSchemaType = "feature-created"
	EventSchemaTypeFeatureDeleted                           EventSchemaType = "feature-deleted"
	EventSchemaTypeFeatureDependenciesRemoved               EventSchemaType = "feature-dependencies-removed"
	EventSchemaTypeFeatureDependencyAdded                   EventSchemaType = "feature-dependency-added"
	EventSchemaTypeFeatureDependencyRemoved                 EventSchemaType = "feature-dependency-removed"
	EventSchemaTypeFeatureEnvironmentDisabled               EventSchemaType = "feature-environment-disabled"
	EventSchemaTypeFeatureEnvironmentEnabled                EventSchemaType = "feature-environment-enabled"
	EventSchemaTypeFeatureEnvironmentVariantsUpdated        EventSchemaType = "feature-environment-variants-updated"
	EventSchemaTypeFeatureFavorited                         EventSchemaType = "feature-favorited"
	EventSchemaTypeFeatureImport                            EventSchemaType = "feature-import"
	EventSchemaTypeFeatureMetadataUpdated                   EventSchemaType = "feature-metadata-updated"
	EventSchemaTypeFeaturePotentiallyStaleOn                EventSchemaType = "feature-potentially-stale-on"
	EventSchemaTypeFeatureProjectChange                     EventSchemaType = "feature-project-change"
	EventSchemaTypeFeatureRevived                           EventSchemaType = "feature-revived"
	EventSchemaTypeFeatureStaleOff                          EventSchemaType = "feature-stale-off"
	EventSchemaTypeFeatureStaleOn                           EventSchemaType = "feature-stale-on"
	EventSchemaTypeFeatureStrategyAdd                       EventSchemaType = "feature-strategy-add"
	EventSchemaTypeFeatureStrategyRemove                    EventSchemaType = "feature-strategy-remove"
	EventSchemaTypeFeatureStrategyUpdate                    EventSchemaType = "feature-strategy-update"
	EventSchemaTypeFeatureTagImport                         EventSchemaType = "feature-tag-import"
	EventSchemaTypeFeatureTagged                            EventSchemaType = "feature-tagged"
	EventSchemaTypeFeatureTypeUpdated                       EventSchemaType = "feature-type-updated"
	EventSchemaTypeFeatureUnfavorited                       EventSchemaType = "feature-unfavorited"
	EventSchemaTypeFeatureUntagged                          EventSchemaType = "feature-untagged"
	EventSchemaTypeFeatureUpdated                           EventSchemaType = "feature-updated"
	EventSchemaTypeFeatureVariantsUpdated                   EventSchemaType = "feature-variants-updated"
	EventSchemaTypeFeaturesExported                         EventSchemaType = "features-exported"
	EventSchemaTypeFeaturesImported                         EventSchemaType = "features-imported"
	EventSchemaTypeGroupCreated                             EventSchemaType = "group-created"
	EventSchemaTypeGroupDeleted                             EventSchemaType = "group-deleted"
	EventSchemaTypeGroupUpdated                             EventSchemaType = "group-updated"
	EventSchemaTypeGroupUserAdded                           EventSchemaType = "group-user-added"
	EventSchemaTypeGroupUserRemoved                         EventSchemaType = "group-user-removed"
	EventSchemaTypeIncomingWebhookCreated                   EventSchemaType = "incoming-webhook-created"
	EventSchemaTypeIncomingWebhookDeleted                   EventSchemaType = "incoming-webhook-deleted"
	EventSchemaTypeIncomingWebhookTokenCreated              EventSchemaType = "incoming-webhook-token-created"
	EventSchemaTypeIncomingWebhookTokenDeleted              EventSchemaType = "incoming-webhook-token-deleted"
	EventSchemaTypeIncomingWebhookTokenUpdated              EventSchemaType = "incoming-webhook-token-updated"
	EventSchemaTypeIncomingWebhookUpdated                   EventSchemaType = "incoming-webhook-updated"
	EventSchemaTypePatCreated                               EventSchemaType = "pat-created"
	EventSchemaTypePatDeleted                               EventSchemaType = "pat-deleted"
	EventSchemaTypeProjectAccessAdded                       EventSchemaType = "project-access-added"
	EventSchemaTypeProjectAccessGroupRolesDeleted           EventSchemaType = "project-access-group-roles-deleted"
	EventSchemaTypeProjectAccessGroupRolesUpdated           EventSchemaType = "project-access-group-roles-updated"
	EventSchemaTypeProjectAccessUpdated                     EventSchemaType = "project-access-updated"
	EventSchemaTypeProjectAccessUserRolesDeleted            EventSchemaType = "project-access-user-roles-deleted"
	EventSchemaTypeProjectAccessUserRolesUpdated            EventSchemaType = "project-access-user-roles-updated"
	EventSchemaTypeProjectCreated                           EventSchemaType = "project-created"
	EventSchemaTypeProjectDeleted                           EventSchemaType = "project-deleted"
	EventSchemaTypeProjectEnvironmentAdded                  EventSchemaType = "project-environment-added"
	EventSchemaTypeProjectEnvironmentRemoved                EventSchemaType = "project-environment-removed"
	EventSchemaTypeProjectFavorited                         EventSchemaType = "project-favorited"
	EventSchemaTypeProjectGroupAdded                        EventSchemaType = "project-group-added"
	EventSchemaTypeProjectGroupRemoved                      EventSchemaType = "project-group-removed"
	EventSchemaTypeProjectGroupRoleChanged                  EventSchemaType = "project-group-role-changed"
	EventSchemaTypeProjectImport                            EventSchemaType = "project-import"
	EventSchemaTypeProjectUnfavorited                       EventSchemaType = "project-unfavorited"
	EventSchemaTypeProjectUpdated                           EventSchemaType = "project-updated"
	EventSchemaTypeProjectUserAdded                         EventSchemaType = "project-user-added"
	EventSchemaTypeProjectUserRemoved                       EventSchemaType = "project-user-removed"
	EventSchemaTypeProjectUserRoleChanged                   EventSchemaType = "project-user-role-changed"
	EventSchemaTypePublicSignupTokenCreated                 EventSchemaType = "public-signup-token-created"
	EventSchemaTypePublicSignupTokenUpdated                 EventSchemaType = "public-signup-token-updated"
	EventSchemaTypePublicSignupTokenUserAdded               EventSchemaType = "public-signup-token-user-added"
	EventSchemaTypeRoleCreated                              EventSchemaType = "role-created"
	EventSchemaTypeRoleDeleted                              EventSchemaType = "role-deleted"
	EventSchemaTypeRoleUpdated                              EventSchemaType = "role-updated"
	EventSchemaTypeScheduledChangeRequestExecuted           EventSchemaType = "scheduled-change-request-executed"
	EventSchemaTypeSegmentCreated                           EventSchemaType = "segment-created"
	EventSchemaTypeSegmentDeleted                           EventSchemaType = "segment-deleted"
	EventSchemaTypeSegmentImport                            EventSchemaType = "segment-import"
	EventSchemaTypeSegmentUpdated                           EventSchemaType = "segment-updated"
	EventSchemaTypeServiceAccountCreated                    EventSchemaType = "service-account-created"
	EventSchemaTypeServiceAccountDeleted                    EventSchemaType = "service-account-deleted"
	EventSchemaTypeServiceAccountUpdated                    EventSchemaType = "service-account-updated"
	EventSchemaTypeSettingCreated                           EventSchemaType = "setting-created"
	EventSchemaTypeSettingDeleted                           EventSchemaType = "setting-deleted"
	EventSchemaTypeSettingUpdated                           EventSchemaType = "setting-updated"
	EventSchemaTypeStrategyCreated                          EventSchemaType = "strategy-created"
	EventSchemaTypeStrategyDeleted                          EventSchemaType = "strategy-deleted"
	EventSchemaTypeStrategyDeprecated                       EventSchemaType = "strategy-deprecated"
	EventSchemaTypeStrategyImport                           EventSchemaType = "strategy-import"
	EventSchemaTypeStrategyOrderChanged                     EventSchemaType = "strategy-order-changed"
	EventSchemaTypeStrategyReactivated                      EventSchemaType = "strategy-reactivated"
	EventSchemaTypeStrategyUpdated                          EventSchemaType = "strategy-updated"
	EventSchemaTypeTagCreated                               EventSchemaType = "tag-created"
	EventSchemaTypeTagDeleted                               EventSchemaType = "tag-deleted"
	EventSchemaTypeTagImport                                EventSchemaType = "tag-import"
	EventSchemaTypeTagTypeCreated                           EventSchemaType = "tag-type-created"
	EventSchemaTypeTagTypeDeleted                           EventSchemaType = "tag-type-deleted"
	EventSchemaTypeTagTypeImport                            EventSchemaType = "tag-type-import"
	EventSchemaTypeTagTypeUpdated                           EventSchemaType = "tag-type-updated"
	EventSchemaTypeUserCreated                              EventSchemaType = "user-created"
	EventSchemaTypeUserDeleted                              EventSchemaType = "user-deleted"
	EventSchemaTypeUserUpdated                              EventSchemaType = "user-updated"
)

// Defines values for EventsSchemaVersion.
const (
	EventsSchemaVersionN1 EventsSchemaVersion = 1
)

// Defines values for FeatureEventsSchemaVersion.
const (
	FeatureEventsSchemaVersionN1 FeatureEventsSchemaVersion = 1
)

// Defines values for FeatureTypesSchemaVersion.
const (
	FeatureTypesSchemaVersionN1 FeatureTypesSchemaVersion = 1
)

// Defines values for HealthCheckSchemaHealth.
const (
	BAD  HealthCheckSchemaHealth = "BAD"
	GOOD HealthCheckSchemaHealth = "GOOD"
)

// Defines values for HealthReportSchemaMode.
const (
	HealthReportSchemaModeOpen      HealthReportSchemaMode = "open"
	HealthReportSchemaModePrivate   HealthReportSchemaMode = "private"
	HealthReportSchemaModeProtected HealthReportSchemaMode = "protected"
)

// Defines values for InstanceAdminStatsSchemaClientAppsRange.
const (
	AllTime InstanceAdminStatsSchemaClientAppsRange = "allTime"
	N30d    InstanceAdminStatsSchemaClientAppsRange = "30d"
	N7d     InstanceAdminStatsSchemaClientAppsRange = "7d"
)

// Defines values for PatchSchemaOp.
const (
	Add     PatchSchemaOp = "add"
	Copy    PatchSchemaOp = "copy"
	Move    PatchSchemaOp = "move"
	Remove  PatchSchemaOp = "remove"
	Replace PatchSchemaOp = "replace"
)

// Defines values for PlaygroundConstraintSchemaOperator.
const (
	PlaygroundConstraintSchemaOperatorDATEAFTER     PlaygroundConstraintSchemaOperator = "DATE_AFTER"
	PlaygroundConstraintSchemaOperatorDATEBEFORE    PlaygroundConstraintSchemaOperator = "DATE_BEFORE"
	PlaygroundConstraintSchemaOperatorIN            PlaygroundConstraintSchemaOperator = "IN"
	PlaygroundConstraintSchemaOperatorNOTIN         PlaygroundConstraintSchemaOperator = "NOT_IN"
	PlaygroundConstraintSchemaOperatorNUMEQ         PlaygroundConstraintSchemaOperator = "NUM_EQ"
	PlaygroundConstraintSchemaOperatorNUMGT         PlaygroundConstraintSchemaOperator = "NUM_GT"
	PlaygroundConstraintSchemaOperatorNUMGTE        PlaygroundConstraintSchemaOperator = "NUM_GTE"
	PlaygroundConstraintSchemaOperatorNUMLT         PlaygroundConstraintSchemaOperator = "NUM_LT"
	PlaygroundConstraintSchemaOperatorNUMLTE        PlaygroundConstraintSchemaOperator = "NUM_LTE"
	PlaygroundConstraintSchemaOperatorSEMVEREQ      PlaygroundConstraintSchemaOperator = "SEMVER_EQ"
	PlaygroundConstraintSchemaOperatorSEMVERGT      PlaygroundConstraintSchemaOperator = "SEMVER_GT"
	PlaygroundConstraintSchemaOperatorSEMVERLT      PlaygroundConstraintSchemaOperator = "SEMVER_LT"
	PlaygroundConstraintSchemaOperatorSTRCONTAINS   PlaygroundConstraintSchemaOperator = "STR_CONTAINS"
	PlaygroundConstraintSchemaOperatorSTRENDSWITH   PlaygroundConstraintSchemaOperator = "STR_ENDS_WITH"
	PlaygroundConstraintSchemaOperatorSTRSTARTSWITH PlaygroundConstraintSchemaOperator = "STR_STARTS_WITH"
)

// Defines values for PlaygroundFeatureSchemaStrategiesResult1.
const (
	PlaygroundFeatureSchemaStrategiesResult1Unknown PlaygroundFeatureSchemaStrategiesResult1 = "unknown"
)

// Defines values for PlaygroundRequestSchemaProjects1.
const (
	PlaygroundRequestSchemaProjects1Asterisk PlaygroundRequestSchemaProjects1 = "*"
)

// Defines values for PlaygroundStrategySchemaResult0Enabled0.
const (
	False PlaygroundStrategySchemaResult0Enabled0 = false
)

// Defines values for PlaygroundStrategySchemaResult0Enabled1.
const (
	Unknown PlaygroundStrategySchemaResult0Enabled1 = "unknown"
)

// Defines values for PlaygroundStrategySchemaResult0EvaluationStatus.
const (
	Incomplete  PlaygroundStrategySchemaResult0EvaluationStatus = "incomplete"
	Unevaluated PlaygroundStrategySchemaResult0EvaluationStatus = "unevaluated"
)

// Defines values for PlaygroundStrategySchemaResult1EvaluationStatus.
const (
	Complete PlaygroundStrategySchemaResult1EvaluationStatus = "complete"
)

// Defines values for PlaygroundStrategySchemaResult1VariantPayloadType.
const (
	PlaygroundStrategySchemaResult1VariantPayloadTypeCsv    PlaygroundStrategySchemaResult1VariantPayloadType = "csv"
	PlaygroundStrategySchemaResult1VariantPayloadTypeJson   PlaygroundStrategySchemaResult1VariantPayloadType = "json"
	PlaygroundStrategySchemaResult1VariantPayloadTypeNumber PlaygroundStrategySchemaResult1VariantPayloadType = "number"
	PlaygroundStrategySchemaResult1VariantPayloadTypeString PlaygroundStrategySchemaResult1VariantPayloadType = "string"
)

// Defines values for ProjectOverviewSchemaMode.
const (
	ProjectOverviewSchemaModeOpen      ProjectOverviewSchemaMode = "open"
	ProjectOverviewSchemaModePrivate   ProjectOverviewSchemaMode = "private"
	ProjectOverviewSchemaModeProtected ProjectOverviewSchemaMode = "protected"
)

// Defines values for ProjectSchemaMode.
const (
	ProjectSchemaModeOpen      ProjectSchemaMode = "open"
	ProjectSchemaModePrivate   ProjectSchemaMode = "private"
	ProjectSchemaModeProtected ProjectSchemaMode = "protected"
)

// Defines values for ProxyFeatureSchemaVariantPayloadType.
const (
	ProxyFeatureSchemaVariantPayloadTypeCsv    ProxyFeatureSchemaVariantPayloadType = "csv"
	ProxyFeatureSchemaVariantPayloadTypeJson   ProxyFeatureSchemaVariantPayloadType = "json"
	ProxyFeatureSchemaVariantPayloadTypeString ProxyFeatureSchemaVariantPayloadType = "string"
)

// Defines values for SearchEventsSchemaType.
const (
	SearchEventsSchemaTypeAddonConfigCreated                       SearchEventsSchemaType = "addon-config-created"
	SearchEventsSchemaTypeAddonConfigDeleted                       SearchEventsSchemaType = "addon-config-deleted"
	SearchEventsSchemaTypeAddonConfigUpdated                       SearchEventsSchemaType = "addon-config-updated"
	SearchEventsSchemaTypeApiTokenCreated                          SearchEventsSchemaType = "api-token-created"
	SearchEventsSchemaTypeApiTokenDeleted                          SearchEventsSchemaType = "api-token-deleted"
	SearchEventsSchemaTypeApiTokenUpdated                          SearchEventsSchemaType = "api-token-updated"
	SearchEventsSchemaTypeApplicationCreated                       SearchEventsSchemaType = "application-created"
	SearchEventsSchemaTypeBannerCreated                            SearchEventsSchemaType = "banner-created"
	SearchEventsSchemaTypeBannerDeleted                            SearchEventsSchemaType = "banner-deleted"
	SearchEventsSchemaTypeBannerUpdated                            SearchEventsSchemaType = "banner-updated"
	SearchEventsSchemaTypeChangeAdded                              SearchEventsSchemaType = "change-added"
	SearchEventsSchemaTypeChangeDiscarded                          SearchEventsSchemaType = "change-discarded"
	SearchEventsSchemaTypeChangeEdited                             SearchEventsSchemaType = "change-edited"
	SearchEventsSchemaTypeChangeRequestApplied                     SearchEventsSchemaType = "change-request-applied"
	SearchEventsSchemaTypeChangeRequestApprovalAdded               SearchEventsSchemaType = "change-request-approval-added"
	SearchEventsSchemaTypeChangeRequestApproved                    SearchEventsSchemaType = "change-request-approved"
	SearchEventsSchemaTypeChangeRequestCancelled                   SearchEventsSchemaType = "change-request-cancelled"
	SearchEventsSchemaTypeChangeRequestConfigurationUpdated        SearchEventsSchemaType = "change-request-configuration-updated"
	SearchEventsSchemaTypeChangeRequestCreated                     SearchEventsSchemaType = "change-request-created"
	SearchEventsSchemaTypeChangeRequestDiscarded                   SearchEventsSchemaType = "change-request-discarded"
	SearchEventsSchemaTypeChangeRequestRejected                    SearchEventsSchemaType = "change-request-rejected"
	SearchEventsSchemaTypeChangeRequestScheduled                   SearchEventsSchemaType = "change-request-scheduled"
	SearchEventsSchemaTypeChangeRequestScheduledApplicationFailure SearchEventsSchemaType = "change-request-scheduled-application-failure"
	SearchEventsSchemaTypeChangeRequestScheduledApplicationSuccess SearchEventsSchemaType = "change-request-scheduled-application-success"
	SearchEventsSchemaTypeChangeRequestSentToReview                SearchEventsSchemaType = "change-request-sent-to-review"
	SearchEventsSchemaTypeClientMetrics                            SearchEventsSchemaType = "client-metrics"
	SearchEventsSchemaTypeClientRegister                           SearchEventsSchemaType = "client-register"
	SearchEventsSchemaTypeContextFieldCreated                      SearchEventsSchemaType = "context-field-created"
	SearchEventsSchemaTypeContextFieldDeleted                      SearchEventsSchemaType = "context-field-deleted"
	SearchEventsSchemaTypeContextFieldUpdated                      SearchEventsSchemaType = "context-field-updated"
	SearchEventsSchemaTypeDbPoolUpdate                             SearchEventsSchemaType = "db-pool-update"
	SearchEventsSchemaTypeDefaultStrategyUpdated                   SearchEventsSchemaType = "default-strategy-updated"
	SearchEventsSchemaTypeDropEnvironments                         SearchEventsSchemaType = "drop-environments"
	SearchEventsSchemaTypeDropFeatureTags                          SearchEventsSchemaType = "drop-feature-tags"
	SearchEventsSchemaTypeDropFeatures                             SearchEventsSchemaType = "drop-features"
	SearchEventsSchemaTypeDropProjects                             SearchEventsSchemaType = "drop-projects"
	SearchEventsSchemaTypeDropStrategies                           SearchEventsSchemaType = "drop-strategies"
	SearchEventsSchemaTypeDropTagTypes                             SearchEventsSchemaType = "drop-tag-types"
	SearchEventsSchemaTypeDropTags                                 SearchEventsSchemaType = "drop-tags"
	SearchEventsSchemaTypeEnvironmentCreated                       SearchEventsSchemaType = "environment-created"
	SearchEventsSchemaTypeEnvironmentDeleted                       SearchEventsSchemaType = "environment-deleted"
	SearchEventsSchemaTypeEnvironmentImport                        SearchEventsSchemaType = "environment-import"
	SearchEventsSchemaTypeEnvironmentUpdated                       SearchEventsSchemaType = "environment-updated"
	SearchEventsSchemaTypeFeatureArchived                          SearchEventsSchemaType = "feature-archived"
	SearchEventsSchemaTypeFeatureCreated                           SearchEventsSchemaType = "feature-created"
	SearchEventsSchemaTypeFeatureDeleted                           SearchEventsSchemaType = "feature-deleted"
	SearchEventsSchemaTypeFeatureDependenciesRemoved               SearchEventsSchemaType = "feature-dependencies-removed"
	SearchEventsSchemaTypeFeatureDependencyAdded                   SearchEventsSchemaType = "feature-dependency-added"
	SearchEventsSchemaTypeFeatureDependencyRemoved                 SearchEventsSchemaType = "feature-dependency-removed"
	SearchEventsSchemaTypeFeatureEnvironmentDisabled               SearchEventsSchemaType = "feature-environment-disabled"
	SearchEventsSchemaTypeFeatureEnvironmentEnabled                SearchEventsSchemaType = "feature-environment-enabled"
	SearchEventsSchemaTypeFeatureEnvironmentVariantsUpdated        SearchEventsSchemaType = "feature-environment-variants-updated"
	SearchEventsSchemaTypeFeatureFavorited                         SearchEventsSchemaType = "feature-favorited"
	SearchEventsSchemaTypeFeatureImport                            SearchEventsSchemaType = "feature-import"
	SearchEventsSchemaTypeFeatureMetadataUpdated                   SearchEventsSchemaType = "feature-metadata-updated"
	SearchEventsSchemaTypeFeaturePotentiallyStaleOn                SearchEventsSchemaType = "feature-potentially-stale-on"
	SearchEventsSchemaTypeFeatureProjectChange                     SearchEventsSchemaType = "feature-project-change"
	SearchEventsSchemaTypeFeatureRevived                           SearchEventsSchemaType = "feature-revived"
	SearchEventsSchemaTypeFeatureStaleOff                          SearchEventsSchemaType = "feature-stale-off"
	SearchEventsSchemaTypeFeatureStaleOn                           SearchEventsSchemaType = "feature-stale-on"
	SearchEventsSchemaTypeFeatureStrategyAdd                       SearchEventsSchemaType = "feature-strategy-add"
	SearchEventsSchemaTypeFeatureStrategyRemove                    SearchEventsSchemaType = "feature-strategy-remove"
	SearchEventsSchemaTypeFeatureStrategyUpdate                    SearchEventsSchemaType = "feature-strategy-update"
	SearchEventsSchemaTypeFeatureTagImport                         SearchEventsSchemaType = "feature-tag-import"
	SearchEventsSchemaTypeFeatureTagged                            SearchEventsSchemaType = "feature-tagged"
	SearchEventsSchemaTypeFeatureTypeUpdated                       SearchEventsSchemaType = "feature-type-updated"
	SearchEventsSchemaTypeFeatureUnfavorited                       SearchEventsSchemaType = "feature-unfavorited"
	SearchEventsSchemaTypeFeatureUntagged                          SearchEventsSchemaType = "feature-untagged"
	SearchEventsSchemaTypeFeatureUpdated                           SearchEventsSchemaType = "feature-updated"
	SearchEventsSchemaTypeFeatureVariantsUpdated                   SearchEventsSchemaType = "feature-variants-updated"
	SearchEventsSchemaTypeFeaturesExported                         SearchEventsSchemaType = "features-exported"
	SearchEventsSchemaTypeFeaturesImported                         SearchEventsSchemaType = "features-imported"
	SearchEventsSchemaTypeGroupCreated                             SearchEventsSchemaType = "group-created"
	SearchEventsSchemaTypeGroupDeleted                             SearchEventsSchemaType = "group-deleted"
	SearchEventsSchemaTypeGroupUpdated                             SearchEventsSchemaType = "group-updated"
	SearchEventsSchemaTypeGroupUserAdded                           SearchEventsSchemaType = "group-user-added"
	SearchEventsSchemaTypeGroupUserRemoved                         SearchEventsSchemaType = "group-user-removed"
	SearchEventsSchemaTypeIncomingWebhookCreated                   SearchEventsSchemaType = "incoming-webhook-created"
	SearchEventsSchemaTypeIncomingWebhookDeleted                   SearchEventsSchemaType = "incoming-webhook-deleted"
	SearchEventsSchemaTypeIncomingWebhookTokenCreated              SearchEventsSchemaType = "incoming-webhook-token-created"
	SearchEventsSchemaTypeIncomingWebhookTokenDeleted              SearchEventsSchemaType = "incoming-webhook-token-deleted"
	SearchEventsSchemaTypeIncomingWebhookTokenUpdated              SearchEventsSchemaType = "incoming-webhook-token-updated"
	SearchEventsSchemaTypeIncomingWebhookUpdated                   SearchEventsSchemaType = "incoming-webhook-updated"
	SearchEventsSchemaTypePatCreated                               SearchEventsSchemaType = "pat-created"
	SearchEventsSchemaTypePatDeleted                               SearchEventsSchemaType = "pat-deleted"
	SearchEventsSchemaTypeProjectAccessAdded                       SearchEventsSchemaType = "project-access-added"
	SearchEventsSchemaTypeProjectAccessGroupRolesDeleted           SearchEventsSchemaType = "project-access-group-roles-deleted"
	SearchEventsSchemaTypeProjectAccessGroupRolesUpdated           SearchEventsSchemaType = "project-access-group-roles-updated"
	SearchEventsSchemaTypeProjectAccessUpdated                     SearchEventsSchemaType = "project-access-updated"
	SearchEventsSchemaTypeProjectAccessUserRolesDeleted            SearchEventsSchemaType = "project-access-user-roles-deleted"
	SearchEventsSchemaTypeProjectAccessUserRolesUpdated            SearchEventsSchemaType = "project-access-user-roles-updated"
	SearchEventsSchemaTypeProjectCreated                           SearchEventsSchemaType = "project-created"
	SearchEventsSchemaTypeProjectDeleted                           SearchEventsSchemaType = "project-deleted"
	SearchEventsSchemaTypeProjectEnvironmentAdded                  SearchEventsSchemaType = "project-environment-added"
	SearchEventsSchemaTypeProjectEnvironmentRemoved                SearchEventsSchemaType = "project-environment-removed"
	SearchEventsSchemaTypeProjectFavorited                         SearchEventsSchemaType = "project-favorited"
	SearchEventsSchemaTypeProjectGroupAdded                        SearchEventsSchemaType = "project-group-added"
	SearchEventsSchemaTypeProjectGroupRemoved                      SearchEventsSchemaType = "project-group-removed"
	SearchEventsSchemaTypeProjectGroupRoleChanged                  SearchEventsSchemaType = "project-group-role-changed"
	SearchEventsSchemaTypeProjectImport                            SearchEventsSchemaType = "project-import"
	SearchEventsSchemaTypeProjectUnfavorited                       SearchEventsSchemaType = "project-unfavorited"
	SearchEventsSchemaTypeProjectUpdated                           SearchEventsSchemaType = "project-updated"
	SearchEventsSchemaTypeProjectUserAdded                         SearchEventsSchemaType = "project-user-added"
	SearchEventsSchemaTypeProjectUserRemoved                       SearchEventsSchemaType = "project-user-removed"
	SearchEventsSchemaTypeProjectUserRoleChanged                   SearchEventsSchemaType = "project-user-role-changed"
	SearchEventsSchemaTypePublicSignupTokenCreated                 SearchEventsSchemaType = "public-signup-token-created"
	SearchEventsSchemaTypePublicSignupTokenUpdated                 SearchEventsSchemaType = "public-signup-token-updated"
	SearchEventsSchemaTypePublicSignupTokenUserAdded               SearchEventsSchemaType = "public-signup-token-user-added"
	SearchEventsSchemaTypeRoleCreated                              SearchEventsSchemaType = "role-created"
	SearchEventsSchemaTypeRoleDeleted                              SearchEventsSchemaType = "role-deleted"
	SearchEventsSchemaTypeRoleUpdated                              SearchEventsSchemaType = "role-updated"
	SearchEventsSchemaTypeScheduledChangeRequestExecuted           SearchEventsSchemaType = "scheduled-change-request-executed"
	SearchEventsSchemaTypeSegmentCreated                           SearchEventsSchemaType = "segment-created"
	SearchEventsSchemaTypeSegmentDeleted                           SearchEventsSchemaType = "segment-deleted"
	SearchEventsSchemaTypeSegmentImport                            SearchEventsSchemaType = "segment-import"
	SearchEventsSchemaTypeSegmentUpdated                           SearchEventsSchemaType = "segment-updated"
	SearchEventsSchemaTypeServiceAccountCreated                    SearchEventsSchemaType = "service-account-created"
	SearchEventsSchemaTypeServiceAccountDeleted                    SearchEventsSchemaType = "service-account-deleted"
	SearchEventsSchemaTypeServiceAccountUpdated                    SearchEventsSchemaType = "service-account-updated"
	SearchEventsSchemaTypeSettingCreated                           SearchEventsSchemaType = "setting-created"
	SearchEventsSchemaTypeSettingDeleted                           SearchEventsSchemaType = "setting-deleted"
	SearchEventsSchemaTypeSettingUpdated                           SearchEventsSchemaType = "setting-updated"
	SearchEventsSchemaTypeStrategyCreated                          SearchEventsSchemaType = "strategy-created"
	SearchEventsSchemaTypeStrategyDeleted                          SearchEventsSchemaType = "strategy-deleted"
	SearchEventsSchemaTypeStrategyDeprecated                       SearchEventsSchemaType = "strategy-deprecated"
	SearchEventsSchemaTypeStrategyImport                           SearchEventsSchemaType = "strategy-import"
	SearchEventsSchemaTypeStrategyOrderChanged                     SearchEventsSchemaType = "strategy-order-changed"
	SearchEventsSchemaTypeStrategyReactivated                      SearchEventsSchemaType = "strategy-reactivated"
	SearchEventsSchemaTypeStrategyUpdated                          SearchEventsSchemaType = "strategy-updated"
	SearchEventsSchemaTypeTagCreated                               SearchEventsSchemaType = "tag-created"
	SearchEventsSchemaTypeTagDeleted                               SearchEventsSchemaType = "tag-deleted"
	SearchEventsSchemaTypeTagImport                                SearchEventsSchemaType = "tag-import"
	SearchEventsSchemaTypeTagTypeCreated                           SearchEventsSchemaType = "tag-type-created"
	SearchEventsSchemaTypeTagTypeDeleted                           SearchEventsSchemaType = "tag-type-deleted"
	SearchEventsSchemaTypeTagTypeImport                            SearchEventsSchemaType = "tag-type-import"
	SearchEventsSchemaTypeTagTypeUpdated                           SearchEventsSchemaType = "tag-type-updated"
	SearchEventsSchemaTypeUserCreated                              SearchEventsSchemaType = "user-created"
	SearchEventsSchemaTypeUserDeleted                              SearchEventsSchemaType = "user-deleted"
	SearchEventsSchemaTypeUserUpdated                              SearchEventsSchemaType = "user-updated"
)

// Defines values for StrategiesSchemaVersion.
const (
	StrategiesSchemaVersionN1 StrategiesSchemaVersion = 1
)

// Defines values for StrategyVariantSchemaPayloadType.
const (
	StrategyVariantSchemaPayloadTypeCsv    StrategyVariantSchemaPayloadType = "csv"
	StrategyVariantSchemaPayloadTypeJson   StrategyVariantSchemaPayloadType = "json"
	StrategyVariantSchemaPayloadTypeNumber StrategyVariantSchemaPayloadType = "number"
	StrategyVariantSchemaPayloadTypeString StrategyVariantSchemaPayloadType = "string"
)

// Defines values for StrategyVariantSchemaWeightType.
const (
	StrategyVariantSchemaWeightTypeFix      StrategyVariantSchemaWeightType = "fix"
	StrategyVariantSchemaWeightTypeVariable StrategyVariantSchemaWeightType = "variable"
)

// Defines values for UiConfigSchemaAuthenticationType.
const (
	Custom     UiConfigSchemaAuthenticationType = "custom"
	Demo       UiConfigSchemaAuthenticationType = "demo"
	Enterprise UiConfigSchemaAuthenticationType = "enterprise"
	Hosted     UiConfigSchemaAuthenticationType = "hosted"
	None       UiConfigSchemaAuthenticationType = "none"
	OpenSource UiConfigSchemaAuthenticationType = "open-source"
)

// Defines values for UpdateStrategySchemaParametersType.
const (
	UpdateStrategySchemaParametersTypeBoolean    UpdateStrategySchemaParametersType = "boolean"
	UpdateStrategySchemaParametersTypeList       UpdateStrategySchemaParametersType = "list"
	UpdateStrategySchemaParametersTypeNumber     UpdateStrategySchemaParametersType = "number"
	UpdateStrategySchemaParametersTypePercentage UpdateStrategySchemaParametersType = "percentage"
	UpdateStrategySchemaParametersTypeString     UpdateStrategySchemaParametersType = "string"
)

// Defines values for UpdateUserSchemaRootRole1.
const (
	Admin  UpdateUserSchemaRootRole1 = "Admin"
	Editor UpdateUserSchemaRootRole1 = "Editor"
	Member UpdateUserSchemaRootRole1 = "Member"
	Owner  UpdateUserSchemaRootRole1 = "Owner"
	Viewer UpdateUserSchemaRootRole1 = "Viewer"
)

// Defines values for VariantFlagSchemaPayloadType.
const (
	VariantFlagSchemaPayloadTypeCsv    VariantFlagSchemaPayloadType = "csv"
	VariantFlagSchemaPayloadTypeJson   VariantFlagSchemaPayloadType = "json"
	VariantFlagSchemaPayloadTypeString VariantFlagSchemaPayloadType = "string"
)

// Defines values for VariantSchemaPayloadType.
const (
	VariantSchemaPayloadTypeCsv    VariantSchemaPayloadType = "csv"
	VariantSchemaPayloadTypeJson   VariantSchemaPayloadType = "json"
	VariantSchemaPayloadTypeNumber VariantSchemaPayloadType = "number"
	VariantSchemaPayloadTypeString VariantSchemaPayloadType = "string"
)

// Defines values for VariantSchemaWeightType.
const (
	Fix      VariantSchemaWeightType = "fix"
	Variable VariantSchemaWeightType = "variable"
)

// Defines values for ExportParamsFormat.
const (
	Json ExportParamsFormat = "json"
	Yaml ExportParamsFormat = "yaml"
)

// AddonCreateUpdateSchema Data required to create or update an [Unleash addon](https://docs.getunleash.io/reference/addons) instance.
type AddonCreateUpdateSchema struct {
	// Description A description of the addon.
	Description *string `json:"description,omitempty"`

	// Enabled Whether the addon should be enabled or not.
	Enabled bool `json:"enabled"`

	// Environments The list of environments that this addon will listen to events from. An empty list means it will listen to events from **all** environments.
	Environments *[]string `json:"environments,omitempty"`

	// Events The event types that will trigger this specific addon.
	Events []string `json:"events"`

	// Parameters Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose. Consult the documentation for details.
	Parameters map[string]interface{} `json:"parameters"`

	// Projects The projects that this addon will listen to events from. An empty list means it will listen to events from **all** projects.
	Projects *[]string `json:"projects,omitempty"`

	// Provider The addon provider, such as "webhook" or "slack". This string is **case sensitive** and maps to the provider's `name` property.
	//
	// The list of all supported providers and their parameters for a specific Unleash instance can be found by making a GET request to the `api/admin/addons` endpoint: the `providers` property of that response will contain all available providers.
	//
	// The default set of providers can be found in the [addons reference documentation](https://docs.getunleash.io/reference/addons). The default supported options are:
	// - `datadog` for [Datadog](https://docs.getunleash.io/reference/addons/datadog)
	// - `slack` for [Slack](https://docs.getunleash.io/reference/addons/slack)
	// - `teams` for [Microsoft Teams](https://docs.getunleash.io/reference/addons/teams)
	// - `webhook` for [webhooks](https://docs.getunleash.io/reference/addons/webhook)
	//
	// The provider you choose for your addon dictates what properties the `parameters` object needs. Refer to the documentation for each provider for more information.
	Provider string `json:"provider"`
}

// AddonParameterSchema An addon parameter definition.
type AddonParameterSchema struct {
	// Description A description of the parameter. This should explain to the end user what the parameter is used for.
	Description *string `json:"description,omitempty"`

	// DisplayName The name of the parameter as it is shown to the end user in the Admin UI.
	DisplayName string `json:"displayName"`

	// Name The name of the parameter as it is used in code. References to this parameter should use this value.
	Name string `json:"name"`

	// Placeholder The default value for this parameter. This value is used if no other value is provided.
	Placeholder *string `json:"placeholder,omitempty"`

	// Required Whether this parameter is required or not. If a parameter is required, you must give it a value when you create the addon. If it is not required it can be left out. It may receive a default value in those cases.
	Required bool `json:"required"`

	// Sensitive Indicates whether this parameter is **sensitive** or not. Unleash will not return sensitive parameters to API requests. It will instead use a number of asterisks to indicate that a value is set, e.g. "******". The number of asterisks does not correlate to the parameter's value.
	Sensitive bool `json:"sensitive"`

	// Type The type of the parameter. Corresponds roughly to [HTML `input` field types](https://developer.mozilla.org/docs/Web/HTML/Element/Input#input_types). Multi-line inut fields are indicated as `textfield` (equivalent to the HTML `textarea` tag).
	Type string `json:"type"`
}

// AddonSchema An [addon](https://docs.getunleash.io/reference/addons) instance description. Contains data about what kind of provider it uses, whether it's enabled or not, what events it listens for, and more.
type AddonSchema struct {
	// Description A description of the addon. `null` if no description exists.
	Description *string `json:"description"`

	// Enabled Whether the addon is enabled or not.
	Enabled bool `json:"enabled"`

	// Environments The list of environments that this addon listens to events from. An empty list means it listens to events from **all** environments.
	Environments *[]string `json:"environments,omitempty"`

	// Events The event types that trigger this specific addon.
	Events []string `json:"events"`

	// Id The addon's unique identifier.
	Id int `json:"id"`

	// Parameters Parameters for the addon provider. This object has different required and optional properties depending on the provider you choose.
	Parameters map[string]interface{} `json:"parameters"`

	// Projects The projects that this addon listens to events from. An empty list means it listens to events from **all** projects.
	Projects *[]string `json:"projects,omitempty"`

	// Provider The addon provider, such as "webhook" or "slack".
	Provider string `json:"provider"`
}

// AddonTypeSchema An addon provider. Defines a specific addon type and what the end user must configure when creating a new addon of that type.
type AddonTypeSchema struct {
	// Alerts A list of alerts to display to the user when installing addons of this type.
	Alerts *[]struct {
		// Text The text of the alert. This is what will be displayed to the user.
		Text string `json:"text"`

		// Type The type of alert. This determines the color of the alert.
		Type AddonTypeSchemaAlertsType `json:"type"`
	} `json:"alerts,omitempty"`

	// Deprecated This should be used to inform the user that this addon type is deprecated and should not be used. Deprecated addons will show a badge with this information on the UI.
	Deprecated *string `json:"deprecated,omitempty"`

	// Description A description of the addon type.
	Description string `json:"description"`

	// DisplayName The addon type's name as it should be displayed in the admin UI.
	DisplayName string `json:"displayName"`

	// DocumentationUrl A URL to where you can find more information about using this addon type.
	DocumentationUrl string `json:"documentationUrl"`

	// Events All the [event types](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#feature-toggle-events) that are available for this addon provider.
	Events *[]string `json:"events,omitempty"`

	// HowTo A long description of how to use this addon type. This will be displayed on the top of configuration page. Can contain markdown.
	HowTo *string `json:"howTo,omitempty"`

	// Installation The installation configuration for this addon type.
	Installation *struct {
		// HelpText The help text of the installation configuration. This will be displayed to the user when installing addons of this type.
		HelpText *string `json:"helpText,omitempty"`

		// Title The title of the installation configuration. This will be displayed to the user when installing addons of this type.
		Title *string `json:"title,omitempty"`

		// Url A URL to where the addon configuration should redirect to install addons of this type.
		Url string `json:"url"`
	} `json:"installation,omitempty"`

	// Name The name of the addon type. When creating new addons, this goes in the payload's `type` field.
	Name string `json:"name"`

	// Parameters The addon provider's parameters. Use these to configure an addon of this provider type. Items with `required: true` must be provided.
	Parameters *[]AddonParameterSchema `json:"parameters,omitempty"`

	// TagTypes A list of [Unleash tag types](https://docs.getunleash.io/reference/tags#tag-types) that this addon uses. These tags will be added to the Unleash instance when an addon of this type is created.
	TagTypes *[]TagTypeSchema `json:"tagTypes,omitempty"`
}

// AddonTypeSchemaAlertsType The type of alert. This determines the color of the alert.
type AddonTypeSchemaAlertsType string

// AddonsSchema An object containing two things:
// 1. A list of all [addons](https://docs.getunleash.io/reference/addons) defined on this Unleash instance
// 2. A list of all addon providers defined on this instance
type AddonsSchema struct {
	// Addons All the addons that exist on this instance of Unleash.
	Addons []AddonSchema `json:"addons"`

	// Providers A list of  all available addon providers, along with their parameters and descriptions.
	Providers []AddonTypeSchema `json:"providers"`
}

// AdminCountSchema Contains total admin counts for an Unleash instance.
type AdminCountSchema struct {
	// NoPassword Total number of admins that do not have a password set. May be SSO, but may also be users that did not set a password yet.
	NoPassword float32 `json:"noPassword"`

	// Password Total number of admins that have a password set.
	Password float32 `json:"password"`

	// Service Total number of service accounts that have the admin root role.
	Service float32 `json:"service"`
}

// AdminSegmentSchema A description of a [segment](https://docs.getunleash.io/reference/segments)
type AdminSegmentSchema struct {
	// Constraints The list of constraints that are used in this segment
	Constraints []ConstraintSchema `json:"constraints"`

	// CreatedAt When the segment was created
	CreatedAt time.Time `json:"createdAt"`

	// CreatedBy The creator's email or username
	CreatedBy *string `json:"createdBy"`

	// Description The description for this segment
	Description *string `json:"description"`

	// Id The ID of this segment
	Id int `json:"id"`

	// Name The name of this segment
	Name string `json:"name"`

	// Project The project the segment belongs to. Only present if the segment is a project-specific segment.
	Project *string `json:"project"`

	// UsedInFeatures The number of feature flags that use this segment. The number also includes the any flags with pending change requests that would add this segment.
	UsedInFeatures *int `json:"usedInFeatures"`

	// UsedInProjects The number of projects that use this segment. The number includes any projects with pending change requests that would add this segment.
	UsedInProjects *int `json:"usedInProjects"`
}

// AdvancedPlaygroundEnvironmentFeatureSchema A simplified feature toggle model intended for the Unleash playground.
type AdvancedPlaygroundEnvironmentFeatureSchema struct {
	// Context The Unleash context with flattened properties
	Context SdkFlatContextSchema `json:"context"`

	// Environment The feature's environment.
	Environment string `json:"environment"`

	// IsEnabled Whether this feature is enabled or not in the current environment.
	//                           If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),
	//                           this will be `false` to align with how client SDKs treat unresolved feature states.
	IsEnabled bool `json:"isEnabled"`

	// IsEnabledInCurrentEnvironment Whether the feature is active and would be evaluated in the provided environment in a normal SDK context.
	IsEnabledInCurrentEnvironment bool `json:"isEnabledInCurrentEnvironment"`

	// Name The feature's name.
	Name string `json:"name"`

	// ProjectId The ID of the project that contains this feature.
	ProjectId string `json:"projectId"`

	// Strategies Feature's applicable strategies and cumulative results of the strategies
	Strategies struct {
		// Data The strategies that apply to this feature.
		Data []PlaygroundStrategySchema `json:"data"`

		// Result The cumulative results of all the feature's strategies. Can be `true`,
		//                                   `false`, or `unknown`.
		//                                   This property will only be `unknown`
		//                                   if one or more of the strategies can't be fully evaluated and the rest of the strategies
		//                                   all resolve to `false`.
		Result AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result `json:"result"`
	} `json:"strategies"`

	// Variant The feature variant you receive based on the provided context or the _disabled
	//                           variant_. If a feature is disabled or doesn't have any
	//                           variants, you would get the _disabled variant_.
	//                           Otherwise, you'll get one of the feature's defined variants.
	Variant *struct {
		// Enabled Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`
		Enabled bool `json:"enabled"`

		// Name The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`
		Name string `json:"name"`

		// Payload An optional payload attached to the variant.
		Payload *struct {
			// Type The format of the payload.
			Type string `json:"type"`

			// Value The payload value stringified.
			Value string `json:"value"`
		} `json:"payload,omitempty"`
	} `json:"variant"`

	// Variants The feature variants.
	Variants []VariantSchema `json:"variants"`
}

// AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0 defines model for .
type AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0 = bool

// AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1 defines model for AdvancedPlaygroundEnvironmentFeatureSchema.Strategies.Result.1.
type AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1 string

// AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result The cumulative results of all the feature's strategies. Can be `true`,
//
//	`false`, or `unknown`.
//	This property will only be `unknown`
//	if one or more of the strategies can't be fully evaluated and the rest of the strategies
//	all resolve to `false`.
type AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result struct {
	union json.RawMessage
}

// AdvancedPlaygroundFeatureSchema A simplified feature toggle model intended for the Unleash playground.
type AdvancedPlaygroundFeatureSchema struct {
	// Environments The lists of features that have been evaluated grouped by environment.
	Environments map[string][]AdvancedPlaygroundEnvironmentFeatureSchema `json:"environments"`

	// Name The feature's name.
	Name string `json:"name"`

	// ProjectId The ID of the project that contains this feature.
	ProjectId string `json:"projectId"`
}

// AdvancedPlaygroundRequestSchema Data for the playground API to evaluate toggles in advanced mode with environment and context multi selection
type AdvancedPlaygroundRequestSchema struct {
	// Context The Unleash context as modeled in client SDKs
	Context SdkContextSchema `json:"context"`

	// Environments The environments to evaluate toggles in.
	Environments []string `json:"environments"`

	// Projects A list of projects to check for toggles in.
	Projects *AdvancedPlaygroundRequestSchema_Projects `json:"projects,omitempty"`
}

// AdvancedPlaygroundRequestSchemaProjects0 A list of projects to check for toggles in.
type AdvancedPlaygroundRequestSchemaProjects0 = []string

// AdvancedPlaygroundRequestSchemaProjects1 Check toggles in all projects.
type AdvancedPlaygroundRequestSchemaProjects1 string

// AdvancedPlaygroundRequestSchema_Projects A list of projects to check for toggles in.
type AdvancedPlaygroundRequestSchema_Projects struct {
	union json.RawMessage
}

// AdvancedPlaygroundResponseSchema The state of all features given the provided input.
type AdvancedPlaygroundResponseSchema struct {
	// Features The list of features that have been evaluated.
	Features []AdvancedPlaygroundFeatureSchema `json:"features"`

	// Input Data for the playground API to evaluate toggles in advanced mode with environment and context multi selection
	Input AdvancedPlaygroundRequestSchema `json:"input"`
}

// ApiTokenSchema An overview of an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).
type ApiTokenSchema struct {
	// Alias Alias is no longer in active use and will often be NULL. It's kept around as a way of allowing old proxy tokens created with the old metadata format to keep working.
	Alias *string `json:"alias"`

	// CreatedAt When the token was created.
	CreatedAt time.Time `json:"createdAt"`

	// Environment The environment the token has access to. `*` if it has access to all environments.
	Environment *string `json:"environment,omitempty"`

	// ExpiresAt The token's expiration date. NULL if the token doesn't have an expiration set.
	ExpiresAt *time.Time `json:"expiresAt"`

	// Project The project this token belongs to.
	Project string `json:"project"`

	// Projects The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as `[*]`
	Projects []string `json:"projects"`

	// Secret The token used for authentication.
	Secret string `json:"secret"`

	// SeenAt When the token was last seen/used to authenticate with. NULL if the token has not yet been used for authentication.
	SeenAt *time.Time `json:"seenAt"`

	// TokenName A unique name for this particular token
	TokenName string `json:"tokenName"`

	// Type The type of API token
	Type ApiTokenSchemaType `json:"type"`

	// Username This property was deprecated in Unleash v5. Prefer the `tokenName` property instead.
	// Deprecated:
	Username *string `json:"username,omitempty"`
}

// ApiTokenSchemaType The type of API token
type ApiTokenSchemaType string

// ApiTokensSchema An object with [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys)
type ApiTokensSchema struct {
	// Tokens A list of Unleash API tokens.
	Tokens []ApiTokenSchema `json:"tokens"`
}

// ApplicationSchema Data about an application that's connected to Unleash via an SDK.
type ApplicationSchema struct {
	// AppName Name of the application
	AppName string `json:"appName"`

	// Color The CSS color that is used to color the application's entry in the application list
	Color *string `json:"color,omitempty"`

	// Description Extra information added about the application reporting the metrics. Only present if added via the Unleash Admin interface
	Description *string `json:"description,omitempty"`

	// Icon An URL to an icon file to be used for the applications's entry in the application list
	Icon *string `json:"icon,omitempty"`

	// SdkVersion Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`
	SdkVersion *string `json:"sdkVersion,omitempty"`

	// Strategies Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK
	Strategies *[]string `json:"strategies,omitempty"`

	// Url A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application
	Url *string `json:"url,omitempty"`

	// Usage The list of projects the application has been using.
	Usage *[]ApplicationUsageSchema `json:"usage,omitempty"`
}

// ApplicationUsageSchema Data about an project that have been used by applications.
type ApplicationUsageSchema struct {
	// Environments Which environments have been accessed in this project.
	Environments []string `json:"environments"`

	// Project Name of the project
	Project string `json:"project"`
}

// ApplicationsSchema An object containing a list of applications that have connected to Unleash via an SDK.
type ApplicationsSchema struct {
	// Applications The list of applications that have connected to this Unleash instance.
	Applications *[]ApplicationSchema `json:"applications,omitempty"`
}

// BatchFeaturesSchema A list of feature toggle names for batch operations
type BatchFeaturesSchema struct {
	// Features List of feature toggle names
	Features []string `json:"features"`
}

// BatchStaleSchema A list of features to operate on and whether they should be marked as stale or as not stale.
type BatchStaleSchema struct {
	// Features A list of features to mark as (not) stale
	Features []string `json:"features"`

	// Stale Whether the list of features should be marked as stale or not stale. If `true`, the features will be marked as stale. If `false`, the features will be marked as not stale.
	Stale bool `json:"stale"`
}

// BulkMetricsSchema A batch of metrics accumulated by Edge (or other compatible applications). Includes both application registrations as well usage metrics from clients
type BulkMetricsSchema struct {
	// Applications A list of applications registered by an Unleash SDK
	Applications []BulkRegistrationSchema `json:"applications"`

	// Metrics a list of client usage metrics registered by downstream providers. (Typically Unleash Edge)
	Metrics []ClientMetricsEnvSchema `json:"metrics"`
}

// BulkRegistrationSchema An application registration. Defines the format POSTed by our server-side SDKs when they're starting up
type BulkRegistrationSchema struct {
	// AppName The name of the application that is evaluating toggles
	AppName string `json:"appName"`

	// ConnectVia A list of applications this app registration has been registered through. If connected directly to Unleash, this is an empty list.
	//  This can be used in later visualizations to tell how many levels of proxy or Edge instances our SDKs have connected through
	ConnectVia *[]struct {
		AppName    string `json:"appName"`
		InstanceId string `json:"instanceId"`
	} `json:"connectVia,omitempty"`

	// Environment Which environment the application is running in
	Environment string `json:"environment"`

	// InstanceId A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application
	InstanceId string `json:"instanceId"`

	// Interval How often (in seconds) the application refreshes its features
	Interval *float32 `json:"interval,omitempty"`

	// SdkVersion The version the sdk is running. Typically <client>:<version>
	SdkVersion *string `json:"sdkVersion,omitempty"`

	// Started A representation of a date. Either as a date-time string or as a UNIX timestamp.
	Started *DateSchema `json:"started,omitempty"`

	// Strategies Enabled [strategies](https://docs.getunleash.io/reference/activation-strategies) in the application
	Strategies *[]string `json:"strategies,omitempty"`
}

// BulkToggleFeaturesSchema The feature list used for bulk toggle operations
type BulkToggleFeaturesSchema struct {
	// Features The features that we want to bulk toggle
	Features []string `json:"features"`
}

// ChangePasswordSchema Change password as long as the token is a valid token
type ChangePasswordSchema struct {
	// Password The new password for the user
	Password string `json:"password"`

	// Token A reset token used to validate that the user is allowed to change the password.
	Token string `json:"token"`
}

// ClientApplicationSchema A client application is an instance of one of our SDKs
type ClientApplicationSchema struct {
	// AppName An identifier for the app that uses the sdk, should be static across SDK restarts
	AppName string `json:"appName"`

	// Environment The SDK's configured 'environment' property. Deprecated. This property  does **not** control which Unleash environment the SDK gets toggles for. To control Unleash environments, use the SDKs API key.
	// Deprecated:
	Environment *string `json:"environment,omitempty"`

	// InstanceId A unique identifier identifying the instance of the application running the SDK. Often changes based on execution environment. For instance: two pods in Kubernetes will have two different instanceIds
	InstanceId *string `json:"instanceId,omitempty"`

	// Interval How often (in seconds) does the client refresh its toggles
	Interval float32 `json:"interval"`

	// SdkVersion An SDK version identifier. Usually formatted as "unleash-client-<language>:<version>"
	SdkVersion *string `json:"sdkVersion,omitempty"`

	// Started Either an RFC-3339 timestamp or a unix timestamp in seconds
	Started ClientApplicationSchema_Started `json:"started"`

	// Strategies Which strategies the SDKs runtime knows about
	Strategies []string `json:"strategies"`
}

// ClientApplicationSchemaStarted0 defines model for .
type ClientApplicationSchemaStarted0 = time.Time

// ClientApplicationSchemaStarted1 defines model for .
type ClientApplicationSchemaStarted1 = float32

// ClientApplicationSchema_Started Either an RFC-3339 timestamp or a unix timestamp in seconds
type ClientApplicationSchema_Started struct {
	union json.RawMessage
}

// ClientFeatureSchema Feature toggle configuration used by SDKs to evaluate state of a toggle
type ClientFeatureSchema struct {
	// Dependencies Feature dependencies for this toggle
	Dependencies *[]DependentFeatureSchema `json:"dependencies,omitempty"`

	// Description A description of the toggle
	Description *string `json:"description"`

	// Enabled Whether the feature flag is enabled for the current API key or not. This is ANDed with the evaluation results of the strategies list, so if this is false, the evaluation result will always be false
	Enabled bool `json:"enabled"`

	// ImpressionData Set to true if SDKs should trigger [impression events](https://docs.getunleash.io/reference/impression-data) when this toggle is evaluated
	ImpressionData *bool `json:"impressionData"`

	// Name The unique name of a feature toggle. Is validated to be URL safe on creation
	Name string `json:"name"`

	// Project Which project this feature toggle belongs to
	Project *string `json:"project,omitempty"`

	// Stale If this is true Unleash believes this feature toggle has been active longer than Unleash expects a toggle of this type to be active
	Stale *bool `json:"stale,omitempty"`

	// Strategies Evaluation strategies for this toggle. Each entry in this list will be evaluated and ORed together
	Strategies *[]FeatureStrategySchema `json:"strategies,omitempty"`

	// Type What kind of feature flag is this. Refer to the documentation on [feature toggle types](https://docs.getunleash.io/reference/feature-toggle-types) for more information
	Type *string `json:"type,omitempty"`

	// Variants [Variants](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) configured for this toggle
	Variants *[]VariantSchema `json:"variants"`
}

// ClientFeaturesQuerySchema Query parameters active for a client features request
type ClientFeaturesQuerySchema struct {
	// Environment Strategies for the feature toggle configured for this environment are included. (DEPRECATED) - Handled by API tokens
	// Deprecated:
	Environment *string `json:"environment,omitempty"`

	// InlineSegmentConstraints Set to true if requesting client does not support Unleash-Client-Specification 4.2.2 or newer. Modern SDKs will have this set to false, since they will be able to merge constraints and segments themselves
	InlineSegmentConstraints *bool `json:"inlineSegmentConstraints,omitempty"`

	// NamePrefix Features are filtered to only include features whose name starts with this prefix
	NamePrefix *string `json:"namePrefix,omitempty"`

	// Project Features that are part of these projects are included in this response. (DEPRECATED) - Handled by API tokens
	// Deprecated:
	Project *[]string `json:"project,omitempty"`

	// Tag Features tagged with one of these tags are included
	Tag *[][]string `json:"tag,omitempty"`
}

// ClientFeaturesSchema Configuration data for server-side SDKs for evaluating feature flags.
type ClientFeaturesSchema struct {
	// Features A list of feature toggles with their configuration
	Features []ClientFeatureSchema `json:"features"`

	// Query Query parameters active for a client features request
	Query *ClientFeaturesQuerySchema `json:"query,omitempty"`

	// Segments A list of [Segments](https://docs.getunleash.io/reference/segments) configured for this Unleash instance
	Segments *[]ClientSegmentSchema `json:"segments,omitempty"`

	// Version A version number for the format used in the response. Most Unleash instances now return version 2, which includes segments as a separate array
	Version float32 `json:"version"`
}

// ClientMetricsEnvSchema Used for reporting feature evaluation results from SDKs
type ClientMetricsEnvSchema struct {
	// AppName The name of the application the SDK is being used in
	AppName string `json:"appName"`

	// Environment Which environment the SDK is being used in
	Environment string `json:"environment"`

	// FeatureName Name of the feature checked by the SDK
	FeatureName string `json:"featureName"`

	// No How many times the toggle evaluated to false
	No *int `json:"no,omitempty"`

	// Timestamp A representation of a date. Either as a date-time string or as a UNIX timestamp.
	Timestamp *DateSchema `json:"timestamp,omitempty"`

	// Variants How many times each variant was returned
	Variants *map[string]int `json:"variants,omitempty"`

	// Yes How many times the toggle evaluated to true
	Yes *int `json:"yes,omitempty"`
}

// ClientMetricsSchema Client usage metrics, accumulated in buckets of hour by hour by default
type ClientMetricsSchema struct {
	// AppName The name of the application that is evaluating toggles
	AppName string `json:"appName"`

	// Bucket Holds all metrics gathered over a window of time. Typically 1 hour wide
	Bucket struct {
		// Start A representation of a date. Either as a date-time string or as a UNIX timestamp.
		Start DateSchema `json:"start"`

		// Stop A representation of a date. Either as a date-time string or as a UNIX timestamp.
		Stop DateSchema `json:"stop"`

		// Toggles an object containing feature names with yes/no plus variant usage
		Toggles map[string]struct {
			// No How many times the toggle evaluated to false
			No *int `json:"no,omitempty"`

			// Variants An object describing how many times each variant was returned. Variant names are used as properties, and the number of times they were exposed is the corresponding value (i.e. `{ [variantName]: number }`).
			Variants *map[string]int `json:"variants,omitempty"`

			// Yes How many times the toggle evaluated to true
			Yes *float32 `json:"yes,omitempty"`
		} `json:"toggles"`
	} `json:"bucket"`

	// Environment Which environment the application is running in
	Environment *string `json:"environment,omitempty"`

	// InstanceId A [(somewhat) unique identifier](https://docs.getunleash.io/reference/sdks/node#advanced-usage) for the application
	InstanceId *string `json:"instanceId,omitempty"`
}

// ClientSegmentSchema Represents a client API segment of users defined by a set of constraints.
type ClientSegmentSchema struct {
	// Constraints List of constraints that determine which users are part of the segment
	Constraints []ConstraintSchema `json:"constraints"`

	// Id The segment's id.
	Id float32 `json:"id"`

	// Name The name of the segment.
	Name *string `json:"name,omitempty"`
}

// CloneFeatureSchema Copy of a feature with a new name
type CloneFeatureSchema struct {
	// Name The name of the new feature
	Name string `json:"name"`

	// ReplaceGroupId Whether to use the new feature name as its group ID or not. Group ID is used for calculating [stickiness](https://docs.getunleash.io/reference/stickiness#calculation). Defaults to true.
	ReplaceGroupId *bool `json:"replaceGroupId,omitempty"`
}

// ConstraintSchema A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)
type ConstraintSchema struct {
	// CaseInsensitive Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`

	// ContextName The name of the context field that this constraint should apply to.
	ContextName string `json:"contextName"`

	// Inverted Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.
	Inverted *bool `json:"inverted,omitempty"`

	// Operator The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).
	Operator ConstraintSchemaOperator `json:"operator"`

	// Value The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.
	Value *string `json:"value,omitempty"`

	// Values The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.
	Values *[]string `json:"values,omitempty"`
}

// ConstraintSchemaOperator The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).
type ConstraintSchemaOperator string

// ContextFieldSchema A representation of a [context field](https://docs.getunleash.io/reference/unleash-context).
type ContextFieldSchema struct {
	// CreatedAt When this context field was created
	CreatedAt *time.Time `json:"createdAt"`

	// Description The description of the context field.
	Description *string `json:"description"`

	// LegalValues Allowed values for this context field schema. Can be used to narrow down accepted input
	LegalValues *[]LegalValueSchema `json:"legalValues,omitempty"`

	// Name The name of the context field
	Name string `json:"name"`

	// SortOrder Used when sorting a list of context fields. Is also used as a tiebreaker if a list of context fields is sorted alphabetically.
	SortOrder *int `json:"sortOrder,omitempty"`

	// Stickiness Does this context field support being used for [stickiness](https://docs.getunleash.io/reference/stickiness) calculations
	Stickiness *bool `json:"stickiness,omitempty"`

	// UsedInFeatures Number of projects where this context field is used in
	UsedInFeatures *int `json:"usedInFeatures"`

	// UsedInProjects Number of projects where this context field is used in
	UsedInProjects *int `json:"usedInProjects"`
}

// ContextFieldStrategiesSchema A wrapper object containing all strategies that use a specific context field
type ContextFieldStrategiesSchema struct {
	// Strategies List of strategies using the context field
	Strategies []struct {
		// Environment The ID of the environment where this strategy is in.
		Environment string `json:"environment"`

		// FeatureName The name of the feature that contains this strategy.
		FeatureName string `json:"featureName"`

		// Id The ID of the strategy.
		Id string `json:"id"`

		// ProjectId The ID of the project that contains this feature.
		ProjectId string `json:"projectId"`

		// StrategyName The name of the strategy.
		StrategyName string `json:"strategyName"`
	} `json:"strategies"`
}

// ContextFieldsSchema A list of context fields
type ContextFieldsSchema = []ContextFieldSchema

// CreateApiTokenSchema The data required to create an [Unleash API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys).
type CreateApiTokenSchema struct {
	union json.RawMessage
}

// CreateApiTokenSchema0 defines model for .
type CreateApiTokenSchema0 struct {
	// ExpiresAt The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// TokenName The name of the token.
	TokenName string `json:"tokenName"`

	// Type An admin token. Must be the string "admin" (not case sensitive).
	Type string `json:"type"`
}

// CreateApiTokenSchema1 defines model for .
type CreateApiTokenSchema1 struct {
	// ExpiresAt The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Type An admin token. Must be the string "admin" (not case sensitive).
	Type string `json:"type"`

	// Username The name of the token. This property is deprecated. Use `tokenName` instead.
	// Deprecated:
	Username string `json:"username"`
}

// CreateApiTokenSchema2 defines model for .
type CreateApiTokenSchema2 struct {
	// Environment The environment that the token should be valid for. Defaults to "default"
	Environment *string `json:"environment,omitempty"`

	// ExpiresAt The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Project The project that the token should be valid for. Defaults to "*" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.
	Project *string `json:"project,omitempty"`

	// Projects A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.
	Projects *[]string `json:"projects,omitempty"`

	// TokenName The name of the token.
	TokenName string `json:"tokenName"`

	// Type A client or frontend token. Must be one of the strings "client" or "frontend" (not case sensitive).
	Type string `json:"type"`
}

// CreateApiTokenSchema3 defines model for .
type CreateApiTokenSchema3 struct {
	// Environment The environment that the token should be valid for. Defaults to "default"
	Environment *string `json:"environment,omitempty"`

	// ExpiresAt The time when this token should expire.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Project The project that the token should be valid for. Defaults to "*" meaning every project. This property is mutually incompatible with the `projects` property. If you specify one, you cannot specify the other.
	Project *string `json:"project,omitempty"`

	// Projects A list of projects that the token should be valid for. This property is mutually incompatible with the `project` property. If you specify one, you cannot specify the other.
	Projects *[]string `json:"projects,omitempty"`

	// Type A client or frontend token. Must be one of the strings "client" or "frontend" (not case sensitive).
	Type string `json:"type"`

	// Username The name of the token. This property is deprecated. Use `tokenName` instead.
	// Deprecated:
	Username string `json:"username"`
}

// CreateApplicationSchema Reported application information from Unleash SDKs
type CreateApplicationSchema struct {
	// AppName Name of the application
	AppName *string `json:"appName,omitempty"`

	// Color Css color to be used to color the application's entry in the application list
	Color *string `json:"color,omitempty"`

	// Icon An URL to an icon file to be used for the applications's entry in the application list
	Icon *string `json:"icon,omitempty"`

	// SdkVersion Which SDK and version the application reporting uses. Typically represented as `<identifier>:<version>`
	SdkVersion *string `json:"sdkVersion,omitempty"`

	// Strategies Which [strategies](https://docs.getunleash.io/topics/the-anatomy-of-unleash#activation-strategies) the application has loaded. Useful when trying to figure out if your [custom strategy](https://docs.getunleash.io/reference/custom-activation-strategies) has been loaded in the SDK
	Strategies *[]string `json:"strategies,omitempty"`

	// Url A link to reference the application reporting the metrics. Could for instance be a GitHub link to the repository of the application
	Url *string `json:"url,omitempty"`
}

// CreateContextFieldSchema Data used to create a context field configuration.
type CreateContextFieldSchema struct {
	// Description A description of the context field
	Description *string `json:"description,omitempty"`

	// LegalValues A list of allowed values for this context field
	LegalValues *[]LegalValueSchema `json:"legalValues,omitempty"`

	// Name The name of the context field.
	Name string `json:"name"`

	// SortOrder How this context field should be sorted if no other sort order is selected
	SortOrder *int `json:"sortOrder,omitempty"`

	// Stickiness `true` if this field should be available for use with [custom stickiness](https://docs.getunleash.io/reference/stickiness#custom-stickiness), otherwise `false`
	Stickiness *bool `json:"stickiness,omitempty"`
}

// CreateDependentFeatureSchema Feature dependency on a parent feature in write model
type CreateDependentFeatureSchema struct {
	// Enabled Whether the parent feature should be enabled. When `false` variants are ignored. `true` by default.
	Enabled *bool `json:"enabled,omitempty"`

	// Feature The name of the feature we depend on.
	Feature string `json:"feature"`

	// Variants The list of variants the parent feature should resolve to. Leave empty when you only want to check the `enabled` status.
	Variants *[]string `json:"variants,omitempty"`
}

// CreateFeatureNamingPatternSchema Create a feature naming pattern
type CreateFeatureNamingPatternSchema struct {
	// Description A description of the pattern in a human-readable format. Will be shown to users when they create a new feature flag.
	Description *string `json:"description"`

	// Example An example of a feature name that matches the pattern. Must itself match the pattern supplied.
	Example *string `json:"example"`

	// Pattern A JavaScript regular expression pattern, without the start and end delimiters. Optional flags are not allowed.
	Pattern *string `json:"pattern"`
}

// CreateFeatureSchema Data used to create a new feature toggle.
type CreateFeatureSchema struct {
	// Description Detailed description of the feature
	Description *string `json:"description"`

	// ImpressionData `true` if the impression data collection is enabled for the feature, otherwise `false`.
	ImpressionData *bool `json:"impressionData,omitempty"`

	// Name Unique feature name
	Name string `json:"name"`

	// Type The feature toggle's [type](https://docs.getunleash.io/reference/feature-toggle-types). One of experiment, kill-switch, release, operational, or permission
	Type *string `json:"type,omitempty"`
}

// CreateFeatureStrategySchema Create a strategy configuration in a feature
type CreateFeatureStrategySchema struct {
	// Constraints A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/strategy-constraints
	Constraints *[]ConstraintSchema `json:"constraints,omitempty"`

	// Disabled A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs
	Disabled *bool `json:"disabled"`

	// Name The name of the strategy type
	Name string `json:"name"`

	// Parameters A list of parameters for a strategy
	Parameters *ParametersSchema `json:"parameters,omitempty"`

	// Segments Ids of segments to use for this strategy
	Segments *[]float32 `json:"segments,omitempty"`

	// SortOrder The order of the strategy in the list
	SortOrder *float32 `json:"sortOrder,omitempty"`

	// Title A descriptive title for the strategy
	Title *string `json:"title"`

	// Variants Strategy level variants
	Variants *[]CreateStrategyVariantSchema `json:"variants,omitempty"`
}

// CreateInvitedUserSchema Data used to create a user that has been invited to Unleash.
type CreateInvitedUserSchema struct {
	// Email The invited user's email address
	Email string `json:"email"`

	// Name The user's name
	Name string `json:"name"`

	// Password The user's password
	Password string `json:"password"`

	// Username The user's username. Must be unique if provided.
	Username *string `json:"username,omitempty"`
}

// CreateStrategySchema The data required to create a strategy type. Refer to the docs on [custom strategy types](https://docs.getunleash.io/reference/custom-activation-strategies) for more information.
type CreateStrategySchema struct {
	// Deprecated Whether the strategy type is deprecated or not. Defaults to `false`.
	Deprecated *bool `json:"deprecated,omitempty"`

	// Description A description of the strategy type.
	Description *string `json:"description,omitempty"`

	// Editable Whether the strategy type is editable or not. Defaults to `true`.
	Editable *bool `json:"editable,omitempty"`

	// Name The name of the strategy type. Must be unique.
	Name string `json:"name"`

	// Parameters The parameter list lets you pass arguments to your custom activation strategy. These will be made available to your custom strategy implementation.
	Parameters []struct {
		// Description A description of this strategy parameter. Use this to indicate to the users what the parameter does.
		Description *string `json:"description,omitempty"`

		// Name The name of the parameter
		Name string `json:"name"`

		// Required Whether this parameter must be configured when using the strategy. Defaults to `false`
		Required *bool `json:"required,omitempty"`

		// Type The [type of the parameter](https://docs.getunleash.io/reference/custom-activation-strategies#parameter-types)
		Type CreateStrategySchemaParametersType `json:"type"`
	} `json:"parameters"`

	// Title The title of the strategy
	Title *string `json:"title,omitempty"`
}

// CreateStrategySchemaParametersType The [type of the parameter](https://docs.getunleash.io/reference/custom-activation-strategies#parameter-types)
type CreateStrategySchemaParametersType string

// CreateStrategyVariantSchema This is an experimental property. It may change or be removed as we work on it. Please don't depend on it yet. A strategy variant allows you to attach any data to strategies instead of only returning `true`/`false`. Strategy variants take precedence over feature variants.
type CreateStrategyVariantSchema struct {
	// Name The variant name. Must be unique for this feature toggle
	Name string `json:"name"`

	// Payload Extra data configured for this variant
	Payload *struct {
		// Type The type of the value. Commonly used types are string, number, json and csv.
		Type CreateStrategyVariantSchemaPayloadType `json:"type"`

		// Value The actual value of payload
		Value string `json:"value"`
	} `json:"payload,omitempty"`

	// Stickiness The [stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) to use for distribution of this variant. Stickiness is how Unleash guarantees that the same user gets the same variant every time
	Stickiness string `json:"stickiness"`

	// Weight The weight is the likelihood of any one user getting this variant. It is an integer between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information
	Weight int `json:"weight"`

	// WeightType Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
	WeightType CreateStrategyVariantSchemaWeightType `json:"weightType"`
}

// CreateStrategyVariantSchemaPayloadType The type of the value. Commonly used types are string, number, json and csv.
type CreateStrategyVariantSchemaPayloadType string

// CreateStrategyVariantSchemaWeightType Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
type CreateStrategyVariantSchemaWeightType string

// CreateUserResponseSchema An Unleash user after creation
type CreateUserResponseSchema struct {
	// AccountType A user is either an actual User or a Service Account
	AccountType *string `json:"accountType,omitempty"`

	// CreatedAt The user was created at this time
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// EmailSent Is the welcome email sent to the user or not
	EmailSent *bool `json:"emailSent,omitempty"`

	// Id The user id
	Id int `json:"id"`

	// ImageUrl URL used for the userprofile image
	ImageUrl *string `json:"imageUrl,omitempty"`

	// InviteLink If the user is actively inviting other users, this is the link that can be shared with other users
	InviteLink *string `json:"inviteLink,omitempty"`

	// IsAPI (Deprecated): Used internally to know which operations the user should be allowed to perform
	// Deprecated:
	IsAPI *bool `json:"isAPI,omitempty"`

	// LoginAttempts How many unsuccessful attempts at logging in has the user made
	LoginAttempts *int `json:"loginAttempts,omitempty"`

	// Name Name of the user
	Name *string `json:"name"`

	// Permissions Deprecated
	Permissions *[]string `json:"permissions,omitempty"`

	// RootRole Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role.
	RootRole *CreateUserResponseSchema_RootRole `json:"rootRole,omitempty"`

	// SeenAt The last time this user logged in
	SeenAt *time.Time `json:"seenAt"`

	// Username A unique username for the user
	Username *string `json:"username"`
}

// CreateUserResponseSchemaRootRole0 defines model for .
type CreateUserResponseSchemaRootRole0 = int

// CreateUserResponseSchemaRootRole1 defines model for CreateUserResponseSchema.RootRole.1.
type CreateUserResponseSchemaRootRole1 string

// CreateUserResponseSchema_RootRole Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned. Usually a numeric role ID, but can be a string when returning newly created user with an explicit string role.
type CreateUserResponseSchema_RootRole struct {
	union json.RawMessage
}

// CreateUserSchema The payload must contain at least one of the name and email properties, though which one is up to you. For the user to be able to log in to the system, the user must have an email.
type CreateUserSchema struct {
	// Email The user's email address. Must be provided if username is not provided.
	Email *string `json:"email,omitempty"`

	// Name The user's name (not the user's username).
	Name *string `json:"name,omitempty"`

	// Password Password for the user
	Password *string `json:"password,omitempty"`

	// RootRole The role to assign to the user. Can be either the role's ID or its unique name.
	RootRole CreateUserSchema_RootRole `json:"rootRole"`

	// SendEmail Whether to send a welcome email with a login link to the user or not. Defaults to `true`.
	SendEmail *bool `json:"sendEmail,omitempty"`

	// Username The user's username. Must be provided if email is not provided.
	Username *string `json:"username,omitempty"`
}

// CreateUserSchemaRootRole0 defines model for .
type CreateUserSchemaRootRole0 = int

// CreateUserSchemaRootRole1 defines model for CreateUserSchema.RootRole.1.
type CreateUserSchemaRootRole1 string

// CreateUserSchema_RootRole The role to assign to the user. Can be either the role's ID or its unique name.
type CreateUserSchema_RootRole struct {
	union json.RawMessage
}

// DateSchema A representation of a date. Either as a date-time string or as a UNIX timestamp.
type DateSchema struct {
	union json.RawMessage
}

// DateSchema0 An [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339.html)-compliant timestamp.
type DateSchema0 = time.Time

// DateSchema1 A [UNIX timestamp](https://en.wikipedia.org/wiki/Unix_time).
type DateSchema1 = int

// DependenciesExistSchema `true` when any dependencies exist, `false` when no dependencies exist.
type DependenciesExistSchema = bool

// DependentFeatureSchema Feature dependency on a parent feature in read model
type DependentFeatureSchema struct {
	// Enabled Whether the parent feature should be enabled. When `false` variants are ignored. `true` by default.
	Enabled *bool `json:"enabled,omitempty"`

	// Feature The name of the feature we depend on.
	Feature string `json:"feature"`

	// Variants The list of variants the parent feature should resolve to. Leave empty when you only want to check the `enabled` status.
	Variants *[]string `json:"variants,omitempty"`
}

// DeprecatedProjectOverviewSchema A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc.
type DeprecatedProjectOverviewSchema struct {
	// CreatedAt When the project was created.
	CreatedAt *time.Time `json:"createdAt"`

	// DefaultStickiness A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`

	// Description Additional information about the project
	Description *string `json:"description"`

	// Environments The environments that are enabled for this project
	Environments *[]ProjectEnvironmentSchema `json:"environments,omitempty"`

	// Favorite `true` if the project was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`

	// FeatureLimit A limit on the number of features allowed in the project. Null if no limit.
	FeatureLimit *float32 `json:"featureLimit"`

	// FeatureNaming Create a feature naming pattern
	FeatureNaming *CreateFeatureNamingPatternSchema `json:"featureNaming,omitempty"`

	// Features The full list of features in this project (excluding archived features)
	Features *[]FeatureSchema `json:"features,omitempty"`

	// Health An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100
	Health *float32 `json:"health,omitempty"`

	// Members The number of members this project has
	Members *float32 `json:"members,omitempty"`

	// Mode The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
	Mode *DeprecatedProjectOverviewSchemaMode `json:"mode,omitempty"`

	// Name The name of this project
	Name string `json:"name"`

	// Stats Statistics for a project, including the average time to production, number of features created, the project activity and more.
	//
	// Stats are divided into current and previous **windows**.
	// - The **current window** is the past 30 days.
	// - The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)
	Stats *ProjectStatsSchema `json:"stats,omitempty"`

	// UpdatedAt When the project was last updated.
	UpdatedAt *time.Time `json:"updatedAt"`

	// Version The schema version used to describe the project overview
	Version int `json:"version"`
}

// DeprecatedProjectOverviewSchemaMode The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
type DeprecatedProjectOverviewSchemaMode string

// DoraFeaturesSchema The representation of a dora time to production feature metric
type DoraFeaturesSchema struct {
	// Name The name of a feature toggle
	Name string `json:"name"`

	// TimeToProduction The average number of days it takes a feature toggle to get into production
	TimeToProduction float32 `json:"timeToProduction"`
}

// EdgeTokenSchema A representation of a client token, limiting access to [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens) (used by serverside SDKs) or [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens) (used by proxy SDKs)
type EdgeTokenSchema struct {
	// Projects The list of projects this token has access to. If the token has access to specific projects they will be listed here. If the token has access to all projects it will be represented as [`*`]
	Projects []string `json:"projects"`

	// Token The actual token value. [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys) are comprised of three parts. <project(s)>:<environment>.randomcharacters
	Token string `json:"token"`

	// Type The [API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-tokens)'s **type**. Unleash supports three different types of API tokens ([ADMIN](https://docs.getunleash.io/reference/api-tokens-and-client-keys#admin-tokens), [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens), [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens)). They all have varying access, so when validating a token it's important to know what kind you're dealing with
	Type EdgeTokenSchemaType `json:"type"`
}

// EdgeTokenSchemaType The [API token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#api-tokens)'s **type**. Unleash supports three different types of API tokens ([ADMIN](https://docs.getunleash.io/reference/api-tokens-and-client-keys#admin-tokens), [CLIENT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#client-tokens), [FRONTEND](https://docs.getunleash.io/reference/api-tokens-and-client-keys#front-end-tokens)). They all have varying access, so when validating a token it's important to know what kind you're dealing with
type EdgeTokenSchemaType string

// EmailSchema Represents the email of a user. Used to send email communication (reset password, welcome mail etc)
type EmailSchema struct {
	// Email The email address
	Email string `json:"email"`
}

// EnvironmentProjectSchema Describes a project's configuration in a given environment.
type EnvironmentProjectSchema struct {
	// DefaultStrategy Create a strategy configuration in a feature
	DefaultStrategy *CreateFeatureStrategySchema `json:"defaultStrategy,omitempty"`

	// Enabled `true` if the environment is enabled for the project, otherwise `false`
	Enabled bool `json:"enabled"`

	// Name The name of the environment
	Name string `json:"name"`

	// ProjectApiTokenCount The number of client and front-end API tokens that have access to this project
	ProjectApiTokenCount *int `json:"projectApiTokenCount,omitempty"`

	// ProjectEnabledToggleCount The number of features enabled in this environment for this project
	ProjectEnabledToggleCount *int `json:"projectEnabledToggleCount,omitempty"`

	// Protected `true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted.
	Protected bool `json:"protected"`

	// SortOrder Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear
	SortOrder int `json:"sortOrder"`

	// Type The [type of environment](https://docs.getunleash.io/reference/environments#environment-types).
	Type string `json:"type"`
}

// EnvironmentSchema A definition of the project environment
type EnvironmentSchema struct {
	// ApiTokenCount The number of API tokens for the project environment
	ApiTokenCount *int `json:"apiTokenCount"`

	// Enabled `true` if the environment is enabled for the project, otherwise `false`.
	Enabled bool `json:"enabled"`

	// EnabledToggleCount The number of enabled toggles for the project environment
	EnabledToggleCount *int `json:"enabledToggleCount"`

	// Name The name of the environment
	Name string `json:"name"`

	// ProjectCount The number of projects with this environment
	ProjectCount *int `json:"projectCount"`

	// Protected `true` if the environment is protected, otherwise `false`. A *protected* environment can not be deleted.
	Protected bool `json:"protected"`

	// SortOrder Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear. Needs to be an integer
	SortOrder int `json:"sortOrder"`

	// Type The [type of environment](https://docs.getunleash.io/reference/environments#environment-types).
	Type string `json:"type"`
}

// EnvironmentsProjectSchema Environments defined for a given project
type EnvironmentsProjectSchema struct {
	// Environments List of environments
	Environments []EnvironmentProjectSchema `json:"environments"`

	// Version Version of the environments schema
	Version int `json:"version"`
}

// EnvironmentsSchema A versioned list of environments
type EnvironmentsSchema struct {
	// Environments List of environments
	Environments []EnvironmentSchema `json:"environments"`

	// Version Version of the environments schema
	Version int `json:"version"`
}

// EventSchema An event describing something happening in the system
type EventSchema struct {
	// CreatedAt The time the event happened as a RFC 3339-conformant timestamp.
	CreatedAt time.Time `json:"createdAt"`

	// CreatedBy Which user created this event
	CreatedBy string `json:"createdBy"`

	// CreatedByUserId The is of the user that created this event
	CreatedByUserId *float32 `json:"createdByUserId"`

	// Data Extra associated data related to the event, such as feature toggle state, segment configuration, etc., if applicable.
	Data *map[string]interface{} `json:"data"`

	// Environment The feature toggle environment the event relates to, if applicable.
	Environment *string `json:"environment"`

	// FeatureName The name of the feature toggle the event relates to, if applicable.
	FeatureName *string `json:"featureName"`

	// Id The ID of the event. An increasing natural number.
	Id int `json:"id"`

	// PreData Data relating to the previous state of the event's subject.
	PreData *map[string]interface{} `json:"preData"`

	// Project The project the event relates to, if applicable.
	Project *string `json:"project"`

	// Tags Any tags related to the event, if applicable.
	Tags *[]TagSchema `json:"tags"`

	// Type What [type](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#event-type-description) of event this is
	Type EventSchemaType `json:"type"`
}

// EventSchemaType What [type](https://docs.getunleash.io/reference/api/legacy/unleash/admin/events#event-type-description) of event this is
type EventSchemaType string

// EventsSchema A list of events that has happened in the system
type EventsSchema struct {
	// Events The list of events
	Events []EventSchema `json:"events"`

	// TotalEvents The total count of events
	TotalEvents *int `json:"totalEvents,omitempty"`

	// Version The api version of this response. A natural increasing number. Only increases if format changes
	Version EventsSchemaVersion `json:"version"`
}

// EventsSchemaVersion The api version of this response. A natural increasing number. Only increases if format changes
type EventsSchemaVersion int

// ExportQuerySchema Available query parameters for  the [deprecated export/import](https://docs.getunleash.io/reference/deploy/import-export) functionality.
type ExportQuerySchema struct {
	union json.RawMessage
}

// ExportQuerySchema0 defines model for .
type ExportQuerySchema0 struct {
	// DownloadFile Whether to return a downloadable file
	DownloadFile *bool `json:"downloadFile,omitempty"`

	// Environment The environment to export from
	Environment string `json:"environment"`

	// Features Selects features to export by name. If the list is empty all features are returned.
	Features []string `json:"features"`
}

// ExportQuerySchema1 defines model for .
type ExportQuerySchema1 struct {
	// DownloadFile Whether to return a downloadable file
	DownloadFile *bool `json:"downloadFile,omitempty"`

	// Environment The environment to export from
	Environment string `json:"environment"`

	// Tag Selects features to export by tag.
	Tag string `json:"tag"`
}

// ExportQuerySchema2 defines model for .
type ExportQuerySchema2 struct {
	// DownloadFile Whether to return a downloadable file
	DownloadFile *bool `json:"downloadFile,omitempty"`

	// Environment The environment to export from
	Environment string `json:"environment"`

	// Project Selects project to export the features from. Used when no tags or features are provided.
	Project string `json:"project"`
}

// ExportResultSchema The result of the export operation, providing you with the feature toggle definitions, strategy definitions and the rest of the elements relevant to the features (tags, environments etc.)
type ExportResultSchema struct {
	// ContextFields A list of all the context fields that are in use by any of the strategies in the `featureStrategies` list.
	ContextFields *[]ContextFieldSchema `json:"contextFields,omitempty"`

	// Dependencies A list of all the dependencies for features in `features` list.
	Dependencies *[]FeatureDependenciesSchema `json:"dependencies,omitempty"`

	// FeatureEnvironments Environment-specific configuration for all the features in the `features` list. Includes data such as whether the feature is enabled in the selected export environment, whether there are any variants assigned, etc.
	FeatureEnvironments *[]FeatureEnvironmentSchema `json:"featureEnvironments,omitempty"`

	// FeatureStrategies All strategy instances that are used by the exported features in the `features` list.
	FeatureStrategies []FeatureStrategySchema `json:"featureStrategies"`

	// FeatureTags A list of all the tags that have been applied to any of the features in the `features` list.
	FeatureTags *[]FeatureTagSchema `json:"featureTags,omitempty"`

	// Features All the exported features.
	Features []FeatureSchema `json:"features"`

	// Segments A list of all the segments that are used by the strategies in the `featureStrategies` list.
	Segments *[]struct {
		Id   float32 `json:"id"`
		Name string  `json:"name"`
	} `json:"segments,omitempty"`

	// TagTypes A list of all of the tag types that are used in the `featureTags` list.
	TagTypes []TagTypeSchema `json:"tagTypes"`
}

// FeatureDependenciesSchema Feature dependency connection between a child feature and its dependencies
type FeatureDependenciesSchema struct {
	// Dependencies List of parent features for the child feature
	Dependencies []DependentFeatureSchema `json:"dependencies"`

	// Feature The name of the child feature.
	Feature string `json:"feature"`
}

// FeatureEnvironmentMetricsSchema How many times `feautreName` was evaluated to `true` (yes) and `false` (no) for `appName` in `environmnet`
type FeatureEnvironmentMetricsSchema struct {
	// AppName The name of the application the SDK is being used in
	AppName *string `json:"appName,omitempty"`

	// Environment Which environment the SDK is being used in
	Environment string `json:"environment"`

	// FeatureName The name of the feature
	FeatureName *string `json:"featureName,omitempty"`

	// No How many times the toggle evaluated to false
	No int `json:"no"`

	// Timestamp A representation of a date. Either as a date-time string or as a UNIX timestamp.
	Timestamp DateSchema `json:"timestamp"`

	// Variants How many times each variant was returned
	Variants *map[string]int `json:"variants,omitempty"`

	// Yes How many times the toggle evaluated to true
	Yes int `json:"yes"`
}

// FeatureEnvironmentSchema A detailed description of the feature environment
type FeatureEnvironmentSchema struct {
	// Enabled `true` if the feature is enabled for the environment, otherwise `false`.
	Enabled bool `json:"enabled"`

	// Environment The name of the environment
	Environment *string `json:"environment,omitempty"`

	// FeatureName The name of the feature
	FeatureName *string `json:"featureName,omitempty"`

	// HasEnabledStrategies Whether the feature has any enabled strategies defined.
	HasEnabledStrategies *bool `json:"hasEnabledStrategies,omitempty"`

	// HasStrategies Whether the feature has any strategies defined.
	HasStrategies *bool `json:"hasStrategies,omitempty"`

	// LastSeenAt The date when metrics where last collected for the feature environment
	LastSeenAt *time.Time `json:"lastSeenAt"`

	// Name The name of the environment
	Name string `json:"name"`

	// SortOrder The sort order of the feature environment in the feature environments list
	SortOrder *float32 `json:"sortOrder,omitempty"`

	// Strategies A list of activation strategies for the feature environment
	Strategies *[]FeatureStrategySchema `json:"strategies,omitempty"`

	// Type The type of the environment
	Type *string `json:"type,omitempty"`

	// VariantCount The number of defined variants
	VariantCount *float32 `json:"variantCount,omitempty"`

	// Variants A list of variants for the feature environment
	Variants *[]VariantSchema `json:"variants,omitempty"`
}

// FeatureEventsSchema One or more events happening to a specific feature toggle
type FeatureEventsSchema struct {
	// Events The list of events
	Events []EventSchema `json:"events"`

	// ToggleName The name of the feature toggle these events relate to
	ToggleName *string `json:"toggleName,omitempty"`

	// TotalEvents How many events are there for this feature toggle
	TotalEvents *int `json:"totalEvents,omitempty"`

	// Version An API versioning number
	Version *FeatureEventsSchemaVersion `json:"version,omitempty"`
}

// FeatureEventsSchemaVersion An API versioning number
type FeatureEventsSchemaVersion int

// FeatureMetricsSchema A batch of feature metrics
type FeatureMetricsSchema struct {
	// Data Metrics gathered per environment
	Data []FeatureEnvironmentMetricsSchema `json:"data"`

	// Maturity The maturity level of this API (alpha, beta, stable, deprecated)
	Maturity string `json:"maturity"`

	// Version The version of this schema
	Version int `json:"version"`
}

// FeatureSchema A feature toggle definition
type FeatureSchema struct {
	// Archived `true` if the feature is archived
	Archived *bool `json:"archived,omitempty"`

	// ArchivedAt The date the feature was archived
	ArchivedAt *time.Time `json:"archivedAt"`

	// Children The list of child feature names. This is an experimental field and may change.
	Children *[]string `json:"children,omitempty"`

	// CreatedAt The date the feature was created
	CreatedAt *time.Time `json:"createdAt"`

	// Dependencies The list of parent dependencies. This is an experimental field and may change.
	Dependencies *[]struct {
		// Enabled Whether the parent feature is enabled or not
		Enabled *bool `json:"enabled,omitempty"`

		// Feature The name of the parent feature
		Feature string `json:"feature"`

		// Variants The list of variants the parent feature should resolve to. Only valid when feature is enabled.
		Variants *[]string `json:"variants,omitempty"`
	} `json:"dependencies,omitempty"`

	// Description Detailed description of the feature
	Description *string `json:"description"`

	// Enabled `true` if the feature is enabled, otherwise `false`.
	Enabled *bool `json:"enabled,omitempty"`

	// Environments The list of environments where the feature can be used
	Environments *[]FeatureEnvironmentSchema `json:"environments,omitempty"`

	// Favorite `true` if the feature was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`

	// ImpressionData `true` if the impression data collection is enabled for the feature, otherwise `false`.
	ImpressionData *bool `json:"impressionData,omitempty"`

	// LastSeenAt The date when metrics where last collected for the feature. This field is deprecated, use the one in featureEnvironmentSchema
	// Deprecated:
	LastSeenAt *time.Time `json:"lastSeenAt"`

	// Name Unique feature name
	Name string `json:"name"`

	// Project Name of the project the feature belongs to
	Project *string `json:"project,omitempty"`

	// Stale `true` if the feature is stale based on the age and feature type, otherwise `false`.
	Stale *bool `json:"stale,omitempty"`

	// Strategies This is a legacy field that will be deprecated
	// Deprecated:
	Strategies *[]map[string]interface{} `json:"strategies,omitempty"`

	// Tags The list of feature tags
	Tags *[]TagSchema `json:"tags"`

	// Type Type of the toggle e.g. experiment, kill-switch, release, operational, permission
	Type *string `json:"type,omitempty"`

	// Variants The list of feature variants
	// Deprecated:
	Variants *[]VariantSchema `json:"variants,omitempty"`
}

// FeatureSearchResponseSchema A feature toggle definition
type FeatureSearchResponseSchema struct {
	// Archived `true` if the feature is archived
	Archived *bool `json:"archived,omitempty"`

	// ArchivedAt The date the feature was archived
	ArchivedAt *time.Time `json:"archivedAt"`

	// Children The list of child feature names. This is an experimental field and may change.
	Children *[]string `json:"children,omitempty"`

	// CreatedAt The date the feature was created
	CreatedAt *time.Time `json:"createdAt"`

	// Dependencies The list of parent dependencies. This is an experimental field and may change.
	Dependencies *[]struct {
		// Enabled Whether the parent feature is enabled or not
		Enabled *bool `json:"enabled,omitempty"`

		// Feature The name of the parent feature
		Feature string `json:"feature"`

		// Variants The list of variants the parent feature should resolve to. Only valid when feature is enabled.
		Variants *[]string `json:"variants,omitempty"`
	} `json:"dependencies,omitempty"`

	// Description Detailed description of the feature
	Description *string `json:"description"`

	// Enabled `true` if the feature is enabled, otherwise `false`.
	Enabled *bool `json:"enabled,omitempty"`

	// Environments The list of environments where the feature can be used
	Environments *[]FeatureEnvironmentSchema `json:"environments,omitempty"`

	// Favorite `true` if the feature was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`

	// ImpressionData `true` if the impression data collection is enabled for the feature, otherwise `false`.
	ImpressionData *bool `json:"impressionData,omitempty"`

	// LastSeenAt The date when metrics where last collected for the feature. This field is deprecated, use the one in featureEnvironmentSchema
	// Deprecated:
	LastSeenAt *time.Time `json:"lastSeenAt"`

	// Name Unique feature name
	Name string `json:"name"`

	// Project Name of the project the feature belongs to
	Project *string `json:"project,omitempty"`

	// Segments The list of segments the feature is enabled for.
	Segments *[]string `json:"segments,omitempty"`

	// Stale `true` if the feature is stale based on the age and feature type, otherwise `false`.
	Stale *bool `json:"stale,omitempty"`

	// Strategies This is a legacy field that will be deprecated
	// Deprecated:
	Strategies *[]map[string]interface{} `json:"strategies,omitempty"`

	// Tags The list of feature tags
	Tags *[]TagSchema `json:"tags"`

	// Type Type of the toggle e.g. experiment, kill-switch, release, operational, permission
	Type *string `json:"type,omitempty"`

	// Variants The list of feature variants
	// Deprecated:
	Variants *[]VariantSchema `json:"variants,omitempty"`
}

// FeatureStrategiesSchema A list of strategies
type FeatureStrategiesSchema = []FeatureStrategySchema

// FeatureStrategySchema A single activation strategy configuration schema for a feature
type FeatureStrategySchema struct {
	// Constraints A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/strategy-constraints
	Constraints *[]ConstraintSchema `json:"constraints,omitempty"`

	// Disabled A toggle to disable the strategy. defaults to false. Disabled strategies are not evaluated or returned to the SDKs
	Disabled *bool `json:"disabled"`

	// FeatureName The name or feature the strategy is attached to
	FeatureName *string `json:"featureName,omitempty"`

	// Id A uuid for the feature strategy
	Id *string `json:"id,omitempty"`

	// Name The name or type of strategy
	Name string `json:"name"`

	// Parameters A list of parameters for a strategy
	Parameters *ParametersSchema `json:"parameters,omitempty"`

	// Segments A list of segment ids attached to the strategy
	Segments *[]float32 `json:"segments,omitempty"`

	// SortOrder The order of the strategy in the list
	SortOrder *float32 `json:"sortOrder,omitempty"`

	// Title A descriptive title for the strategy
	Title *string `json:"title"`

	// Variants Strategy level variants
	Variants *[]StrategyVariantSchema `json:"variants,omitempty"`
}

// FeatureStrategySegmentSchema An object containing a segment identifier and a strategy identifier.
type FeatureStrategySegmentSchema struct {
	// FeatureStrategyId The ID of the strategy
	FeatureStrategyId string `json:"featureStrategyId"`

	// SegmentId The ID of the segment
	SegmentId int `json:"segmentId"`
}

// FeatureTagSchema Describes a tag applied to a feature
type FeatureTagSchema struct {
	// CreatedByUserId The id of the user who created this tag
	CreatedByUserId *float32 `json:"createdByUserId"`

	// FeatureName The name of the feature this tag is applied to
	FeatureName string `json:"featureName"`

	// TagType The [type](https://docs.getunleash.io/reference/tags#tag-types tag types) of the tag
	TagType *string `json:"tagType,omitempty"`

	// TagValue The value of the tag
	TagValue string `json:"tagValue"`

	// Type The [type](https://docs.getunleash.io/reference/tags#tag-types tag types) of the tag. This property is deprecated and will be removed in a future version of Unleash. Superseded by the `tagType` property.
	// Deprecated:
	Type *string `json:"type,omitempty"`

	// Value The value of the tag. This property is deprecated and will be removed in a future version of Unleash. Superseded by the `tagValue` property.
	// Deprecated:
	Value *string `json:"value,omitempty"`
}

// FeatureTypeCountSchema A count of feature flags of a specific type
type FeatureTypeCountSchema struct {
	// Count Number of feature flags of this type
	Count float32 `json:"count"`

	// Type Type of the flag e.g. experiment, kill-switch, release, operational, permission
	Type string `json:"type"`
}

// FeatureTypeSchema A [feature toggle type](https://docs.getunleash.io/reference/feature-toggle-types).
type FeatureTypeSchema struct {
	// Description A description of what this feature toggle type is intended to be used for.
	Description string `json:"description"`

	// Id The identifier of this feature toggle type.
	Id string `json:"id"`

	// LifetimeDays How many days it takes before a feature toggle of this typed is flagged as [potentially stale](https://docs.getunleash.io/reference/technical-debt#stale-and-potentially-stale-toggles) by Unleash. If this value is `null`, Unleash will never mark it as potentially stale.
	LifetimeDays *int `json:"lifetimeDays"`

	// Name The display name of this feature toggle type.
	Name string `json:"name"`
}

// FeatureTypesSchema A list of [feature toggle types](https://docs.getunleash.io/reference/feature-toggle-types) and the schema version used to represent those feature types.
type FeatureTypesSchema struct {
	// Types The list of feature toggle types.
	Types []FeatureTypeSchema `json:"types"`

	// Version The schema version used to describe the feature toggle types listed in the `types` property.
	Version FeatureTypesSchemaVersion `json:"version"`
}

// FeatureTypesSchemaVersion The schema version used to describe the feature toggle types listed in the `types` property.
type FeatureTypesSchemaVersion int

// FeatureUsageSchema How many applications have seen this feature toggle, as well as how this feature was evaluated the last hour
type FeatureUsageSchema struct {
	// FeatureName The name of the feature
	FeatureName string `json:"featureName"`

	// LastHourUsage Last hour statistics. Accumulated per feature per environment. Contains counts for evaluations to true (yes) and to false (no)
	LastHourUsage []FeatureEnvironmentMetricsSchema `json:"lastHourUsage"`

	// Maturity The maturity level of this API (alpha, beta, stable, deprecated)
	Maturity string `json:"maturity"`

	// SeenApplications A list of applications seen using this feature
	SeenApplications []string `json:"seenApplications"`

	// Version The version of this schema
	Version int `json:"version"`
}

// FeatureVariantsSchema A versioned collection of feature toggle variants.
type FeatureVariantsSchema struct {
	// Variants All variants defined for a specific feature toggle.
	Variants []VariantSchema `json:"variants"`

	// Version The version of the feature variants schema.
	Version int `json:"version"`
}

// FeaturesSchema A list of features
type FeaturesSchema struct {
	// Features A list of features
	Features []FeatureSchema `json:"features"`

	// Version The version of the feature's schema
	Version int `json:"version"`
}

// FeedbackCreateSchema User feedback information to be created.
type FeedbackCreateSchema struct {
	// FeedbackId The name of the feedback session
	FeedbackId string `json:"feedbackId"`

	// NeverShow `true` if the user has asked never to see this feedback questionnaire again. Defaults to `false`.
	NeverShow *bool `json:"neverShow,omitempty"`
}

// FeedbackResponseSchema User feedback information about a particular feedback item.
type FeedbackResponseSchema struct {
	// FeedbackId The name of the feedback session
	FeedbackId *string `json:"feedbackId,omitempty"`

	// Given When this feedback was given
	Given *time.Time `json:"given"`

	// NeverShow `true` if the user has asked never to see this feedback questionnaire again.
	NeverShow *bool `json:"neverShow,omitempty"`

	// UserId The ID of the user that gave the feedback.
	UserId *int `json:"userId,omitempty"`
}

// FeedbackUpdateSchema User feedback information to be updated.
type FeedbackUpdateSchema struct {
	// Given When this feedback was given
	Given *time.Time `json:"given"`

	// NeverShow `true` if the user has asked never to see this feedback questionnaire again.
	NeverShow *bool `json:"neverShow,omitempty"`

	// UserId The ID of the user that gave the feedback.
	UserId *int `json:"userId,omitempty"`
}

// GroupSchema A detailed information about a user group
type GroupSchema struct {
	// CreatedAt When was this group created
	CreatedAt *time.Time `json:"createdAt"`

	// CreatedBy A user who created this group
	CreatedBy *string `json:"createdBy"`

	// Description A custom description of the group
	Description *string `json:"description"`

	// Id The group id
	Id *int `json:"id,omitempty"`

	// MappingsSSO A list of SSO groups that should map to this Unleash group
	MappingsSSO *[]string `json:"mappingsSSO,omitempty"`

	// Name The name of the group
	Name string `json:"name"`

	// Projects A list of projects where this group is used
	Projects *[]string `json:"projects,omitempty"`

	// RootRole A role id that is used as the root role for all users in this group. This can be either the id of the Viewer, Editor or Admin role.
	RootRole *float32 `json:"rootRole"`

	// UserCount The number of users that belong to this group
	UserCount *int `json:"userCount,omitempty"`

	// Users A list of users belonging to this group
	Users *[]GroupUserModelSchema `json:"users,omitempty"`
}

// GroupUserModelSchema Details for a single user belonging to a group
type GroupUserModelSchema struct {
	// CreatedBy The username of the user who added this user to this group
	CreatedBy *string `json:"createdBy"`

	// JoinedAt The date when the user joined the group
	JoinedAt *time.Time `json:"joinedAt,omitempty"`

	// User An Unleash user
	User UserSchema `json:"user"`
}

// HealthCheckSchema Used by service orchestrators to decide whether this Unleash instance should be marked as healthy or unhealthy
type HealthCheckSchema struct {
	// Health The state this Unleash instance is in. GOOD if everything is ok, BAD if the instance should be restarted
	Health HealthCheckSchemaHealth `json:"health"`
}

// HealthCheckSchemaHealth The state this Unleash instance is in. GOOD if everything is ok, BAD if the instance should be restarted
type HealthCheckSchemaHealth string

// HealthReportSchema A report of the current health of the requested project, with datapoints like counters of currently active, stale, and potentially stale feature toggles.
type HealthReportSchema struct {
	// ActiveCount The number of active feature toggles.
	ActiveCount float32 `json:"activeCount"`

	// CreatedAt When the project was last updated.
	CreatedAt *time.Time `json:"createdAt"`

	// DefaultStickiness A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness string `json:"defaultStickiness"`

	// Description The project's description
	Description *string `json:"description"`

	// Environments An array containing the names of all the environments configured for the project.
	Environments []ProjectEnvironmentSchema `json:"environments"`

	// Favorite Indicates if the project has been marked as a favorite by the current user requesting the project health overview.
	Favorite *bool `json:"favorite,omitempty"`

	// FeatureLimit A limit on the number of features allowed in the project. Null if no limit.
	FeatureLimit *float32 `json:"featureLimit"`

	// FeatureNaming Create a feature naming pattern
	FeatureNaming *CreateFeatureNamingPatternSchema `json:"featureNaming,omitempty"`

	// Features An array containing an overview of all the features of the project and their individual status
	Features []FeatureSchema `json:"features"`

	// Health The overall [health rating](https://docs.getunleash.io/reference/technical-debt#health-rating) of the project.
	Health int `json:"health"`

	// Members The number of users/members in the project.
	Members int `json:"members"`

	// Mode The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
	Mode HealthReportSchemaMode `json:"mode"`

	// Name The project's name
	Name string `json:"name"`

	// PotentiallyStaleCount The number of potentially stale feature toggles.
	PotentiallyStaleCount float32 `json:"potentiallyStaleCount"`

	// StaleCount The number of stale feature toggles.
	StaleCount float32 `json:"staleCount"`

	// Stats Statistics for a project, including the average time to production, number of features created, the project activity and more.
	//
	// Stats are divided into current and previous **windows**.
	// - The **current window** is the past 30 days.
	// - The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)
	Stats *ProjectStatsSchema `json:"stats,omitempty"`

	// UpdatedAt When the project was last updated.
	UpdatedAt *time.Time `json:"updatedAt"`

	// Version The project overview version.
	Version int `json:"version"`
}

// HealthReportSchemaMode The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
type HealthReportSchemaMode string

// IdSchema Email id used for password reset
type IdSchema struct {
	// Id User email
	Id string `json:"id"`
}

// ImportTogglesSchema The result of the export operation for a project and environment, used at import
type ImportTogglesSchema struct {
	// Data The result of the export operation, providing you with the feature toggle definitions, strategy definitions and the rest of the elements relevant to the features (tags, environments etc.)
	Data ExportResultSchema `json:"data"`

	// Environment The exported [environment](https://docs.getunleash.io/reference/environments)
	Environment string `json:"environment"`

	// Project The exported [project](https://docs.getunleash.io/reference/projects)
	Project string `json:"project"`
}

// ImportTogglesValidateItemSchema A description of an error or warning pertaining to a feature toggle import job.
type ImportTogglesValidateItemSchema struct {
	// AffectedItems The items affected by this error message
	AffectedItems []string `json:"affectedItems"`

	// Message The validation error message
	Message string `json:"message"`
}

// ImportTogglesValidateSchema An object containing [feature import](https://docs.getunleash.io/reference/deploy/environment-import-export) validation results.
type ImportTogglesValidateSchema struct {
	// Errors A list of errors that prevent the provided data from being successfully imported.
	Errors []ImportTogglesValidateItemSchema `json:"errors"`

	// Permissions Any additional permissions required to import the data. If the list is empty, you require no additional permissions beyond what your user already has.
	Permissions *[]ImportTogglesValidateItemSchema `json:"permissions,omitempty"`

	// Warnings A list of warnings related to the provided data.
	Warnings []ImportTogglesValidateItemSchema `json:"warnings"`
}

// InstanceAdminStatsSchema Information about an instance and statistics about usage of various features of Unleash
type InstanceAdminStatsSchema struct {
	// OIDCenabled Whether or not OIDC authentication is enabled for this instance
	OIDCenabled *bool `json:"OIDCenabled,omitempty"`

	// SAMLenabled Whether or not SAML authentication is enabled for this instance
	SAMLenabled *bool `json:"SAMLenabled,omitempty"`

	// ActiveUsers The number of active users in the last 7, 30 and 90 days
	ActiveUsers *struct {
		// Last30 The number of active users in the last 30 days
		Last30 *float32 `json:"last30,omitempty"`

		// Last60 The number of active users in the last 60 days
		Last60 *float32 `json:"last60,omitempty"`

		// Last7 The number of active users in the last 7 days
		Last7 *float32 `json:"last7,omitempty"`

		// Last90 The number of active users in the last 90 days
		Last90 *float32 `json:"last90,omitempty"`
	} `json:"activeUsers,omitempty"`

	// ClientApps A count of connected applications in the last week, last month and all time since last restart
	ClientApps *[]struct {
		// Count The number of client applications that have been observed in this period
		Count *float32 `json:"count,omitempty"`

		// Range A description of a time range
		Range *InstanceAdminStatsSchemaClientAppsRange `json:"range,omitempty"`
	} `json:"clientApps,omitempty"`

	// ContextFields The number of context fields defined in this instance.
	ContextFields *float32 `json:"contextFields,omitempty"`

	// Environments The number of environments defined in this instance
	Environments *float32 `json:"environments,omitempty"`

	// FeatureExports The number of export operations on this instance
	FeatureExports *float32 `json:"featureExports,omitempty"`

	// FeatureImports The number of import operations on this instance
	FeatureImports *float32 `json:"featureImports,omitempty"`

	// FeatureToggles The number of feature-toggles this instance has
	FeatureToggles *float32 `json:"featureToggles,omitempty"`

	// Groups The number of groups defined in this instance
	Groups *float32 `json:"groups,omitempty"`

	// InstanceId A unique identifier for this instance. Generated by the database migration scripts at first run. Typically a UUID.
	InstanceId string `json:"instanceId"`

	// ProductionChanges The number of changes to the production environment in the last 30, 60 and 90 days
	ProductionChanges *struct {
		// Last30 The number of changes in production in the last 30 days
		Last30 *float32 `json:"last30,omitempty"`

		// Last60 The number of changes in production in the last 60 days
		Last60 *float32 `json:"last60,omitempty"`

		// Last90 The number of changes in production in the last 90 days
		Last90 *float32 `json:"last90,omitempty"`
	} `json:"productionChanges,omitempty"`

	// Projects The number of projects defined in this instance.
	Projects *float32 `json:"projects,omitempty"`

	// Roles The number of roles defined in this instance
	Roles *float32 `json:"roles,omitempty"`

	// Segments The number of segments defined in this instance
	Segments *float32 `json:"segments,omitempty"`

	// Strategies The number of strategies defined in this instance
	Strategies *float32 `json:"strategies,omitempty"`

	// Sum A SHA-256 checksum of the instance statistics to be used to verify that the data in this object has not been tampered with
	Sum *string `json:"sum,omitempty"`

	// Timestamp When these statistics were produced
	Timestamp *time.Time `json:"timestamp"`

	// Users The number of users this instance has
	Users *float32 `json:"users,omitempty"`

	// VersionEnterprise The version of Unleash Enterprise that is bundled in this instance
	VersionEnterprise *string `json:"versionEnterprise,omitempty"`

	// VersionOSS The version of Unleash OSS that is bundled in this instance
	VersionOSS *string `json:"versionOSS,omitempty"`
}

// InstanceAdminStatsSchemaClientAppsRange A description of a time range
type InstanceAdminStatsSchemaClientAppsRange string

// LegalValueSchema Describes a legal value. Typically used to limit possible values for contextFields or strategy properties
type LegalValueSchema struct {
	// Description Describes this specific legal value
	Description *string `json:"description,omitempty"`

	// Value The valid value
	Value string `json:"value"`
}

// LoginSchema A username/password login request
type LoginSchema struct {
	// Password The password of the user trying to log in
	Password string `json:"password"`

	// Username The username trying to log in
	Username string `json:"username"`
}

// MaintenanceSchema The current state of Unleash's maintenance mode feature.
type MaintenanceSchema struct {
	// Enabled Whether maintenance mode is enabled or not.
	Enabled bool `json:"enabled"`
}

// MeSchema Detailed user information
type MeSchema struct {
	// Feedback User feedback information
	Feedback []FeedbackResponseSchema `json:"feedback"`

	// Permissions User permissions for projects and environments
	Permissions []PermissionSchema `json:"permissions"`

	// Splash Splash screen configuration
	Splash map[string]bool `json:"splash"`

	// User An Unleash user
	User UserSchema `json:"user"`
}

// NameSchema An object with a name
type NameSchema struct {
	// Name The name of the represented object.
	Name string `json:"name"`
}

// OverrideSchema An override for deciding which variant should be assigned to a user based on the context name
type OverrideSchema struct {
	// ContextName The name of the context field used to determine overrides
	ContextName string `json:"contextName"`

	// Values Which values that should be overriden
	Values []string `json:"values"`
}

// ParametersSchema A list of parameters for a strategy
type ParametersSchema map[string]string

// ParentFeatureOptionsSchema A list of parent feature names available for a given child feature. Features that have their own parents are excluded.
type ParentFeatureOptionsSchema = []string

// PasswordSchema Fields used to create new password or update old password
type PasswordSchema struct {
	// ConfirmPassword The confirmation of the new password. This field is for the non-admin users changing their own password.
	ConfirmPassword *string `json:"confirmPassword,omitempty"`

	// OldPassword The old password the user is changing. This field is for the non-admin users changing their own password.
	OldPassword *string `json:"oldPassword,omitempty"`

	// Password The new password to change or validate.
	Password string `json:"password"`
}

// PatSchema An overview of a [Personal Access Token](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens).
type PatSchema struct {
	// CreatedAt When the token was created. (This property is set by Unleash when the token is created and cannot be set manually: if you provide a value when creating a PAT, Unleash will ignore it.)
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// ExpiresAt The token's expiration date.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id The unique identification number for this Personal Access Token. (This property is set by Unleash when the token is created and cannot be set manually: if you provide a value when creating a PAT, Unleash will ignore it.)
	Id *int `json:"id,omitempty"`

	// Secret The token used for authentication. (This property is set by Unleash when the token is created and cannot be set manually: if you provide a value when creating a PAT, Unleash will ignore it.)
	Secret *string `json:"secret,omitempty"`

	// SeenAt When the token was last seen/used to authenticate with. `null` if it has not been used yet. (This property is set by Unleash when the token is created and cannot be set manually: if you provide a value when creating a PAT, Unleash will ignore it.)
	SeenAt *time.Time `json:"seenAt"`
}

// PatchSchema A [JSON patch](https://www.rfc-editor.org/rfc/rfc6902) operation description
type PatchSchema struct {
	// From The target to move or copy from, if performing one of those operations
	From *string `json:"from,omitempty"`

	// Op The kind of operation to perform
	Op PatchSchemaOp `json:"op"`

	// Path The path to the property to operate on
	Path string `json:"path"`

	// Value The value to add or replace, if performing one of those operations
	Value *interface{} `json:"value,omitempty"`
}

// PatchSchemaOp The kind of operation to perform
type PatchSchemaOp string

// PatchesSchema A list of patches
type PatchesSchema = []PatchSchema

// PatsSchema Contains a collection of [Personal Access Tokens](https://docs.getunleash.io/how-to/how-to-create-personal-access-tokens).
type PatsSchema struct {
	// Pats A collection of Personal Access Tokens
	Pats *[]PatSchema `json:"pats,omitempty"`
}

// PermissionSchema Project and environment permissions
type PermissionSchema struct {
	// Environment The environment this permission applies to
	Environment *string `json:"environment,omitempty"`

	// Permission [Project](https://docs.getunleash.io/reference/rbac#project-permissions) or [environment](https://docs.getunleash.io/reference/rbac#environment-permissions) permission name
	Permission string `json:"permission"`

	// Project The project this permission applies to
	Project *string `json:"project,omitempty"`
}

// PlaygroundConstraintSchema A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)
type PlaygroundConstraintSchema struct {
	// CaseInsensitive Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`

	// ContextName The name of the context field that this constraint should apply to.
	ContextName string `json:"contextName"`

	// Inverted Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.
	Inverted *bool `json:"inverted,omitempty"`

	// Operator The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).
	Operator PlaygroundConstraintSchemaOperator `json:"operator"`

	// Result Whether this was evaluated as true or false.
	Result bool `json:"result"`

	// Value The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.
	Value *string `json:"value,omitempty"`

	// Values The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.
	Values *[]string `json:"values,omitempty"`
}

// PlaygroundConstraintSchemaOperator The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).
type PlaygroundConstraintSchemaOperator string

// PlaygroundFeatureSchema A simplified feature toggle model intended for the Unleash playground.
type PlaygroundFeatureSchema struct {
	// HasUnsatisfiedDependency Whether the feature has a parent dependency that is not satisfied
	HasUnsatisfiedDependency *bool `json:"hasUnsatisfiedDependency,omitempty"`

	// IsEnabled Whether this feature is enabled or not in the current environment.
	//                           If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),
	//                           this will be `false` to align with how client SDKs treat unresolved feature states.
	IsEnabled bool `json:"isEnabled"`

	// IsEnabledInCurrentEnvironment Whether the feature is active and would be evaluated in the provided environment in a normal SDK context.
	IsEnabledInCurrentEnvironment bool `json:"isEnabledInCurrentEnvironment"`

	// Name The feature's name.
	Name string `json:"name"`

	// ProjectId The ID of the project that contains this feature.
	ProjectId string `json:"projectId"`

	// Strategies The feature's applicable strategies and cumulative results of the strategies
	Strategies struct {
		// Data The strategies that apply to this feature.
		Data []PlaygroundStrategySchema `json:"data"`

		// Result The cumulative results of all the feature's strategies. Can be `true`,
		//                                   `false`, or `unknown`.
		//                                   This property will only be `unknown`
		//                                   if one or more of the strategies can't be fully evaluated and the rest of the strategies
		//                                   all resolve to `false`.
		Result PlaygroundFeatureSchema_Strategies_Result `json:"result"`
	} `json:"strategies"`

	// Variant The feature variant you receive based on the provided context or the _disabled
	//                           variant_. If a feature is disabled or doesn't have any
	//                           variants, you would get the _disabled variant_.
	//                           Otherwise, you'll get one of thefeature's defined variants.
	Variant *struct {
		// Enabled Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`
		Enabled bool `json:"enabled"`

		// Name The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`
		Name string `json:"name"`

		// Payload An optional payload attached to the variant.
		Payload *struct {
			// Type The format of the payload.
			Type string `json:"type"`

			// Value The payload value stringified.
			Value string `json:"value"`
		} `json:"payload,omitempty"`
	} `json:"variant"`

	// Variants The feature variants.
	Variants []VariantSchema `json:"variants"`
}

// PlaygroundFeatureSchemaStrategiesResult0 defines model for .
type PlaygroundFeatureSchemaStrategiesResult0 = bool

// PlaygroundFeatureSchemaStrategiesResult1 defines model for PlaygroundFeatureSchema.Strategies.Result.1.
type PlaygroundFeatureSchemaStrategiesResult1 string

// PlaygroundFeatureSchema_Strategies_Result The cumulative results of all the feature's strategies. Can be `true`,
//
//	`false`, or `unknown`.
//	This property will only be `unknown`
//	if one or more of the strategies can't be fully evaluated and the rest of the strategies
//	all resolve to `false`.
type PlaygroundFeatureSchema_Strategies_Result struct {
	union json.RawMessage
}

// PlaygroundRequestSchema Data for the playground API to evaluate toggles
type PlaygroundRequestSchema struct {
	// Context The Unleash context as modeled in client SDKs
	Context SdkContextSchema `json:"context"`

	// Environment The environment to evaluate toggles in.
	Environment string `json:"environment"`

	// Projects A list of projects to check for toggles in.
	Projects *PlaygroundRequestSchema_Projects `json:"projects,omitempty"`
}

// PlaygroundRequestSchemaProjects0 A list of projects to check for toggles in.
type PlaygroundRequestSchemaProjects0 = []string

// PlaygroundRequestSchemaProjects1 Check toggles in all projects.
type PlaygroundRequestSchemaProjects1 string

// PlaygroundRequestSchema_Projects A list of projects to check for toggles in.
type PlaygroundRequestSchema_Projects struct {
	union json.RawMessage
}

// PlaygroundResponseSchema The state of all features given the provided input.
type PlaygroundResponseSchema struct {
	// Features The list of features that have been evaluated.
	Features []PlaygroundFeatureSchema `json:"features"`

	// Input Data for the playground API to evaluate toggles
	Input PlaygroundRequestSchema `json:"input"`
}

// PlaygroundSegmentSchema The evaluated result of a segment as used by the Playground.
type PlaygroundSegmentSchema struct {
	// Constraints The list of constraints in this segment.
	Constraints []PlaygroundConstraintSchema `json:"constraints"`

	// Id The segment's id.
	Id int `json:"id"`

	// Name The name of the segment.
	Name string `json:"name"`

	// Result Whether this was evaluated as true or false.
	Result bool `json:"result"`
}

// PlaygroundStrategySchema An evaluated feature toggle strategy as used by the Playground
type PlaygroundStrategySchema struct {
	// Constraints The strategy's constraints and their evaluation results.
	Constraints []PlaygroundConstraintSchema `json:"constraints"`

	// Disabled The strategy's status. Disabled strategies are not evaluated
	Disabled *bool `json:"disabled"`

	// Id The strategy's id.
	Id string `json:"id"`

	// Links A set of links to actions you can perform on this strategy
	Links struct {
		Edit string `json:"edit"`
	} `json:"links"`

	// Name The strategy's name.
	Name string `json:"name"`

	// Parameters A list of parameters for a strategy
	Parameters ParametersSchema `json:"parameters"`

	// Result The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`
	Result PlaygroundStrategySchema_Result `json:"result"`

	// Segments The strategy's segments and their evaluation results.
	Segments []PlaygroundSegmentSchema `json:"segments"`

	// Title Description of the feature's purpose.
	Title *string `json:"title,omitempty"`
}

// PlaygroundStrategySchemaResult0 defines model for .
type PlaygroundStrategySchemaResult0 struct {
	// Enabled Whether this strategy resolves to `false` or if it might resolve to `true`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be `true`, but if you have failing constraints or segments, it _can_ determine that your strategy would be `false`.
	Enabled PlaygroundStrategySchema_Result_0_Enabled `json:"enabled"`

	// EvaluationStatus Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about. The `unevaluated` result is also returned if the strategy is disabled.
	EvaluationStatus PlaygroundStrategySchemaResult0EvaluationStatus `json:"evaluationStatus"`
}

// PlaygroundStrategySchemaResult0Enabled0 defines model for PlaygroundStrategySchema.Result.0.Enabled.0.
type PlaygroundStrategySchemaResult0Enabled0 bool

// PlaygroundStrategySchemaResult0Enabled1 defines model for PlaygroundStrategySchema.Result.0.Enabled.1.
type PlaygroundStrategySchemaResult0Enabled1 string

// PlaygroundStrategySchema_Result_0_Enabled Whether this strategy resolves to `false` or if it might resolve to `true`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be `true`, but if you have failing constraints or segments, it _can_ determine that your strategy would be `false`.
type PlaygroundStrategySchema_Result_0_Enabled struct {
	union json.RawMessage
}

// PlaygroundStrategySchemaResult0EvaluationStatus Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about. The `unevaluated` result is also returned if the strategy is disabled.
type PlaygroundStrategySchemaResult0EvaluationStatus string

// PlaygroundStrategySchemaResult1 defines model for .
type PlaygroundStrategySchemaResult1 struct {
	// Enabled Whether this strategy evaluates to true or not.
	Enabled bool `json:"enabled"`

	// EvaluationStatus Signals that this strategy was evaluated successfully.
	EvaluationStatus PlaygroundStrategySchemaResult1EvaluationStatus `json:"evaluationStatus"`

	// Variant The feature variant you receive based on the provided context or the _disabled
	//                           variant_. If a feature is disabled or doesn't have any
	//                           variants, you would get the _disabled variant_.
	//                           Otherwise, you'll get one of the feature's defined variants.
	Variant *struct {
		// Enabled Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`
		Enabled bool `json:"enabled"`

		// Name The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`
		Name string `json:"name"`

		// Payload An optional payload attached to the variant.
		Payload *struct {
			// Type The format of the payload.
			Type PlaygroundStrategySchemaResult1VariantPayloadType `json:"type"`

			// Value The payload value stringified.
			Value string `json:"value"`
		} `json:"payload,omitempty"`
	} `json:"variant"`

	// Variants The feature variants.
	Variants *[]VariantSchema `json:"variants,omitempty"`
}

// PlaygroundStrategySchemaResult1EvaluationStatus Signals that this strategy was evaluated successfully.
type PlaygroundStrategySchemaResult1EvaluationStatus string

// PlaygroundStrategySchemaResult1VariantPayloadType The format of the payload.
type PlaygroundStrategySchemaResult1VariantPayloadType string

// PlaygroundStrategySchema_Result The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`
type PlaygroundStrategySchema_Result struct {
	union json.RawMessage
}

// ProfileSchema User profile overview
type ProfileSchema struct {
	// Features Deprecated, always returns empty array
	Features []FeatureSchema `json:"features"`

	// Projects Which projects this user is a member of
	Projects []string `json:"projects"`

	// RootRole A role holds permissions to allow Unleash to decide what actions a role holder is allowed to perform
	RootRole RoleSchema `json:"rootRole"`
}

// ProjectDoraMetricsSchema A projects dora metrics
type ProjectDoraMetricsSchema struct {
	// Features An array of objects containing feature toggle name and timeToProduction values. The measurement unit of timeToProduction is days.
	Features []DoraFeaturesSchema `json:"features"`

	// ProjectAverage The average time it takes a feature toggle to be enabled in production. The measurement unit is days.
	ProjectAverage *float32 `json:"projectAverage,omitempty"`
}

// ProjectEnvironmentSchema Add an environment to a project, optionally also sets if change requests are enabled for this environment on the project
type ProjectEnvironmentSchema struct {
	// ChangeRequestsEnabled Whether change requests should be enabled or for this environment on the project or not
	ChangeRequestsEnabled *bool `json:"changeRequestsEnabled,omitempty"`

	// DefaultStrategy Create a strategy configuration in a feature
	DefaultStrategy *CreateFeatureStrategySchema `json:"defaultStrategy,omitempty"`

	// Environment The environment to add to the project
	Environment string `json:"environment"`
}

// ProjectOverviewSchema A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc.
type ProjectOverviewSchema struct {
	// CreatedAt When the project was created.
	CreatedAt *time.Time `json:"createdAt"`

	// DefaultStickiness A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`

	// Description Additional information about the project
	Description *string `json:"description"`

	// Environments The environments that are enabled for this project
	Environments *[]ProjectEnvironmentSchema `json:"environments,omitempty"`

	// Favorite `true` if the project was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`

	// FeatureLimit A limit on the number of features allowed in the project. Null if no limit.
	FeatureLimit *float32 `json:"featureLimit"`

	// FeatureNaming Create a feature naming pattern
	FeatureNaming *CreateFeatureNamingPatternSchema `json:"featureNaming,omitempty"`

	// FeatureTypeCounts The number of features of each type that are in this project
	FeatureTypeCounts *[]FeatureTypeCountSchema `json:"featureTypeCounts,omitempty"`

	// Health An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100
	Health *float32 `json:"health,omitempty"`

	// Members The number of members this project has
	Members *float32 `json:"members,omitempty"`

	// Mode The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
	Mode *ProjectOverviewSchemaMode `json:"mode,omitempty"`

	// Name The name of this project
	Name string `json:"name"`

	// Stats Statistics for a project, including the average time to production, number of features created, the project activity and more.
	//
	// Stats are divided into current and previous **windows**.
	// - The **current window** is the past 30 days.
	// - The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)
	Stats *ProjectStatsSchema `json:"stats,omitempty"`

	// UpdatedAt When the project was last updated.
	UpdatedAt *time.Time `json:"updatedAt"`

	// Version The schema version used to describe the project overview
	Version int `json:"version"`
}

// ProjectOverviewSchemaMode The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
type ProjectOverviewSchemaMode string

// ProjectSchema A definition of the project used for projects listing purposes
type ProjectSchema struct {
	// CreatedAt When this project was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DefaultStickiness A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy
	DefaultStickiness *string `json:"defaultStickiness,omitempty"`

	// Description Additional information about the project
	Description *string `json:"description"`

	// Favorite `true` if the project was favorited, otherwise `false`.
	Favorite *bool `json:"favorite,omitempty"`

	// FeatureCount The number of features this project has
	FeatureCount *float32 `json:"featureCount,omitempty"`

	// Health An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100
	Health *float32 `json:"health,omitempty"`

	// Id The id of this project
	Id string `json:"id"`

	// MemberCount The number of members this project has
	MemberCount *float32 `json:"memberCount,omitempty"`

	// Mode The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
	Mode *ProjectSchemaMode `json:"mode,omitempty"`

	// Name The name of this project
	Name string `json:"name"`

	// UpdatedAt When this project was last updated.
	UpdatedAt *time.Time `json:"updatedAt"`
}

// ProjectSchemaMode The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.
type ProjectSchemaMode string

// ProjectStatsSchema Statistics for a project, including the average time to production, number of features created, the project activity and more.
//
// Stats are divided into current and previous **windows**.
// - The **current window** is the past 30 days.
// - The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)
type ProjectStatsSchema struct {
	// ArchivedCurrentWindow The number of feature toggles that were archived during the current window
	ArchivedCurrentWindow float32 `json:"archivedCurrentWindow"`

	// ArchivedPastWindow The number of feature toggles that were archived during the previous window
	ArchivedPastWindow float32 `json:"archivedPastWindow"`

	// AvgTimeToProdCurrentWindow The average time from when a feature was created to when it was enabled in the "production" environment during the current window
	AvgTimeToProdCurrentWindow float32 `json:"avgTimeToProdCurrentWindow"`

	// CreatedCurrentWindow The number of feature toggles created during the current window
	CreatedCurrentWindow float32 `json:"createdCurrentWindow"`

	// CreatedPastWindow The number of feature toggles created during the previous window
	CreatedPastWindow float32 `json:"createdPastWindow"`

	// ProjectActivityCurrentWindow The number of project events that occurred during the current window
	ProjectActivityCurrentWindow float32 `json:"projectActivityCurrentWindow"`

	// ProjectActivityPastWindow The number of project events that occurred during the previous window
	ProjectActivityPastWindow float32 `json:"projectActivityPastWindow"`

	// ProjectMembersAddedCurrentWindow The number of members that were added to the project during the current window
	ProjectMembersAddedCurrentWindow float32 `json:"projectMembersAddedCurrentWindow"`
}

// ProjectsSchema An overview of all the projects in the Unleash instance
type ProjectsSchema struct {
	// Projects A list of projects in the Unleash instance
	Projects []ProjectSchema `json:"projects"`

	// Version The schema version used to represent the project data.
	Version int `json:"version"`
}

// ProxyClientSchema Frontend SDK client registration information
type ProxyClientSchema struct {
	// AppName Name of the application using Unleash
	AppName string `json:"appName"`

	// Environment deprecated
	// Deprecated:
	Environment *string `json:"environment,omitempty"`

	// InstanceId Instance id for this application (typically hostname, podId or similar)
	InstanceId *string `json:"instanceId,omitempty"`

	// Interval At which interval, in milliseconds, will this client be expected to send metrics
	Interval float32 `json:"interval"`

	// SdkVersion Optional field that describes the sdk version (name:version)
	SdkVersion *string `json:"sdkVersion,omitempty"`

	// Started When this client started. Should be reported as ISO8601 time.
	Started ProxyClientSchema_Started `json:"started"`

	// Strategies List of strategies implemented by this application
	Strategies []string `json:"strategies"`
}

// ProxyClientSchemaStarted0 defines model for .
type ProxyClientSchemaStarted0 = time.Time

// ProxyClientSchemaStarted1 defines model for .
type ProxyClientSchemaStarted1 = float32

// ProxyClientSchema_Started When this client started. Should be reported as ISO8601 time.
type ProxyClientSchema_Started struct {
	union json.RawMessage
}

// ProxyFeatureSchema Frontend API feature
type ProxyFeatureSchema struct {
	// Enabled Always set to `true`.
	Enabled bool `json:"enabled"`

	// ImpressionData `true` if the impression data collection is enabled for the feature, otherwise `false`.
	ImpressionData bool `json:"impressionData"`

	// Name Unique feature name.
	Name string `json:"name"`

	// Variant Variant details
	Variant *struct {
		// Enabled Whether the variant is enabled or not.
		Enabled bool `json:"enabled"`

		// Name The variants name. Is unique for this feature toggle
		Name string `json:"name"`

		// Payload Extra data configured for this variant
		Payload *struct {
			// Type The format of the payload.
			Type ProxyFeatureSchemaVariantPayloadType `json:"type"`

			// Value The payload value stringified.
			Value string `json:"value"`
		} `json:"payload,omitempty"`
	} `json:"variant,omitempty"`
}

// ProxyFeatureSchemaVariantPayloadType The format of the payload.
type ProxyFeatureSchemaVariantPayloadType string

// ProxyFeaturesSchema Frontend SDK features list
type ProxyFeaturesSchema struct {
	// Toggles The actual features returned to the Frontend SDK
	Toggles []ProxyFeatureSchema `json:"toggles"`
}

// PublicSignupTokenCreateSchema Used for creating a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens)
type PublicSignupTokenCreateSchema struct {
	// ExpiresAt The token's expiration date.
	ExpiresAt time.Time `json:"expiresAt"`

	// Name The token's name.
	Name string `json:"name"`
}

// PublicSignupTokenSchema Used for transporting a [public invite link](https://docs.getunleash.io/reference/public-signup#public-sign-up-tokens)
type PublicSignupTokenSchema struct {
	// CreatedAt When the token was created.
	CreatedAt time.Time `json:"createdAt"`

	// CreatedBy The creator's email or username
	CreatedBy *string `json:"createdBy"`

	// Enabled Whether the token is active. This property will always be `false` for a token that has expired.
	Enabled bool `json:"enabled"`

	// ExpiresAt The time when the token will expire.
	ExpiresAt time.Time `json:"expiresAt"`

	// Name The token's name. Only for displaying in the UI
	Name string `json:"name"`

	// Role A role holds permissions to allow Unleash to decide what actions a role holder is allowed to perform
	Role RoleSchema `json:"role"`

	// Secret The actual value of the token. This is the part that is used by Unleash to create an invite link
	Secret string `json:"secret"`

	// Url The public signup link for the token. Users who follow this link will be taken to a signup page where they can create an Unleash user.
	Url *string `json:"url"`

	// Users Array of users that have signed up using the token.
	Users *[]UserSchema `json:"users"`
}

// PublicSignupTokenUpdateSchema Used by Unleash for updating a token's expiration date or, when deleting the invite link, it's status
type PublicSignupTokenUpdateSchema struct {
	// Enabled Whether the token is active or not.
	Enabled *bool `json:"enabled,omitempty"`

	// ExpiresAt The token's expiration date.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
}

// PublicSignupTokensSchema A wrapper object containing all the public signup tokens
type PublicSignupTokensSchema struct {
	// Tokens An array of all the public signup tokens
	Tokens []PublicSignupTokenSchema `json:"tokens"`
}

// PushVariantsSchema Data used when copying variants into a new environment.
type PushVariantsSchema struct {
	// Environments The enviromnents to write the provided variants to
	Environments *[]string `json:"environments,omitempty"`

	// Variants The variants to write to the provided environments
	Variants *[]VariantSchema `json:"variants,omitempty"`
}

// ResetPasswordSchema Data used to provide users a way to reset their passwords.
type ResetPasswordSchema struct {
	// ResetPasswordUrl A URL pointing to a location where the user can reset their password
	ResetPasswordUrl string `json:"resetPasswordUrl"`
}

// RoleSchema A role holds permissions to allow Unleash to decide what actions a role holder is allowed to perform
type RoleSchema struct {
	// Description A more detailed description of the role and what use it's intended for
	Description *string `json:"description,omitempty"`

	// Id The role id
	Id int `json:"id"`

	// Name The name of the role
	Name string `json:"name"`

	// Type A role can either be a global root role (applies to all projects) or a project role
	Type string `json:"type"`
}

// SdkContextSchema The Unleash context as modeled in client SDKs
type SdkContextSchema struct {
	// AppName The name of the application.
	AppName string `json:"appName"`

	// CurrentTime A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user.
	CurrentTime *time.Time `json:"currentTime,omitempty"`

	// Environment The environment the app is running in.
	// Deprecated:
	Environment *string `json:"environment,omitempty"`

	// Properties Additional Unleash context properties
	Properties *map[string]string `json:"properties,omitempty"`

	// RemoteAddress The app's IP address
	RemoteAddress *string `json:"remoteAddress,omitempty"`

	// SessionId An identifier for the current session
	SessionId *string `json:"sessionId,omitempty"`

	// UserId An identifier for the current user
	UserId               *string                `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SdkFlatContextSchema The Unleash context with flattened properties
type SdkFlatContextSchema struct {
	// AppName The name of the application.
	AppName string `json:"appName"`

	// CurrentTime A DateTime (or similar) data class instance or a string in an RFC3339-compatible format. Defaults to the current time if not set by the user.
	CurrentTime *time.Time `json:"currentTime,omitempty"`

	// Environment The environment the app is running in.
	// Deprecated:
	Environment *string `json:"environment,omitempty"`

	// RemoteAddress The app's IP address
	RemoteAddress *string `json:"remoteAddress,omitempty"`

	// SessionId An identifier for the current session
	SessionId *string `json:"sessionId,omitempty"`

	// UserId An identifier for the current user
	UserId               *string                `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SearchEventsSchema
//
//	Search for events by type, project, feature, free-text query,
//	or a combination thereof. Pass an empty object to fetch all events.
type SearchEventsSchema struct {
	// Feature Find events by feature toggle name (case-sensitive).
	Feature *string `json:"feature,omitempty"`

	// Limit The maximum amount of events to return in the search result
	Limit *int `json:"limit,omitempty"`

	// Offset Which event id to start listing from
	Offset *int `json:"offset,omitempty"`

	// Project Find events by project ID (case-sensitive).
	Project *string `json:"project,omitempty"`

	// Query Find events by a free-text search query. The query will be matched against the event type, the username or email that created the event (if any), and the event data payload (if any).
	Query *string `json:"query,omitempty"`

	// Type Find events by event type (case-sensitive).
	Type *SearchEventsSchemaType `json:"type,omitempty"`
}

// SearchEventsSchemaType Find events by event type (case-sensitive).
type SearchEventsSchemaType string

// SearchFeaturesSchema A list of features matching search and filter criteria.
type SearchFeaturesSchema struct {
	// Features The full list of features in this project matching search and filter criteria.
	Features []FeatureSearchResponseSchema `json:"features"`

	// Total Total count of the features matching search and filter criteria
	Total *float32 `json:"total,omitempty"`
}

// SegmentSchema Represents a segment of users defined by a set of constraints.
type SegmentSchema struct {
	// Constraints List of constraints that determine which users are part of the segment
	Constraints []ConstraintSchema `json:"constraints"`

	// CreatedAt The time the segment was created as a RFC 3339-conformant timestamp.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CreatedBy Which user created this segment
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description The description of the segment.
	Description *string `json:"description"`

	// Id The segment's id.
	Id float32 `json:"id"`

	// Name The name of the segment.
	Name *string `json:"name,omitempty"`

	// Project The project the segment relates to, if applicable.
	Project *string `json:"project"`
}

// SegmentStrategiesSchema A collection of strategies belonging to a specified segment.
type SegmentStrategiesSchema struct {
	// ChangeRequestStrategies A list of strategies that use this segment in active change requests.
	ChangeRequestStrategies *[]struct {
		// Environment The ID of the environment that the strategy belongs to.
		Environment string `json:"environment"`

		// FeatureName The name of the feature flag that this strategy belongs to.
		FeatureName string `json:"featureName"`

		// Id The ID of the strategy. Not present on new strategies that haven't been added to the feature flag yet.
		Id *string `json:"id,omitempty"`

		// ProjectId The ID of the project that the strategy belongs to.
		ProjectId string `json:"projectId"`

		// StrategyName The name of the strategy's type.
		StrategyName string `json:"strategyName"`
	} `json:"changeRequestStrategies,omitempty"`

	// Strategies The list of strategies
	Strategies []struct {
		// Environment The ID of the environment that the strategy belongs to.
		Environment string `json:"environment"`

		// FeatureName The name of the feature flag that this strategy belongs to.
		FeatureName string `json:"featureName"`

		// Id The ID of the strategy
		Id string `json:"id"`

		// ProjectId The ID of the project that the strategy belongs to.
		ProjectId string `json:"projectId"`

		// StrategyName The name of the strategy's type.
		StrategyName string `json:"strategyName"`
	} `json:"strategies"`
}

// SegmentsSchema Data containing a list of [segments](https://docs.getunleash.io/reference/segments)
type SegmentsSchema struct {
	// Segments A list of segments
	Segments *[]AdminSegmentSchema `json:"segments,omitempty"`
}

// SetStrategySortOrderSchema An array of strategies with their new sort order
type SetStrategySortOrderSchema = []struct {
	// Id The ID of the strategy
	Id string `json:"id"`

	// SortOrder The new sort order of the strategy
	SortOrder float32 `json:"sortOrder"`
}

// SetUiConfigSchema Unleash configuration settings affect the admin UI.
type SetUiConfigSchema struct {
	// FrontendSettings Settings related to the front-end API.
	FrontendSettings *struct {
		// FrontendApiOrigins The list of origins that the front-end API should accept requests from.
		FrontendApiOrigins []string `json:"frontendApiOrigins"`
	} `json:"frontendSettings,omitempty"`
}

// SortOrderSchema A map of object IDs and their corresponding sort orders.
type SortOrderSchema map[string]int

// SplashResponseSchema Data related to a user having seen a splash screen.
type SplashResponseSchema struct {
	// Seen Indicates whether the user has seen the splash screen or not.
	Seen bool `json:"seen"`

	// SplashId The ID of the splash screen that was shown.
	SplashId string `json:"splashId"`

	// UserId The ID of the user that was shown the splash screen.
	UserId int `json:"userId"`
}

// StateSchema The application state as used by the deprecated export/import APIs.
type StateSchema struct {
	// Environments A list of environments
	Environments *[]EnvironmentSchema `json:"environments,omitempty"`

	// FeatureEnvironments A list of feature environment configurations
	FeatureEnvironments *[]FeatureEnvironmentSchema `json:"featureEnvironments,omitempty"`

	// FeatureStrategies A list of feature strategies as applied to features
	FeatureStrategies *[]FeatureStrategySchema `json:"featureStrategies,omitempty"`

	// FeatureStrategySegments A list of segment/strategy pairings
	FeatureStrategySegments *[]FeatureStrategySegmentSchema `json:"featureStrategySegments,omitempty"`

	// FeatureTags A list of tags applied to features
	FeatureTags *[]FeatureTagSchema `json:"featureTags,omitempty"`

	// Features A list of features
	Features *[]FeatureSchema `json:"features,omitempty"`

	// Projects A list of projects
	Projects *[]ProjectSchema `json:"projects,omitempty"`

	// Segments A list of segments
	Segments *[]SegmentSchema `json:"segments,omitempty"`

	// Strategies A list of strategies
	Strategies *[]StrategySchema `json:"strategies,omitempty"`

	// TagTypes A list of tag types
	TagTypes *[]TagTypeSchema `json:"tagTypes,omitempty"`

	// Tags A list of tags
	Tags *[]TagSchema `json:"tags,omitempty"`

	// Version The version of the schema used to describe the state
	Version int `json:"version"`
}

// StrategiesSchema List of strategies
type StrategiesSchema struct {
	// Strategies List of strategies
	Strategies []StrategySchema `json:"strategies"`

	// Version Version of the strategies schema
	Version StrategiesSchemaVersion `json:"version"`
}

// StrategiesSchemaVersion Version of the strategies schema
type StrategiesSchemaVersion int

// StrategySchema The [activation strategy](https://docs.getunleash.io/reference/activation-strategies) schema
type StrategySchema struct {
	Deprecated bool `json:"deprecated"`

	// Description A short description of the strategy
	Description *string `json:"description"`

	// DisplayName A human friendly name for the strategy
	DisplayName *string `json:"displayName"`

	// Editable Whether the strategy can be edited or not. Strategies bundled with Unleash cannot be edited.
	Editable bool `json:"editable"`

	// Name The name (type) of the strategy
	Name string `json:"name"`

	// Parameters A list of relevant parameters for each strategy
	Parameters []struct {
		Description *string `json:"description,omitempty"`
		Name        *string `json:"name,omitempty"`
		Required    *bool   `json:"required,omitempty"`
		Type        *string `json:"type,omitempty"`
	} `json:"parameters"`

	// Title An optional title for the strategy
	Title *string `json:"title"`
}

// StrategyVariantSchema This is an experimental property. It may change or be removed as we work on it. Please don't depend on it yet. A strategy variant allows you to attach any data to strategies instead of only returning `true`/`false`. Strategy variants take precedence over feature variants.
type StrategyVariantSchema struct {
	// Name The variant name. Must be unique for this feature toggle
	Name string `json:"name"`

	// Payload Extra data configured for this variant
	Payload *struct {
		// Type The type of the value. Commonly used types are string, number, json and csv.
		Type StrategyVariantSchemaPayloadType `json:"type"`

		// Value The actual value of payload
		Value string `json:"value"`
	} `json:"payload,omitempty"`

	// Stickiness The [stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) to use for distribution of this variant. Stickiness is how Unleash guarantees that the same user gets the same variant every time
	Stickiness string `json:"stickiness"`

	// Weight The weight is the likelihood of any one user getting this variant. It is an integer between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information
	Weight int `json:"weight"`

	// WeightType Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
	WeightType StrategyVariantSchemaWeightType `json:"weightType"`
}

// StrategyVariantSchemaPayloadType The type of the value. Commonly used types are string, number, json and csv.
type StrategyVariantSchemaPayloadType string

// StrategyVariantSchemaWeightType Set to `fix` if this variant must have exactly the weight allocated to it. If the type is `variable`, the weight will adjust so that the total weight of all variants adds up to 1000. Refer to the [variant weight documentation](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight).
type StrategyVariantSchemaWeightType string

// TagSchema Representation of a [tag](https://docs.getunleash.io/reference/tags)
type TagSchema struct {
	// Type The [type](https://docs.getunleash.io/reference/tags#tag-types) of the tag
	Type string `json:"type"`

	// Value The value of the tag
	Value string `json:"value"`
}

// TagTypeSchema A tag type.
type TagTypeSchema struct {
	// Description The description of the tag type.
	Description *string `json:"description,omitempty"`

	// Icon The icon of the tag type.
	Icon *string `json:"icon"`

	// Name The name of the tag type.
	Name string `json:"name"`
}

// TagTypesSchema A list of tag types with a version number representing the schema used to model the tag types.
type TagTypesSchema struct {
	// TagTypes The list of tag types.
	TagTypes []TagTypeSchema `json:"tagTypes"`

	// Version The version of the schema used to model the tag types.
	Version int `json:"version"`
}

// TagWithVersionSchema A tag with a version number representing the schema used to model the tag.
type TagWithVersionSchema struct {
	// Tag Representation of a [tag](https://docs.getunleash.io/reference/tags)
	Tag TagSchema `json:"tag"`

	// Version The version of the schema used to model the tag.
	Version int `json:"version"`
}

// TagsBulkAddSchema Represents tag changes to be applied to a list of features.
type TagsBulkAddSchema struct {
	// Features The list of features that will be affected by the tag changes.
	Features []string `json:"features"`

	// Tags Represents a set of changes to a feature's tags, such as adding or removing tags.
	Tags UpdateTagsSchema `json:"tags"`
}

// TagsSchema A list of tags with a version number
type TagsSchema struct {
	// Tags A list of tags.
	Tags []TagSchema `json:"tags"`

	// Version The version of the schema used to model the tags.
	Version int `json:"version"`
}

// TelemetrySettingsSchema Contains information about which settings are configured for version info collection and feature usage collection.
type TelemetrySettingsSchema struct {
	// FeatureInfoCollectionEnabled Whether collection of feature usage metrics is enabled/active.
	FeatureInfoCollectionEnabled bool `json:"featureInfoCollectionEnabled"`

	// VersionInfoCollectionEnabled Whether collection of version info is enabled/active.
	VersionInfoCollectionEnabled bool `json:"versionInfoCollectionEnabled"`
}

// ToggleMaintenanceSchema Data used when to activate or deactivate maintenance mode for Unleash.
type ToggleMaintenanceSchema struct {
	// Enabled `true` if you want to activate maintenance mode, `false` if you want to deactivate it.
	Enabled bool `json:"enabled"`
}

// TokenStringListSchema A list of unleash tokens to validate against known tokens
type TokenStringListSchema struct {
	// Tokens Tokens that we want to get access information about
	Tokens []string `json:"tokens"`
}

// TokenUserSchema A user identified by a token
type TokenUserSchema struct {
	// CreatedBy A username or email identifying which user created this token
	CreatedBy *string `json:"createdBy"`

	// Email The email of the user
	Email string `json:"email"`

	// Id The user id
	Id int `json:"id"`

	// Name The name of the user
	Name *string `json:"name,omitempty"`

	// Role A role holds permissions to allow Unleash to decide what actions a role holder is allowed to perform
	Role RoleSchema `json:"role"`

	// Token A token uniquely identifying a user
	Token string `json:"token"`
}

// UiConfigSchema A collection of properties used to configure the Unleash Admin UI.
type UiConfigSchema struct {
	// AuthenticationType The type of authentication enabled for this Unleash instance
	AuthenticationType *UiConfigSchemaAuthenticationType `json:"authenticationType,omitempty"`

	// BaseUriPath The base URI path at which this Unleash instance is listening.
	BaseUriPath string `json:"baseUriPath"`

	// DisablePasswordAuth Whether password authentication should be disabled or not.
	DisablePasswordAuth *bool `json:"disablePasswordAuth,omitempty"`

	// EmailEnabled Whether this instance can send out emails or not.
	EmailEnabled *bool `json:"emailEnabled,omitempty"`

	// Environment What kind of Unleash instance it is: Enterprise, Pro, or Open source
	Environment *string `json:"environment,omitempty"`

	// FeedbackUriPath The URI path at which the feedback endpoint is listening.
	FeedbackUriPath *string `json:"feedbackUriPath,omitempty"`

	// Flags Additional (largely experimental) features that are enabled in this Unleash instance.
	Flags *map[string]UiConfigSchema_Flags_AdditionalProperties `json:"flags,omitempty"`

	// FrontendApiOrigins The list of origins that the front-end API should accept requests from.
	FrontendApiOrigins *[]string `json:"frontendApiOrigins,omitempty"`

	// Links Relevant links to use in the UI.
	Links *[]map[string]interface{} `json:"links,omitempty"`

	// MaintenanceMode Whether maintenance mode is currently active or not.
	MaintenanceMode *bool `json:"maintenanceMode,omitempty"`

	// Name The name of this Unleash instance. Used to build the text in the footer.
	Name *string `json:"name,omitempty"`

	// NetworkViewEnabled Whether to enable the Unleash network view or not.
	NetworkViewEnabled *bool `json:"networkViewEnabled,omitempty"`

	// SegmentValuesLimit The maximum number of values that can be used in a single segment.
	SegmentValuesLimit *float32 `json:"segmentValuesLimit,omitempty"`

	// Slogan The slogan to display in the UI footer.
	Slogan *string `json:"slogan,omitempty"`

	// StrategySegmentsLimit The maximum number of segments that can be applied to a single strategy.
	StrategySegmentsLimit *float32 `json:"strategySegmentsLimit,omitempty"`

	// UnleashUrl The URL of the Unleash instance.
	UnleashUrl string `json:"unleashUrl"`

	// Version The current version of Unleash
	Version string `json:"version"`

	// VersionInfo Detailed information about an Unleash version
	VersionInfo VersionSchema `json:"versionInfo"`
}

// UiConfigSchemaAuthenticationType The type of authentication enabled for this Unleash instance
type UiConfigSchemaAuthenticationType string

// UiConfigSchemaFlags0 defines model for .
type UiConfigSchemaFlags0 = bool

// UiConfigSchema_Flags_AdditionalProperties defines model for uiConfigSchema.flags.AdditionalProperties.
type UiConfigSchema_Flags_AdditionalProperties struct {
	union json.RawMessage
}

// UpdateApiTokenSchema An object with fields to updated for a given API token.
type UpdateApiTokenSchema struct {
	// ExpiresAt The new time when this token should expire.
	ExpiresAt time.Time `json:"expiresAt"`
}

// UpdateContextFieldSchema Data to update an existing context field configuration.
type UpdateContextFieldSchema struct {
	// Description A description of the context field
	Description *string `json:"description,omitempty"`

	// LegalValues A list of allowed values for this context field
	LegalValues *[]LegalValueSchema `json:"legalValues,omitempty"`

	// SortOrder How this context field should be sorted if no other sort order is selected
	SortOrder *int `json:"sortOrder,omitempty"`

	// Stickiness `true` if this field should be available for use with [custom stickiness](https://docs.getunleash.io/reference/stickiness#custom-stickiness), otherwise `false`
	Stickiness *bool `json:"stickiness,omitempty"`
}

// UpdateFeatureSchema Data used for updating a feature toggle
type UpdateFeatureSchema struct {
	// Archived If `true` the feature toggle will be moved to the [archive](https://docs.getunleash.io/reference/archived-toggles) with a property `archivedAt` set to current time
	Archived *bool `json:"archived,omitempty"`

	// Description Detailed description of the feature
	Description *string `json:"description,omitempty"`

	// ImpressionData `true` if the impression data collection is enabled for the feature
	ImpressionData *bool `json:"impressionData,omitempty"`

	// Stale `true` if the feature is archived
	Stale *bool `json:"stale,omitempty"`

	// Type Type of the toggle e.g. experiment, kill-switch, release, operational, permission
	Type *string `json:"type,omitempty"`
}

// UpdateFeatureStrategySchema Update a strategy configuration in a feature
type UpdateFeatureStrategySchema struct {
	// Constraints A list of the constraints attached to the strategy. See https://docs.getunleash.io/reference/strategy-constraints
	Constraints *[]ConstraintSchema `json:"constraints,omitempty"`

	// Disabled A toggle to disable the strategy. defaults to true. Disabled strategies are not evaluated or returned to the SDKs
	Disabled *bool `json:"disabled"`

	// Name The name of the strategy type
	Name *string `json:"name,omitempty"`

	// Parameters A list of parameters for a strategy
	Parameters *ParametersSchema `json:"parameters,omitempty"`

	// Title A descriptive title for the strategy
	Title *string `json:"title"`

	// Variants Strategy level variants
	Variants *[]CreateStrategyVariantSchema `json:"variants,omitempty"`
}

// UpdateFeatureStrategySegmentsSchema Data required to update segments for a strategy.
type UpdateFeatureStrategySegmentsSchema struct {
	// EnvironmentId The ID of the strategy environment.
	EnvironmentId string `json:"environmentId"`

	// ProjectId The ID of the project that the strategy belongs to.
	ProjectId string `json:"projectId"`

	// SegmentIds The new list of segments (IDs) to use for this strategy. Any segments not in this list will be removed from the strategy.
	SegmentIds []int `json:"segmentIds"`

	// StrategyId The ID of the strategy to update segments for.
	StrategyId string `json:"strategyId"`
}

// UpdateFeatureTypeLifetimeSchema Data used when updating the lifetime of a [feature toggle type](https://docs.getunleash.io/reference/feature-toggle-types).
type UpdateFeatureTypeLifetimeSchema struct {
	// LifetimeDays The new lifetime (in days) that you want to assign to the feature toggle type. If the value is `null` or `0`, then the feature toggles of that type will never be marked as potentially stale. Otherwise, they will be considered potentially stale after the number of days indicated by this property.
	LifetimeDays *int `json:"lifetimeDays"`
}

// UpdateStrategySchema The data required to update a strategy type.
type UpdateStrategySchema struct {
	// Description A description of the strategy type.
	Description *string `json:"description,omitempty"`

	// Parameters The parameter list lets you pass arguments to your custom activation strategy. These will be made available to your custom strategy implementation.
	Parameters []struct {
		// Description A description of this strategy parameter. Use this to indicate to the users what the parameter does.
		Description *string `json:"description,omitempty"`

		// Name The name of the parameter
		Name string `json:"name"`

		// Required Whether this parameter must be configured when using the strategy. Defaults to `false`
		Required *bool `json:"required,omitempty"`

		// Type The [type of the parameter](https://docs.getunleash.io/reference/custom-activation-strategies#parameter-types)
		Type UpdateStrategySchemaParametersType `json:"type"`
	} `json:"parameters"`
}

// UpdateStrategySchemaParametersType The [type of the parameter](https://docs.getunleash.io/reference/custom-activation-strategies#parameter-types)
type UpdateStrategySchemaParametersType string

// UpdateTagTypeSchema The request body for updating a tag type.
type UpdateTagTypeSchema struct {
	// Description The description of the tag type.
	Description *string `json:"description,omitempty"`

	// Icon The icon of the tag type.
	Icon *string `json:"icon,omitempty"`
}

// UpdateTagsSchema Represents a set of changes to a feature's tags, such as adding or removing tags.
type UpdateTagsSchema struct {
	// AddedTags Tags to add to the feature.
	AddedTags []TagSchema `json:"addedTags"`

	// RemovedTags Tags to remove from the feature.
	RemovedTags []TagSchema `json:"removedTags"`
}

// UpdateUserSchema All fields that can be directly changed for the user
type UpdateUserSchema struct {
	// Email The user's email address. Must be provided if username is not provided.
	Email *string `json:"email,omitempty"`

	// Name The user's name (not the user's username).
	Name *string `json:"name,omitempty"`

	// RootRole The role to assign to the user. Can be either the role's ID or its unique name.
	RootRole *UpdateUserSchema_RootRole `json:"rootRole,omitempty"`
}

// UpdateUserSchemaRootRole0 defines model for .
type UpdateUserSchemaRootRole0 = int

// UpdateUserSchemaRootRole1 defines model for UpdateUserSchema.RootRole.1.
type UpdateUserSchemaRootRole1 string

// UpdateUserSchema_RootRole The role to assign to the user. Can be either the role's ID or its unique name.
type UpdateUserSchema_RootRole struct {
	union json.RawMessage
}

// UpsertSegmentSchema Data used to create or update a segment
type UpsertSegmentSchema struct {
	// Constraints The list of constraints that make up this segment
	Constraints []ConstraintSchema `json:"constraints"`

	// Description A description of what the segment is for
	Description *string `json:"description"`

	// Name The name of the segment
	Name string `json:"name"`

	// Project The project the segment belongs to if any.
	Project *string `json:"project"`
}

// UserSchema An Unleash user
type UserSchema struct {
	// AccountType A user is either an actual User or a Service Account
	AccountType *string `json:"accountType,omitempty"`

	// CreatedAt The user was created at this time
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Email Email of the user
	Email *string `json:"email,omitempty"`

	// EmailSent Is the welcome email sent to the user or not
	EmailSent *bool `json:"emailSent,omitempty"`

	// Id The user id
	Id int `json:"id"`

	// ImageUrl URL used for the userprofile image
	ImageUrl *string `json:"imageUrl,omitempty"`

	// InviteLink If the user is actively inviting other users, this is the link that can be shared with other users
	InviteLink *string `json:"inviteLink,omitempty"`

	// IsAPI (Deprecated): Used internally to know which operations the user should be allowed to perform
	// Deprecated:
	IsAPI *bool `json:"isAPI,omitempty"`

	// LoginAttempts How many unsuccessful attempts at logging in has the user made
	LoginAttempts *int `json:"loginAttempts,omitempty"`

	// Name Name of the user
	Name *string `json:"name"`

	// Permissions Deprecated
	Permissions *[]string `json:"permissions,omitempty"`

	// RootRole Which [root role](https://docs.getunleash.io/reference/rbac#predefined-roles) this user is assigned
	RootRole *int `json:"rootRole,omitempty"`

	// SeenAt The last time this user logged in
	SeenAt *time.Time `json:"seenAt"`

	// Username A unique username for the user
	Username *string `json:"username"`
}

// UsersGroupsBaseSchema An overview of user groups and users.
type UsersGroupsBaseSchema struct {
	// Groups A list of user groups and their configuration.
	Groups *[]GroupSchema `json:"groups,omitempty"`

	// Users A list of users.
	Users *[]UserSchema `json:"users,omitempty"`
}

// UsersSchema Users and root roles
type UsersSchema struct {
	// RootRoles A list of [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles) in the Unleash instance.
	RootRoles *[]RoleSchema `json:"rootRoles,omitempty"`

	// Users A list of users in the Unleash instance.
	Users []UserSchema `json:"users"`
}

// ValidateArchiveFeaturesSchema Validation details for features archive operation
type ValidateArchiveFeaturesSchema struct {
	// HasDeletedDependencies Whether any dependencies will be deleted as part of archive
	HasDeletedDependencies bool `json:"hasDeletedDependencies"`

	// ParentsWithChildFeatures List of parent features that would orphan child features that are not part of the archive operation
	ParentsWithChildFeatures []string `json:"parentsWithChildFeatures"`
}

// ValidateFeatureSchema Data used to validate a feature toggle's name.
type ValidateFeatureSchema struct {
	// Name The feature name to validate.
	Name string `json:"name"`

	// ProjectId The id of the project that the feature flag will belong to. If the target project has a feature naming pattern defined, the name will be validated against that pattern.
	ProjectId *string `json:"projectId"`
}

// ValidatePasswordSchema Used to validate passwords obeying [Unleash password guidelines](https://docs.getunleash.io/reference/deploy/securing-unleash#password-requirements)
type ValidatePasswordSchema struct {
	// Password The password to validate
	Password string `json:"password"`
}

// ValidateTagTypeSchema The result of validating a tag type.
type ValidateTagTypeSchema struct {
	// TagType A tag type.
	TagType TagTypeSchema `json:"tagType"`

	// Valid Whether or not the tag type is valid.
	Valid bool `json:"valid"`
}

// ValidatedEdgeTokensSchema A object containing a list of valid Unleash tokens.
type ValidatedEdgeTokensSchema struct {
	// Tokens The list of Unleash token objects. Each object contains the token itself and some additional metadata.
	Tokens []EdgeTokenSchema `json:"tokens"`
}

// VariantFlagSchema A representation of an evaluated Unleash feature variant.
type VariantFlagSchema struct {
	// Enabled Whether the variant is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`

	// Name The name of the variant. Will always be disabled if `enabled` is false.
	Name *string `json:"name,omitempty"`

	// Payload Additional data associated with this variant.
	Payload *struct {
		// Type The type of data contained.
		Type *VariantFlagSchemaPayloadType `json:"type,omitempty"`

		// Value The actual associated data
		Value *string `json:"value,omitempty"`
	} `json:"payload,omitempty"`
}

// VariantFlagSchemaPayloadType The type of data contained.
type VariantFlagSchemaPayloadType string

// VariantSchema A variant allows for further separation of users into segments. See [our excellent documentation](https://docs.getunleash.io/reference/feature-toggle-variants#what-are-variants) for a more detailed description
type VariantSchema struct {
	// Name The variants name. Is unique for this feature toggle
	Name string `json:"name"`

	// Overrides Overrides assigning specific variants to specific users. The weighting system automatically assigns users to specific groups for you, but any overrides in this list will take precedence.
	Overrides *[]OverrideSchema `json:"overrides,omitempty"`

	// Payload Extra data configured for this variant
	Payload *struct {
		// Type The type of the value. Commonly used types are string, number, json and csv.
		Type VariantSchemaPayloadType `json:"type"`

		// Value The actual value of payload
		Value string `json:"value"`
	} `json:"payload,omitempty"`

	// Stickiness [Stickiness](https://docs.getunleash.io/reference/feature-toggle-variants#variant-stickiness) is how Unleash guarantees that the same user gets the same variant every time
	Stickiness *string `json:"stickiness,omitempty"`

	// Weight The weight is the likelihood of any one user getting this variant. It is a number between 0 and 1000. See the section on [variant weights](https://docs.getunleash.io/reference/feature-toggle-variants#variant-weight) for more information
	Weight float32 `json:"weight"`

	// WeightType Set to fix if this variant must have exactly the weight allocated to it. If the type is variable, the weight will adjust so that the total weight of all variants adds up to 1000
	WeightType *VariantSchemaWeightType `json:"weightType,omitempty"`
}

// VariantSchemaPayloadType The type of the value. Commonly used types are string, number, json and csv.
type VariantSchemaPayloadType string

// VariantSchemaWeightType Set to fix if this variant must have exactly the weight allocated to it. If the type is variable, the weight will adjust so that the total weight of all variants adds up to 1000
type VariantSchemaWeightType string

// VariantsSchema A list of variants
type VariantsSchema = []VariantSchema

// VersionSchema Detailed information about an Unleash version
type VersionSchema struct {
	// Current The current version of Unleash.
	Current struct {
		// Enterprise The Enterpris version of Unleash used to build this instance, represented as a git revision belonging to the [Unleash Enterprise](https://github.com/ivarconr/unleash-enterprise) repository. Will be an empty string if no enterprise version was used,
		Enterprise *string `json:"enterprise,omitempty"`

		// Oss The OSS version used when building this Unleash instance, represented as a git revision belonging to the [main Unleash git repo](https://github.com/Unleash/unleash/)
		Oss *string `json:"oss,omitempty"`
	} `json:"current"`

	// InstanceId The instance identifier of the Unleash instance
	InstanceId *string `json:"instanceId,omitempty"`

	// IsLatest Whether the Unleash server is running the latest release (`true`) or if there are updates available (`false`)
	IsLatest bool `json:"isLatest"`

	// Latest Information about the latest available Unleash releases. Will be an empty object if no data is available.
	Latest struct {
		// Enterprise The latest available Enterprise version of Unleash
		Enterprise *string `json:"enterprise,omitempty"`

		// Oss The latest available OSS version of Unleash
		Oss *string `json:"oss,omitempty"`
	} `json:"latest"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// Project The name of the project whose events you want to retrieve
	Project *string `form:"project,omitempty" json:"project,omitempty"`
}

// SearchFeaturesParams defines parameters for SearchFeatures.
type SearchFeaturesParams struct {
	// Query The search query for the feature name or tag
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Project Id of the project where search and filter is performed. The project id can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF.
	Project *string `form:"project,omitempty" json:"project,omitempty"`

	// State The state of the feature active/stale. The state can be specified with an operator. The supported operators are IS, IS_NOT, IS_ANY_OF, IS_NONE_OF.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Type The list of feature types to filter by
	Type *[]string `form:"type,omitempty" json:"type,omitempty"`

	// Tag The list of feature tags to filter by. Feature tag has to specify a type and a value joined with a colon.
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Segment The list of segments with operators to filter by. The segment valid operators are INCLUDE, DO_NOT_INCLUDE, INCLUDE_ALL_OF, INCLUDE_ANY_OF, EXCLUDE_IF_ANY_OF, EXCLUDE_ALL.
	Segment *string `form:"segment,omitempty" json:"segment,omitempty"`

	// Status The list of feature environment status to filter by. Feature environment has to specify a name and a status joined with a colon.
	Status *[]string `form:"status,omitempty" json:"status,omitempty"`

	// Offset The number of features to skip when returning a page. By default it is set to 0.
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The number of feature environments to return in a page. By default it is set to 50.
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy The field to sort the results by. By default it is set to "createdAt".
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder The sort order for the sortBy. By default it is det to "asc".
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// FavoritesFirst The flag to indicate if the favorite features should be returned first. By default it is set to false.
	FavoritesFirst *string `form:"favoritesFirst,omitempty" json:"favoritesFirst,omitempty"`

	// CreatedAt The date the feature was created. The date can be specified with an operator. The supported operators are IS_BEFORE, IS_ON_OR_AFTER.
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty"`
}

// ExportParams defines parameters for Export.
type ExportParams struct {
	// Format Desired export format. Must be either `json` or `yaml`.
	Format *ExportParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// Download Whether exported data should be downloaded as a file.
	Download *struct {
		union json.RawMessage
	} `form:"download,omitempty" json:"download,omitempty"`

	// Strategies Whether strategies should be included in the exported data.
	Strategies *struct {
		union json.RawMessage
	} `form:"strategies,omitempty" json:"strategies,omitempty"`

	// FeatureToggles Whether feature toggles should be included in the exported data.
	FeatureToggles *struct {
		union json.RawMessage
	} `form:"featureToggles,omitempty" json:"featureToggles,omitempty"`

	// Projects Whether projects should be included in the exported data.
	Projects *struct {
		union json.RawMessage
	} `form:"projects,omitempty" json:"projects,omitempty"`

	// Tags Whether tag types, tags, and feature_tags should be included in the exported data.
	Tags *struct {
		union json.RawMessage
	} `form:"tags,omitempty" json:"tags,omitempty"`

	// Environments Whether environments should be included in the exported data.
	Environments *struct {
		union json.RawMessage
	} `form:"environments,omitempty" json:"environments,omitempty"`
}

// ExportParamsFormat defines parameters for Export.
type ExportParamsFormat string

// ExportParamsDownload0 defines parameters for Export.
type ExportParamsDownload0 = bool

// ExportParamsDownload1 defines parameters for Export.
type ExportParamsDownload1 = string

// ExportParamsDownload2 defines parameters for Export.
type ExportParamsDownload2 = float32

// ExportParamsStrategies0 defines parameters for Export.
type ExportParamsStrategies0 = bool

// ExportParamsStrategies1 defines parameters for Export.
type ExportParamsStrategies1 = string

// ExportParamsStrategies2 defines parameters for Export.
type ExportParamsStrategies2 = float32

// ExportParamsFeatureToggles0 defines parameters for Export.
type ExportParamsFeatureToggles0 = bool

// ExportParamsFeatureToggles1 defines parameters for Export.
type ExportParamsFeatureToggles1 = string

// ExportParamsFeatureToggles2 defines parameters for Export.
type ExportParamsFeatureToggles2 = float32

// ExportParamsProjects0 defines parameters for Export.
type ExportParamsProjects0 = bool

// ExportParamsProjects1 defines parameters for Export.
type ExportParamsProjects1 = string

// ExportParamsProjects2 defines parameters for Export.
type ExportParamsProjects2 = float32

// ExportParamsTags0 defines parameters for Export.
type ExportParamsTags0 = bool

// ExportParamsTags1 defines parameters for Export.
type ExportParamsTags1 = string

// ExportParamsTags2 defines parameters for Export.
type ExportParamsTags2 = float32

// ExportParamsEnvironments0 defines parameters for Export.
type ExportParamsEnvironments0 = bool

// ExportParamsEnvironments1 defines parameters for Export.
type ExportParamsEnvironments1 = string

// ExportParamsEnvironments2 defines parameters for Export.
type ExportParamsEnvironments2 = float32

// SearchUsersParams defines parameters for SearchUsers.
type SearchUsersParams struct {
	// Q The pattern to search in the username or email
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// CreateAddonJSONRequestBody defines body for CreateAddon for application/json ContentType.
type CreateAddonJSONRequestBody = AddonCreateUpdateSchema

// UpdateAddonJSONRequestBody defines body for UpdateAddon for application/json ContentType.
type UpdateAddonJSONRequestBody = AddonCreateUpdateSchema

// CreateApiTokenJSONRequestBody defines body for CreateApiToken for application/json ContentType.
type CreateApiTokenJSONRequestBody = CreateApiTokenSchema

// UpdateApiTokenJSONRequestBody defines body for UpdateApiToken for application/json ContentType.
type UpdateApiTokenJSONRequestBody = UpdateApiTokenSchema

// ValidateConstraintJSONRequestBody defines body for ValidateConstraint for application/json ContentType.
type ValidateConstraintJSONRequestBody = ConstraintSchema

// CreateContextFieldJSONRequestBody defines body for CreateContextField for application/json ContentType.
type CreateContextFieldJSONRequestBody = CreateContextFieldSchema

// ValidateJSONRequestBody defines body for Validate for application/json ContentType.
type ValidateJSONRequestBody = NameSchema

// UpdateContextFieldJSONRequestBody defines body for UpdateContextField for application/json ContentType.
type UpdateContextFieldJSONRequestBody = UpdateContextFieldSchema

// UpdateSortOrderJSONRequestBody defines body for UpdateSortOrder for application/json ContentType.
type UpdateSortOrderJSONRequestBody = SortOrderSchema

// SearchEventsJSONRequestBody defines body for SearchEvents for application/json ContentType.
type SearchEventsJSONRequestBody = SearchEventsSchema

// UpdateFeatureTypeLifetimeJSONRequestBody defines body for UpdateFeatureTypeLifetime for application/json ContentType.
type UpdateFeatureTypeLifetimeJSONRequestBody = UpdateFeatureTypeLifetimeSchema

// ExportFeaturesJSONRequestBody defines body for ExportFeatures for application/json ContentType.
type ExportFeaturesJSONRequestBody = ExportQuerySchema

// ImportTogglesJSONRequestBody defines body for ImportToggles for application/json ContentType.
type ImportTogglesJSONRequestBody = ImportTogglesSchema

// ValidateImportJSONRequestBody defines body for ValidateImport for application/json ContentType.
type ValidateImportJSONRequestBody = ImportTogglesSchema

// ValidateFeatureJSONRequestBody defines body for ValidateFeature for application/json ContentType.
type ValidateFeatureJSONRequestBody = ValidateFeatureSchema

// AddTagJSONRequestBody defines body for AddTag for application/json ContentType.
type AddTagJSONRequestBody = TagSchema

// UpdateTagsJSONRequestBody defines body for UpdateTags for application/json ContentType.
type UpdateTagsJSONRequestBody = UpdateTagsSchema

// CreateFeedbackJSONRequestBody defines body for CreateFeedback for application/json ContentType.
type CreateFeedbackJSONRequestBody = FeedbackCreateSchema

// UpdateFeedbackJSONRequestBody defines body for UpdateFeedback for application/json ContentType.
type UpdateFeedbackJSONRequestBody = FeedbackUpdateSchema

// CreatePublicSignupTokenJSONRequestBody defines body for CreatePublicSignupToken for application/json ContentType.
type CreatePublicSignupTokenJSONRequestBody = PublicSignupTokenCreateSchema

// UpdatePublicSignupTokenJSONRequestBody defines body for UpdatePublicSignupToken for application/json ContentType.
type UpdatePublicSignupTokenJSONRequestBody = PublicSignupTokenUpdateSchema

// ToggleMaintenanceJSONRequestBody defines body for ToggleMaintenance for application/json ContentType.
type ToggleMaintenanceJSONRequestBody = ToggleMaintenanceSchema

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody = CreateApplicationSchema

// GetPlaygroundJSONRequestBody defines body for GetPlayground for application/json ContentType.
type GetPlaygroundJSONRequestBody = PlaygroundRequestSchema

// GetAdvancedPlaygroundJSONRequestBody defines body for GetAdvancedPlayground for application/json ContentType.
type GetAdvancedPlaygroundJSONRequestBody = AdvancedPlaygroundRequestSchema

// CreateProjectApiTokenJSONRequestBody defines body for CreateProjectApiToken for application/json ContentType.
type CreateProjectApiTokenJSONRequestBody = CreateApiTokenSchema

// ArchiveFeaturesJSONRequestBody defines body for ArchiveFeatures for application/json ContentType.
type ArchiveFeaturesJSONRequestBody = BatchFeaturesSchema

// ValidateArchiveFeaturesJSONRequestBody defines body for ValidateArchiveFeatures for application/json ContentType.
type ValidateArchiveFeaturesJSONRequestBody = BatchFeaturesSchema

// BulkToggleFeaturesEnvironmentOffJSONRequestBody defines body for BulkToggleFeaturesEnvironmentOff for application/json ContentType.
type BulkToggleFeaturesEnvironmentOffJSONRequestBody = BulkToggleFeaturesSchema

// BulkToggleFeaturesEnvironmentOnJSONRequestBody defines body for BulkToggleFeaturesEnvironmentOn for application/json ContentType.
type BulkToggleFeaturesEnvironmentOnJSONRequestBody = BulkToggleFeaturesSchema

// DeleteFeaturesJSONRequestBody defines body for DeleteFeatures for application/json ContentType.
type DeleteFeaturesJSONRequestBody = BatchFeaturesSchema

// AddEnvironmentToProjectJSONRequestBody defines body for AddEnvironmentToProject for application/json ContentType.
type AddEnvironmentToProjectJSONRequestBody = ProjectEnvironmentSchema

// AddDefaultStrategyToProjectEnvironmentJSONRequestBody defines body for AddDefaultStrategyToProjectEnvironment for application/json ContentType.
type AddDefaultStrategyToProjectEnvironmentJSONRequestBody = CreateFeatureStrategySchema

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = CreateFeatureSchema

// PatchFeatureJSONRequestBody defines body for PatchFeature for application/json ContentType.
type PatchFeatureJSONRequestBody = PatchesSchema

// UpdateFeatureJSONRequestBody defines body for UpdateFeature for application/json ContentType.
type UpdateFeatureJSONRequestBody = UpdateFeatureSchema

// CloneFeatureJSONRequestBody defines body for CloneFeature for application/json ContentType.
type CloneFeatureJSONRequestBody = CloneFeatureSchema

// AddFeatureDependencyJSONRequestBody defines body for AddFeatureDependency for application/json ContentType.
type AddFeatureDependencyJSONRequestBody = CreateDependentFeatureSchema

// AddFeatureStrategyJSONRequestBody defines body for AddFeatureStrategy for application/json ContentType.
type AddFeatureStrategyJSONRequestBody = CreateFeatureStrategySchema

// SetStrategySortOrderJSONRequestBody defines body for SetStrategySortOrder for application/json ContentType.
type SetStrategySortOrderJSONRequestBody = SetStrategySortOrderSchema

// PatchFeatureStrategyJSONRequestBody defines body for PatchFeatureStrategy for application/json ContentType.
type PatchFeatureStrategyJSONRequestBody = PatchesSchema

// UpdateFeatureStrategyJSONRequestBody defines body for UpdateFeatureStrategy for application/json ContentType.
type UpdateFeatureStrategyJSONRequestBody = UpdateFeatureStrategySchema

// PatchEnvironmentsFeatureVariantsJSONRequestBody defines body for PatchEnvironmentsFeatureVariants for application/json ContentType.
type PatchEnvironmentsFeatureVariantsJSONRequestBody = PatchesSchema

// OverwriteEnvironmentFeatureVariantsJSONRequestBody defines body for OverwriteEnvironmentFeatureVariants for application/json ContentType.
type OverwriteEnvironmentFeatureVariantsJSONRequestBody = VariantsSchema

// PatchFeatureVariantsJSONRequestBody defines body for PatchFeatureVariants for application/json ContentType.
type PatchFeatureVariantsJSONRequestBody = PatchesSchema

// OverwriteFeatureVariantsJSONRequestBody defines body for OverwriteFeatureVariants for application/json ContentType.
type OverwriteFeatureVariantsJSONRequestBody = VariantsSchema

// OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody defines body for OverwriteFeatureVariantsOnEnvironments for application/json ContentType.
type OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody = PushVariantsSchema

// ReviveFeaturesJSONRequestBody defines body for ReviveFeatures for application/json ContentType.
type ReviveFeaturesJSONRequestBody = BatchFeaturesSchema

// StaleFeaturesJSONRequestBody defines body for StaleFeatures for application/json ContentType.
type StaleFeaturesJSONRequestBody = BatchStaleSchema

// AddTagToFeaturesJSONRequestBody defines body for AddTagToFeatures for application/json ContentType.
type AddTagToFeaturesJSONRequestBody = TagsBulkAddSchema

// CreateSegmentJSONRequestBody defines body for CreateSegment for application/json ContentType.
type CreateSegmentJSONRequestBody = UpsertSegmentSchema

// UpdateFeatureStrategySegmentsJSONRequestBody defines body for UpdateFeatureStrategySegments for application/json ContentType.
type UpdateFeatureStrategySegmentsJSONRequestBody = UpdateFeatureStrategySegmentsSchema

// ValidateSegmentJSONRequestBody defines body for ValidateSegment for application/json ContentType.
type ValidateSegmentJSONRequestBody = NameSchema

// UpdateSegmentJSONRequestBody defines body for UpdateSegment for application/json ContentType.
type UpdateSegmentJSONRequestBody = UpsertSegmentSchema

// ImportJSONRequestBody defines body for Import for application/json ContentType.
type ImportJSONRequestBody = StateSchema

// CreateStrategyJSONRequestBody defines body for CreateStrategy for application/json ContentType.
type CreateStrategyJSONRequestBody = CreateStrategySchema

// UpdateStrategyJSONRequestBody defines body for UpdateStrategy for application/json ContentType.
type UpdateStrategyJSONRequestBody = UpdateStrategySchema

// CreateTagTypeJSONRequestBody defines body for CreateTagType for application/json ContentType.
type CreateTagTypeJSONRequestBody = TagTypeSchema

// ValidateTagTypeJSONRequestBody defines body for ValidateTagType for application/json ContentType.
type ValidateTagTypeJSONRequestBody = TagTypeSchema

// UpdateTagTypeJSONRequestBody defines body for UpdateTagType for application/json ContentType.
type UpdateTagTypeJSONRequestBody = UpdateTagTypeSchema

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody = TagSchema

// SetUiConfigJSONRequestBody defines body for SetUiConfig for application/json ContentType.
type SetUiConfigJSONRequestBody = SetUiConfigSchema

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserSchema

// ResetUserPasswordJSONRequestBody defines body for ResetUserPassword for application/json ContentType.
type ResetUserPasswordJSONRequestBody = IdSchema

// ValidateUserPasswordJSONRequestBody defines body for ValidateUserPassword for application/json ContentType.
type ValidateUserPasswordJSONRequestBody = PasswordSchema

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserSchema

// ChangeUserPasswordJSONRequestBody defines body for ChangeUserPassword for application/json ContentType.
type ChangeUserPasswordJSONRequestBody = PasswordSchema

// ChangeMyPasswordJSONRequestBody defines body for ChangeMyPassword for application/json ContentType.
type ChangeMyPasswordJSONRequestBody = PasswordSchema

// CreatePatJSONRequestBody defines body for CreatePat for application/json ContentType.
type CreatePatJSONRequestBody = PatSchema

// RegisterClientMetricsJSONRequestBody defines body for RegisterClientMetrics for application/json ContentType.
type RegisterClientMetricsJSONRequestBody = ClientMetricsSchema

// RegisterClientApplicationJSONRequestBody defines body for RegisterClientApplication for application/json ContentType.
type RegisterClientApplicationJSONRequestBody = ClientApplicationSchema

// RegisterFrontendMetricsJSONRequestBody defines body for RegisterFrontendMetrics for application/json ContentType.
type RegisterFrontendMetricsJSONRequestBody = ClientMetricsSchema

// RegisterFrontendClientJSONRequestBody defines body for RegisterFrontendClient for application/json ContentType.
type RegisterFrontendClientJSONRequestBody = ProxyClientSchema

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody = ChangePasswordSchema

// SendResetPasswordEmailJSONRequestBody defines body for SendResetPasswordEmail for application/json ContentType.
type SendResetPasswordEmailJSONRequestBody = EmailSchema

// ValidatePasswordJSONRequestBody defines body for ValidatePassword for application/json ContentType.
type ValidatePasswordJSONRequestBody = ValidatePasswordSchema

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginSchema

// BulkMetricsJSONRequestBody defines body for BulkMetrics for application/json ContentType.
type BulkMetricsJSONRequestBody = BulkMetricsSchema

// GetValidTokensJSONRequestBody defines body for GetValidTokens for application/json ContentType.
type GetValidTokensJSONRequestBody = TokenStringListSchema

// AddPublicSignupTokenUserJSONRequestBody defines body for AddPublicSignupTokenUser for application/json ContentType.
type AddPublicSignupTokenUserJSONRequestBody = CreateInvitedUserSchema

// Getter for additional properties for SdkContextSchema. Returns the specified
// element and whether it was found
func (a SdkContextSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SdkContextSchema
func (a *SdkContextSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SdkContextSchema to handle AdditionalProperties
func (a *SdkContextSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appName"]; found {
		err = json.Unmarshal(raw, &a.AppName)
		if err != nil {
			return fmt.Errorf("error reading 'appName': %w", err)
		}
		delete(object, "appName")
	}

	if raw, found := object["currentTime"]; found {
		err = json.Unmarshal(raw, &a.CurrentTime)
		if err != nil {
			return fmt.Errorf("error reading 'currentTime': %w", err)
		}
		delete(object, "currentTime")
	}

	if raw, found := object["environment"]; found {
		err = json.Unmarshal(raw, &a.Environment)
		if err != nil {
			return fmt.Errorf("error reading 'environment': %w", err)
		}
		delete(object, "environment")
	}

	if raw, found := object["properties"]; found {
		err = json.Unmarshal(raw, &a.Properties)
		if err != nil {
			return fmt.Errorf("error reading 'properties': %w", err)
		}
		delete(object, "properties")
	}

	if raw, found := object["remoteAddress"]; found {
		err = json.Unmarshal(raw, &a.RemoteAddress)
		if err != nil {
			return fmt.Errorf("error reading 'remoteAddress': %w", err)
		}
		delete(object, "remoteAddress")
	}

	if raw, found := object["sessionId"]; found {
		err = json.Unmarshal(raw, &a.SessionId)
		if err != nil {
			return fmt.Errorf("error reading 'sessionId': %w", err)
		}
		delete(object, "sessionId")
	}

	if raw, found := object["userId"]; found {
		err = json.Unmarshal(raw, &a.UserId)
		if err != nil {
			return fmt.Errorf("error reading 'userId': %w", err)
		}
		delete(object, "userId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SdkContextSchema to handle AdditionalProperties
func (a SdkContextSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["appName"], err = json.Marshal(a.AppName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'appName': %w", err)
	}

	if a.CurrentTime != nil {
		object["currentTime"], err = json.Marshal(a.CurrentTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentTime': %w", err)
		}
	}

	if a.Environment != nil {
		object["environment"], err = json.Marshal(a.Environment)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'environment': %w", err)
		}
	}

	if a.Properties != nil {
		object["properties"], err = json.Marshal(a.Properties)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'properties': %w", err)
		}
	}

	if a.RemoteAddress != nil {
		object["remoteAddress"], err = json.Marshal(a.RemoteAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remoteAddress': %w", err)
		}
	}

	if a.SessionId != nil {
		object["sessionId"], err = json.Marshal(a.SessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionId': %w", err)
		}
	}

	if a.UserId != nil {
		object["userId"], err = json.Marshal(a.UserId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SdkFlatContextSchema. Returns the specified
// element and whether it was found
func (a SdkFlatContextSchema) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SdkFlatContextSchema
func (a *SdkFlatContextSchema) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SdkFlatContextSchema to handle AdditionalProperties
func (a *SdkFlatContextSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["appName"]; found {
		err = json.Unmarshal(raw, &a.AppName)
		if err != nil {
			return fmt.Errorf("error reading 'appName': %w", err)
		}
		delete(object, "appName")
	}

	if raw, found := object["currentTime"]; found {
		err = json.Unmarshal(raw, &a.CurrentTime)
		if err != nil {
			return fmt.Errorf("error reading 'currentTime': %w", err)
		}
		delete(object, "currentTime")
	}

	if raw, found := object["environment"]; found {
		err = json.Unmarshal(raw, &a.Environment)
		if err != nil {
			return fmt.Errorf("error reading 'environment': %w", err)
		}
		delete(object, "environment")
	}

	if raw, found := object["remoteAddress"]; found {
		err = json.Unmarshal(raw, &a.RemoteAddress)
		if err != nil {
			return fmt.Errorf("error reading 'remoteAddress': %w", err)
		}
		delete(object, "remoteAddress")
	}

	if raw, found := object["sessionId"]; found {
		err = json.Unmarshal(raw, &a.SessionId)
		if err != nil {
			return fmt.Errorf("error reading 'sessionId': %w", err)
		}
		delete(object, "sessionId")
	}

	if raw, found := object["userId"]; found {
		err = json.Unmarshal(raw, &a.UserId)
		if err != nil {
			return fmt.Errorf("error reading 'userId': %w", err)
		}
		delete(object, "userId")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SdkFlatContextSchema to handle AdditionalProperties
func (a SdkFlatContextSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["appName"], err = json.Marshal(a.AppName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'appName': %w", err)
	}

	if a.CurrentTime != nil {
		object["currentTime"], err = json.Marshal(a.CurrentTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'currentTime': %w", err)
		}
	}

	if a.Environment != nil {
		object["environment"], err = json.Marshal(a.Environment)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'environment': %w", err)
		}
	}

	if a.RemoteAddress != nil {
		object["remoteAddress"], err = json.Marshal(a.RemoteAddress)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remoteAddress': %w", err)
		}
	}

	if a.SessionId != nil {
		object["sessionId"], err = json.Marshal(a.SessionId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sessionId': %w", err)
		}
	}

	if a.UserId != nil {
		object["userId"], err = json.Marshal(a.UserId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'userId': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0 returns the union data inside the AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result as a AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0
func (t AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result) AsAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0() (AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0, error) {
	var body AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0 overwrites any union data inside the AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result as the provided AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0
func (t *AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result) FromAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0(v AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0 performs a merge with any union data inside the AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result, using the provided AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0
func (t *AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result) MergeAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0(v AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1 returns the union data inside the AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result as a AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1
func (t AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result) AsAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1() (AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1, error) {
	var body AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1 overwrites any union data inside the AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result as the provided AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1
func (t *AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result) FromAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1(v AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1 performs a merge with any union data inside the AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result, using the provided AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1
func (t *AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result) MergeAdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1(v AdvancedPlaygroundEnvironmentFeatureSchemaStrategiesResult1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdvancedPlaygroundEnvironmentFeatureSchema_Strategies_Result) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAdvancedPlaygroundRequestSchemaProjects0 returns the union data inside the AdvancedPlaygroundRequestSchema_Projects as a AdvancedPlaygroundRequestSchemaProjects0
func (t AdvancedPlaygroundRequestSchema_Projects) AsAdvancedPlaygroundRequestSchemaProjects0() (AdvancedPlaygroundRequestSchemaProjects0, error) {
	var body AdvancedPlaygroundRequestSchemaProjects0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdvancedPlaygroundRequestSchemaProjects0 overwrites any union data inside the AdvancedPlaygroundRequestSchema_Projects as the provided AdvancedPlaygroundRequestSchemaProjects0
func (t *AdvancedPlaygroundRequestSchema_Projects) FromAdvancedPlaygroundRequestSchemaProjects0(v AdvancedPlaygroundRequestSchemaProjects0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdvancedPlaygroundRequestSchemaProjects0 performs a merge with any union data inside the AdvancedPlaygroundRequestSchema_Projects, using the provided AdvancedPlaygroundRequestSchemaProjects0
func (t *AdvancedPlaygroundRequestSchema_Projects) MergeAdvancedPlaygroundRequestSchemaProjects0(v AdvancedPlaygroundRequestSchemaProjects0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAdvancedPlaygroundRequestSchemaProjects1 returns the union data inside the AdvancedPlaygroundRequestSchema_Projects as a AdvancedPlaygroundRequestSchemaProjects1
func (t AdvancedPlaygroundRequestSchema_Projects) AsAdvancedPlaygroundRequestSchemaProjects1() (AdvancedPlaygroundRequestSchemaProjects1, error) {
	var body AdvancedPlaygroundRequestSchemaProjects1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdvancedPlaygroundRequestSchemaProjects1 overwrites any union data inside the AdvancedPlaygroundRequestSchema_Projects as the provided AdvancedPlaygroundRequestSchemaProjects1
func (t *AdvancedPlaygroundRequestSchema_Projects) FromAdvancedPlaygroundRequestSchemaProjects1(v AdvancedPlaygroundRequestSchemaProjects1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdvancedPlaygroundRequestSchemaProjects1 performs a merge with any union data inside the AdvancedPlaygroundRequestSchema_Projects, using the provided AdvancedPlaygroundRequestSchemaProjects1
func (t *AdvancedPlaygroundRequestSchema_Projects) MergeAdvancedPlaygroundRequestSchemaProjects1(v AdvancedPlaygroundRequestSchemaProjects1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AdvancedPlaygroundRequestSchema_Projects) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AdvancedPlaygroundRequestSchema_Projects) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsClientApplicationSchemaStarted0 returns the union data inside the ClientApplicationSchema_Started as a ClientApplicationSchemaStarted0
func (t ClientApplicationSchema_Started) AsClientApplicationSchemaStarted0() (ClientApplicationSchemaStarted0, error) {
	var body ClientApplicationSchemaStarted0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClientApplicationSchemaStarted0 overwrites any union data inside the ClientApplicationSchema_Started as the provided ClientApplicationSchemaStarted0
func (t *ClientApplicationSchema_Started) FromClientApplicationSchemaStarted0(v ClientApplicationSchemaStarted0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClientApplicationSchemaStarted0 performs a merge with any union data inside the ClientApplicationSchema_Started, using the provided ClientApplicationSchemaStarted0
func (t *ClientApplicationSchema_Started) MergeClientApplicationSchemaStarted0(v ClientApplicationSchemaStarted0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsClientApplicationSchemaStarted1 returns the union data inside the ClientApplicationSchema_Started as a ClientApplicationSchemaStarted1
func (t ClientApplicationSchema_Started) AsClientApplicationSchemaStarted1() (ClientApplicationSchemaStarted1, error) {
	var body ClientApplicationSchemaStarted1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClientApplicationSchemaStarted1 overwrites any union data inside the ClientApplicationSchema_Started as the provided ClientApplicationSchemaStarted1
func (t *ClientApplicationSchema_Started) FromClientApplicationSchemaStarted1(v ClientApplicationSchemaStarted1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClientApplicationSchemaStarted1 performs a merge with any union data inside the ClientApplicationSchema_Started, using the provided ClientApplicationSchemaStarted1
func (t *ClientApplicationSchema_Started) MergeClientApplicationSchemaStarted1(v ClientApplicationSchemaStarted1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ClientApplicationSchema_Started) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ClientApplicationSchema_Started) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateApiTokenSchema0 returns the union data inside the CreateApiTokenSchema as a CreateApiTokenSchema0
func (t CreateApiTokenSchema) AsCreateApiTokenSchema0() (CreateApiTokenSchema0, error) {
	var body CreateApiTokenSchema0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateApiTokenSchema0 overwrites any union data inside the CreateApiTokenSchema as the provided CreateApiTokenSchema0
func (t *CreateApiTokenSchema) FromCreateApiTokenSchema0(v CreateApiTokenSchema0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateApiTokenSchema0 performs a merge with any union data inside the CreateApiTokenSchema, using the provided CreateApiTokenSchema0
func (t *CreateApiTokenSchema) MergeCreateApiTokenSchema0(v CreateApiTokenSchema0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateApiTokenSchema1 returns the union data inside the CreateApiTokenSchema as a CreateApiTokenSchema1
func (t CreateApiTokenSchema) AsCreateApiTokenSchema1() (CreateApiTokenSchema1, error) {
	var body CreateApiTokenSchema1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateApiTokenSchema1 overwrites any union data inside the CreateApiTokenSchema as the provided CreateApiTokenSchema1
func (t *CreateApiTokenSchema) FromCreateApiTokenSchema1(v CreateApiTokenSchema1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateApiTokenSchema1 performs a merge with any union data inside the CreateApiTokenSchema, using the provided CreateApiTokenSchema1
func (t *CreateApiTokenSchema) MergeCreateApiTokenSchema1(v CreateApiTokenSchema1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateApiTokenSchema2 returns the union data inside the CreateApiTokenSchema as a CreateApiTokenSchema2
func (t CreateApiTokenSchema) AsCreateApiTokenSchema2() (CreateApiTokenSchema2, error) {
	var body CreateApiTokenSchema2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateApiTokenSchema2 overwrites any union data inside the CreateApiTokenSchema as the provided CreateApiTokenSchema2
func (t *CreateApiTokenSchema) FromCreateApiTokenSchema2(v CreateApiTokenSchema2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateApiTokenSchema2 performs a merge with any union data inside the CreateApiTokenSchema, using the provided CreateApiTokenSchema2
func (t *CreateApiTokenSchema) MergeCreateApiTokenSchema2(v CreateApiTokenSchema2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateApiTokenSchema3 returns the union data inside the CreateApiTokenSchema as a CreateApiTokenSchema3
func (t CreateApiTokenSchema) AsCreateApiTokenSchema3() (CreateApiTokenSchema3, error) {
	var body CreateApiTokenSchema3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateApiTokenSchema3 overwrites any union data inside the CreateApiTokenSchema as the provided CreateApiTokenSchema3
func (t *CreateApiTokenSchema) FromCreateApiTokenSchema3(v CreateApiTokenSchema3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateApiTokenSchema3 performs a merge with any union data inside the CreateApiTokenSchema, using the provided CreateApiTokenSchema3
func (t *CreateApiTokenSchema) MergeCreateApiTokenSchema3(v CreateApiTokenSchema3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateApiTokenSchema) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateApiTokenSchema) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateUserResponseSchemaRootRole0 returns the union data inside the CreateUserResponseSchema_RootRole as a CreateUserResponseSchemaRootRole0
func (t CreateUserResponseSchema_RootRole) AsCreateUserResponseSchemaRootRole0() (CreateUserResponseSchemaRootRole0, error) {
	var body CreateUserResponseSchemaRootRole0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateUserResponseSchemaRootRole0 overwrites any union data inside the CreateUserResponseSchema_RootRole as the provided CreateUserResponseSchemaRootRole0
func (t *CreateUserResponseSchema_RootRole) FromCreateUserResponseSchemaRootRole0(v CreateUserResponseSchemaRootRole0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateUserResponseSchemaRootRole0 performs a merge with any union data inside the CreateUserResponseSchema_RootRole, using the provided CreateUserResponseSchemaRootRole0
func (t *CreateUserResponseSchema_RootRole) MergeCreateUserResponseSchemaRootRole0(v CreateUserResponseSchemaRootRole0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateUserResponseSchemaRootRole1 returns the union data inside the CreateUserResponseSchema_RootRole as a CreateUserResponseSchemaRootRole1
func (t CreateUserResponseSchema_RootRole) AsCreateUserResponseSchemaRootRole1() (CreateUserResponseSchemaRootRole1, error) {
	var body CreateUserResponseSchemaRootRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateUserResponseSchemaRootRole1 overwrites any union data inside the CreateUserResponseSchema_RootRole as the provided CreateUserResponseSchemaRootRole1
func (t *CreateUserResponseSchema_RootRole) FromCreateUserResponseSchemaRootRole1(v CreateUserResponseSchemaRootRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateUserResponseSchemaRootRole1 performs a merge with any union data inside the CreateUserResponseSchema_RootRole, using the provided CreateUserResponseSchemaRootRole1
func (t *CreateUserResponseSchema_RootRole) MergeCreateUserResponseSchemaRootRole1(v CreateUserResponseSchemaRootRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateUserResponseSchema_RootRole) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateUserResponseSchema_RootRole) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateUserSchemaRootRole0 returns the union data inside the CreateUserSchema_RootRole as a CreateUserSchemaRootRole0
func (t CreateUserSchema_RootRole) AsCreateUserSchemaRootRole0() (CreateUserSchemaRootRole0, error) {
	var body CreateUserSchemaRootRole0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateUserSchemaRootRole0 overwrites any union data inside the CreateUserSchema_RootRole as the provided CreateUserSchemaRootRole0
func (t *CreateUserSchema_RootRole) FromCreateUserSchemaRootRole0(v CreateUserSchemaRootRole0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateUserSchemaRootRole0 performs a merge with any union data inside the CreateUserSchema_RootRole, using the provided CreateUserSchemaRootRole0
func (t *CreateUserSchema_RootRole) MergeCreateUserSchemaRootRole0(v CreateUserSchemaRootRole0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateUserSchemaRootRole1 returns the union data inside the CreateUserSchema_RootRole as a CreateUserSchemaRootRole1
func (t CreateUserSchema_RootRole) AsCreateUserSchemaRootRole1() (CreateUserSchemaRootRole1, error) {
	var body CreateUserSchemaRootRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateUserSchemaRootRole1 overwrites any union data inside the CreateUserSchema_RootRole as the provided CreateUserSchemaRootRole1
func (t *CreateUserSchema_RootRole) FromCreateUserSchemaRootRole1(v CreateUserSchemaRootRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateUserSchemaRootRole1 performs a merge with any union data inside the CreateUserSchema_RootRole, using the provided CreateUserSchemaRootRole1
func (t *CreateUserSchema_RootRole) MergeCreateUserSchemaRootRole1(v CreateUserSchemaRootRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateUserSchema_RootRole) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateUserSchema_RootRole) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDateSchema0 returns the union data inside the DateSchema as a DateSchema0
func (t DateSchema) AsDateSchema0() (DateSchema0, error) {
	var body DateSchema0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDateSchema0 overwrites any union data inside the DateSchema as the provided DateSchema0
func (t *DateSchema) FromDateSchema0(v DateSchema0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDateSchema0 performs a merge with any union data inside the DateSchema, using the provided DateSchema0
func (t *DateSchema) MergeDateSchema0(v DateSchema0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDateSchema1 returns the union data inside the DateSchema as a DateSchema1
func (t DateSchema) AsDateSchema1() (DateSchema1, error) {
	var body DateSchema1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDateSchema1 overwrites any union data inside the DateSchema as the provided DateSchema1
func (t *DateSchema) FromDateSchema1(v DateSchema1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDateSchema1 performs a merge with any union data inside the DateSchema, using the provided DateSchema1
func (t *DateSchema) MergeDateSchema1(v DateSchema1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DateSchema) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DateSchema) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExportQuerySchema0 returns the union data inside the ExportQuerySchema as a ExportQuerySchema0
func (t ExportQuerySchema) AsExportQuerySchema0() (ExportQuerySchema0, error) {
	var body ExportQuerySchema0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExportQuerySchema0 overwrites any union data inside the ExportQuerySchema as the provided ExportQuerySchema0
func (t *ExportQuerySchema) FromExportQuerySchema0(v ExportQuerySchema0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExportQuerySchema0 performs a merge with any union data inside the ExportQuerySchema, using the provided ExportQuerySchema0
func (t *ExportQuerySchema) MergeExportQuerySchema0(v ExportQuerySchema0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExportQuerySchema1 returns the union data inside the ExportQuerySchema as a ExportQuerySchema1
func (t ExportQuerySchema) AsExportQuerySchema1() (ExportQuerySchema1, error) {
	var body ExportQuerySchema1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExportQuerySchema1 overwrites any union data inside the ExportQuerySchema as the provided ExportQuerySchema1
func (t *ExportQuerySchema) FromExportQuerySchema1(v ExportQuerySchema1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExportQuerySchema1 performs a merge with any union data inside the ExportQuerySchema, using the provided ExportQuerySchema1
func (t *ExportQuerySchema) MergeExportQuerySchema1(v ExportQuerySchema1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExportQuerySchema2 returns the union data inside the ExportQuerySchema as a ExportQuerySchema2
func (t ExportQuerySchema) AsExportQuerySchema2() (ExportQuerySchema2, error) {
	var body ExportQuerySchema2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExportQuerySchema2 overwrites any union data inside the ExportQuerySchema as the provided ExportQuerySchema2
func (t *ExportQuerySchema) FromExportQuerySchema2(v ExportQuerySchema2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExportQuerySchema2 performs a merge with any union data inside the ExportQuerySchema, using the provided ExportQuerySchema2
func (t *ExportQuerySchema) MergeExportQuerySchema2(v ExportQuerySchema2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExportQuerySchema) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExportQuerySchema) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlaygroundFeatureSchemaStrategiesResult0 returns the union data inside the PlaygroundFeatureSchema_Strategies_Result as a PlaygroundFeatureSchemaStrategiesResult0
func (t PlaygroundFeatureSchema_Strategies_Result) AsPlaygroundFeatureSchemaStrategiesResult0() (PlaygroundFeatureSchemaStrategiesResult0, error) {
	var body PlaygroundFeatureSchemaStrategiesResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaygroundFeatureSchemaStrategiesResult0 overwrites any union data inside the PlaygroundFeatureSchema_Strategies_Result as the provided PlaygroundFeatureSchemaStrategiesResult0
func (t *PlaygroundFeatureSchema_Strategies_Result) FromPlaygroundFeatureSchemaStrategiesResult0(v PlaygroundFeatureSchemaStrategiesResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaygroundFeatureSchemaStrategiesResult0 performs a merge with any union data inside the PlaygroundFeatureSchema_Strategies_Result, using the provided PlaygroundFeatureSchemaStrategiesResult0
func (t *PlaygroundFeatureSchema_Strategies_Result) MergePlaygroundFeatureSchemaStrategiesResult0(v PlaygroundFeatureSchemaStrategiesResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaygroundFeatureSchemaStrategiesResult1 returns the union data inside the PlaygroundFeatureSchema_Strategies_Result as a PlaygroundFeatureSchemaStrategiesResult1
func (t PlaygroundFeatureSchema_Strategies_Result) AsPlaygroundFeatureSchemaStrategiesResult1() (PlaygroundFeatureSchemaStrategiesResult1, error) {
	var body PlaygroundFeatureSchemaStrategiesResult1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaygroundFeatureSchemaStrategiesResult1 overwrites any union data inside the PlaygroundFeatureSchema_Strategies_Result as the provided PlaygroundFeatureSchemaStrategiesResult1
func (t *PlaygroundFeatureSchema_Strategies_Result) FromPlaygroundFeatureSchemaStrategiesResult1(v PlaygroundFeatureSchemaStrategiesResult1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaygroundFeatureSchemaStrategiesResult1 performs a merge with any union data inside the PlaygroundFeatureSchema_Strategies_Result, using the provided PlaygroundFeatureSchemaStrategiesResult1
func (t *PlaygroundFeatureSchema_Strategies_Result) MergePlaygroundFeatureSchemaStrategiesResult1(v PlaygroundFeatureSchemaStrategiesResult1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlaygroundFeatureSchema_Strategies_Result) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlaygroundFeatureSchema_Strategies_Result) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlaygroundRequestSchemaProjects0 returns the union data inside the PlaygroundRequestSchema_Projects as a PlaygroundRequestSchemaProjects0
func (t PlaygroundRequestSchema_Projects) AsPlaygroundRequestSchemaProjects0() (PlaygroundRequestSchemaProjects0, error) {
	var body PlaygroundRequestSchemaProjects0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaygroundRequestSchemaProjects0 overwrites any union data inside the PlaygroundRequestSchema_Projects as the provided PlaygroundRequestSchemaProjects0
func (t *PlaygroundRequestSchema_Projects) FromPlaygroundRequestSchemaProjects0(v PlaygroundRequestSchemaProjects0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaygroundRequestSchemaProjects0 performs a merge with any union data inside the PlaygroundRequestSchema_Projects, using the provided PlaygroundRequestSchemaProjects0
func (t *PlaygroundRequestSchema_Projects) MergePlaygroundRequestSchemaProjects0(v PlaygroundRequestSchemaProjects0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaygroundRequestSchemaProjects1 returns the union data inside the PlaygroundRequestSchema_Projects as a PlaygroundRequestSchemaProjects1
func (t PlaygroundRequestSchema_Projects) AsPlaygroundRequestSchemaProjects1() (PlaygroundRequestSchemaProjects1, error) {
	var body PlaygroundRequestSchemaProjects1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaygroundRequestSchemaProjects1 overwrites any union data inside the PlaygroundRequestSchema_Projects as the provided PlaygroundRequestSchemaProjects1
func (t *PlaygroundRequestSchema_Projects) FromPlaygroundRequestSchemaProjects1(v PlaygroundRequestSchemaProjects1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaygroundRequestSchemaProjects1 performs a merge with any union data inside the PlaygroundRequestSchema_Projects, using the provided PlaygroundRequestSchemaProjects1
func (t *PlaygroundRequestSchema_Projects) MergePlaygroundRequestSchemaProjects1(v PlaygroundRequestSchemaProjects1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlaygroundRequestSchema_Projects) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlaygroundRequestSchema_Projects) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlaygroundStrategySchemaResult0Enabled0 returns the union data inside the PlaygroundStrategySchema_Result_0_Enabled as a PlaygroundStrategySchemaResult0Enabled0
func (t PlaygroundStrategySchema_Result_0_Enabled) AsPlaygroundStrategySchemaResult0Enabled0() (PlaygroundStrategySchemaResult0Enabled0, error) {
	var body PlaygroundStrategySchemaResult0Enabled0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaygroundStrategySchemaResult0Enabled0 overwrites any union data inside the PlaygroundStrategySchema_Result_0_Enabled as the provided PlaygroundStrategySchemaResult0Enabled0
func (t *PlaygroundStrategySchema_Result_0_Enabled) FromPlaygroundStrategySchemaResult0Enabled0(v PlaygroundStrategySchemaResult0Enabled0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaygroundStrategySchemaResult0Enabled0 performs a merge with any union data inside the PlaygroundStrategySchema_Result_0_Enabled, using the provided PlaygroundStrategySchemaResult0Enabled0
func (t *PlaygroundStrategySchema_Result_0_Enabled) MergePlaygroundStrategySchemaResult0Enabled0(v PlaygroundStrategySchemaResult0Enabled0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaygroundStrategySchemaResult0Enabled1 returns the union data inside the PlaygroundStrategySchema_Result_0_Enabled as a PlaygroundStrategySchemaResult0Enabled1
func (t PlaygroundStrategySchema_Result_0_Enabled) AsPlaygroundStrategySchemaResult0Enabled1() (PlaygroundStrategySchemaResult0Enabled1, error) {
	var body PlaygroundStrategySchemaResult0Enabled1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaygroundStrategySchemaResult0Enabled1 overwrites any union data inside the PlaygroundStrategySchema_Result_0_Enabled as the provided PlaygroundStrategySchemaResult0Enabled1
func (t *PlaygroundStrategySchema_Result_0_Enabled) FromPlaygroundStrategySchemaResult0Enabled1(v PlaygroundStrategySchemaResult0Enabled1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaygroundStrategySchemaResult0Enabled1 performs a merge with any union data inside the PlaygroundStrategySchema_Result_0_Enabled, using the provided PlaygroundStrategySchemaResult0Enabled1
func (t *PlaygroundStrategySchema_Result_0_Enabled) MergePlaygroundStrategySchemaResult0Enabled1(v PlaygroundStrategySchemaResult0Enabled1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlaygroundStrategySchema_Result_0_Enabled) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlaygroundStrategySchema_Result_0_Enabled) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlaygroundStrategySchemaResult0 returns the union data inside the PlaygroundStrategySchema_Result as a PlaygroundStrategySchemaResult0
func (t PlaygroundStrategySchema_Result) AsPlaygroundStrategySchemaResult0() (PlaygroundStrategySchemaResult0, error) {
	var body PlaygroundStrategySchemaResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaygroundStrategySchemaResult0 overwrites any union data inside the PlaygroundStrategySchema_Result as the provided PlaygroundStrategySchemaResult0
func (t *PlaygroundStrategySchema_Result) FromPlaygroundStrategySchemaResult0(v PlaygroundStrategySchemaResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaygroundStrategySchemaResult0 performs a merge with any union data inside the PlaygroundStrategySchema_Result, using the provided PlaygroundStrategySchemaResult0
func (t *PlaygroundStrategySchema_Result) MergePlaygroundStrategySchemaResult0(v PlaygroundStrategySchemaResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaygroundStrategySchemaResult1 returns the union data inside the PlaygroundStrategySchema_Result as a PlaygroundStrategySchemaResult1
func (t PlaygroundStrategySchema_Result) AsPlaygroundStrategySchemaResult1() (PlaygroundStrategySchemaResult1, error) {
	var body PlaygroundStrategySchemaResult1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaygroundStrategySchemaResult1 overwrites any union data inside the PlaygroundStrategySchema_Result as the provided PlaygroundStrategySchemaResult1
func (t *PlaygroundStrategySchema_Result) FromPlaygroundStrategySchemaResult1(v PlaygroundStrategySchemaResult1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaygroundStrategySchemaResult1 performs a merge with any union data inside the PlaygroundStrategySchema_Result, using the provided PlaygroundStrategySchemaResult1
func (t *PlaygroundStrategySchema_Result) MergePlaygroundStrategySchemaResult1(v PlaygroundStrategySchemaResult1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlaygroundStrategySchema_Result) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlaygroundStrategySchema_Result) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProxyClientSchemaStarted0 returns the union data inside the ProxyClientSchema_Started as a ProxyClientSchemaStarted0
func (t ProxyClientSchema_Started) AsProxyClientSchemaStarted0() (ProxyClientSchemaStarted0, error) {
	var body ProxyClientSchemaStarted0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProxyClientSchemaStarted0 overwrites any union data inside the ProxyClientSchema_Started as the provided ProxyClientSchemaStarted0
func (t *ProxyClientSchema_Started) FromProxyClientSchemaStarted0(v ProxyClientSchemaStarted0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProxyClientSchemaStarted0 performs a merge with any union data inside the ProxyClientSchema_Started, using the provided ProxyClientSchemaStarted0
func (t *ProxyClientSchema_Started) MergeProxyClientSchemaStarted0(v ProxyClientSchemaStarted0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProxyClientSchemaStarted1 returns the union data inside the ProxyClientSchema_Started as a ProxyClientSchemaStarted1
func (t ProxyClientSchema_Started) AsProxyClientSchemaStarted1() (ProxyClientSchemaStarted1, error) {
	var body ProxyClientSchemaStarted1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProxyClientSchemaStarted1 overwrites any union data inside the ProxyClientSchema_Started as the provided ProxyClientSchemaStarted1
func (t *ProxyClientSchema_Started) FromProxyClientSchemaStarted1(v ProxyClientSchemaStarted1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProxyClientSchemaStarted1 performs a merge with any union data inside the ProxyClientSchema_Started, using the provided ProxyClientSchemaStarted1
func (t *ProxyClientSchema_Started) MergeProxyClientSchemaStarted1(v ProxyClientSchemaStarted1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProxyClientSchema_Started) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProxyClientSchema_Started) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUiConfigSchemaFlags0 returns the union data inside the UiConfigSchema_Flags_AdditionalProperties as a UiConfigSchemaFlags0
func (t UiConfigSchema_Flags_AdditionalProperties) AsUiConfigSchemaFlags0() (UiConfigSchemaFlags0, error) {
	var body UiConfigSchemaFlags0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUiConfigSchemaFlags0 overwrites any union data inside the UiConfigSchema_Flags_AdditionalProperties as the provided UiConfigSchemaFlags0
func (t *UiConfigSchema_Flags_AdditionalProperties) FromUiConfigSchemaFlags0(v UiConfigSchemaFlags0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUiConfigSchemaFlags0 performs a merge with any union data inside the UiConfigSchema_Flags_AdditionalProperties, using the provided UiConfigSchemaFlags0
func (t *UiConfigSchema_Flags_AdditionalProperties) MergeUiConfigSchemaFlags0(v UiConfigSchemaFlags0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVariantFlagSchema returns the union data inside the UiConfigSchema_Flags_AdditionalProperties as a VariantFlagSchema
func (t UiConfigSchema_Flags_AdditionalProperties) AsVariantFlagSchema() (VariantFlagSchema, error) {
	var body VariantFlagSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVariantFlagSchema overwrites any union data inside the UiConfigSchema_Flags_AdditionalProperties as the provided VariantFlagSchema
func (t *UiConfigSchema_Flags_AdditionalProperties) FromVariantFlagSchema(v VariantFlagSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVariantFlagSchema performs a merge with any union data inside the UiConfigSchema_Flags_AdditionalProperties, using the provided VariantFlagSchema
func (t *UiConfigSchema_Flags_AdditionalProperties) MergeVariantFlagSchema(v VariantFlagSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UiConfigSchema_Flags_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UiConfigSchema_Flags_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateUserSchemaRootRole0 returns the union data inside the UpdateUserSchema_RootRole as a UpdateUserSchemaRootRole0
func (t UpdateUserSchema_RootRole) AsUpdateUserSchemaRootRole0() (UpdateUserSchemaRootRole0, error) {
	var body UpdateUserSchemaRootRole0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateUserSchemaRootRole0 overwrites any union data inside the UpdateUserSchema_RootRole as the provided UpdateUserSchemaRootRole0
func (t *UpdateUserSchema_RootRole) FromUpdateUserSchemaRootRole0(v UpdateUserSchemaRootRole0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateUserSchemaRootRole0 performs a merge with any union data inside the UpdateUserSchema_RootRole, using the provided UpdateUserSchemaRootRole0
func (t *UpdateUserSchema_RootRole) MergeUpdateUserSchemaRootRole0(v UpdateUserSchemaRootRole0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateUserSchemaRootRole1 returns the union data inside the UpdateUserSchema_RootRole as a UpdateUserSchemaRootRole1
func (t UpdateUserSchema_RootRole) AsUpdateUserSchemaRootRole1() (UpdateUserSchemaRootRole1, error) {
	var body UpdateUserSchemaRootRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateUserSchemaRootRole1 overwrites any union data inside the UpdateUserSchema_RootRole as the provided UpdateUserSchemaRootRole1
func (t *UpdateUserSchema_RootRole) FromUpdateUserSchemaRootRole1(v UpdateUserSchemaRootRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateUserSchemaRootRole1 performs a merge with any union data inside the UpdateUserSchema_RootRole, using the provided UpdateUserSchemaRootRole1
func (t *UpdateUserSchema_RootRole) MergeUpdateUserSchemaRootRole1(v UpdateUserSchemaRootRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateUserSchema_RootRole) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateUserSchema_RootRole) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAddons request
	GetAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAddonWithBody request with any body
	CreateAddonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAddon(ctx context.Context, body CreateAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAddon request
	DeleteAddon(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAddon request
	GetAddon(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAddonWithBody request with any body
	UpdateAddonWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAddon(ctx context.Context, id string, body UpdateAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllApiTokens request
	GetAllApiTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiTokenWithBody request with any body
	CreateApiTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiToken(ctx context.Context, body CreateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTokensByName request
	GetApiTokensByName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiToken request
	DeleteApiToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiTokenWithBody request with any body
	UpdateApiTokenWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiToken(ctx context.Context, token string, body UpdateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArchivedFeatures request
	GetArchivedFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArchivedFeaturesByProjectId request
	GetArchivedFeaturesByProjectId(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReviveFeature request
	ReviveFeature(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeature request
	DeleteFeature(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureUsageSummary request
	GetFeatureUsageSummary(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRawFeatureMetrics request
	GetRawFeatureMetrics(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateConstraintWithBody request with any body
	ValidateConstraintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateConstraint(ctx context.Context, body ValidateConstraintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContextFields request
	GetContextFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContextFieldWithBody request with any body
	CreateContextFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContextField(ctx context.Context, body CreateContextFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateWithBody request with any body
	ValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Validate(ctx context.Context, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContextField request
	DeleteContextField(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContextField request
	GetContextField(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContextFieldWithBody request with any body
	UpdateContextFieldWithBody(ctx context.Context, contextField string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContextField(ctx context.Context, contextField string, body UpdateContextFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStrategiesByContextField request
	GetStrategiesByContextField(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEnvironments request
	GetAllEnvironments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectEnvironments request
	GetProjectEnvironments(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSortOrderWithBody request with any body
	UpdateSortOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSortOrder(ctx context.Context, body UpdateSortOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleEnvironmentOff request
	ToggleEnvironmentOff(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleEnvironmentOn request
	ToggleEnvironmentOn(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchEventsWithBody request with any body
	SearchEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchEvents(ctx context.Context, body SearchEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventsForToggle request
	GetEventsForToggle(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllFeatureTypes request
	GetAllFeatureTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeatureTypeLifetimeWithBody request with any body
	UpdateFeatureTypeLifetimeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeatureTypeLifetime(ctx context.Context, id string, body UpdateFeatureTypeLifetimeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllToggles request
	GetAllToggles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportFeaturesWithBody request with any body
	ExportFeaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExportFeatures(ctx context.Context, body ExportFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportTogglesWithBody request with any body
	ImportTogglesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportToggles(ctx context.Context, body ImportTogglesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateImportWithBody request with any body
	ValidateImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateImport(ctx context.Context, body ValidateImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateFeatureWithBody request with any body
	ValidateFeatureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateFeature(ctx context.Context, body ValidateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTags request
	ListTags(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTagWithBody request with any body
	AddTagWithBody(ctx context.Context, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTag(ctx context.Context, featureName string, body AddTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTagsWithBody request with any body
	UpdateTagsWithBody(ctx context.Context, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTags(ctx context.Context, featureName string, body UpdateTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveTag request
	RemoveTag(ctx context.Context, featureName string, pType string, value string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFeedbackWithBody request with any body
	CreateFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFeedback(ctx context.Context, body CreateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeedbackWithBody request with any body
	UpdateFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeedback(ctx context.Context, id string, body UpdateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstanceAdminStats request
	GetInstanceAdminStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstanceAdminStatsCsv request
	GetInstanceAdminStatsCsv(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllPublicSignupTokens request
	GetAllPublicSignupTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePublicSignupTokenWithBody request with any body
	CreatePublicSignupTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePublicSignupToken(ctx context.Context, body CreatePublicSignupTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicSignupToken request
	GetPublicSignupToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePublicSignupTokenWithBody request with any body
	UpdatePublicSignupTokenWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePublicSignupToken(ctx context.Context, token string, body UpdatePublicSignupTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMaintenance request
	GetMaintenance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleMaintenanceWithBody request with any body
	ToggleMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToggleMaintenance(ctx context.Context, body ToggleMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplications request
	GetApplications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplication request
	DeleteApplication(ctx context.Context, appName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplication request
	GetApplication(ctx context.Context, appName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationWithBody request with any body
	CreateApplicationWithBody(ctx context.Context, appName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplication(ctx context.Context, appName string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlaygroundWithBody request with any body
	GetPlaygroundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPlayground(ctx context.Context, body GetPlaygroundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdvancedPlaygroundWithBody request with any body
	GetAdvancedPlaygroundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetAdvancedPlayground(ctx context.Context, body GetAdvancedPlaygroundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeprecatedProjectOverview request
	GetDeprecatedProjectOverview(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectApiTokens request
	GetProjectApiTokens(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectApiTokenWithBody request with any body
	CreateProjectApiTokenWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectApiToken(ctx context.Context, projectId string, body CreateProjectApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectApiToken request
	DeleteProjectApiToken(ctx context.Context, projectId string, token string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveFeaturesWithBody request with any body
	ArchiveFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArchiveFeatures(ctx context.Context, projectId string, body ArchiveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateArchiveFeaturesWithBody request with any body
	ValidateArchiveFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateArchiveFeatures(ctx context.Context, projectId string, body ValidateArchiveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkToggleFeaturesEnvironmentOffWithBody request with any body
	BulkToggleFeaturesEnvironmentOffWithBody(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkToggleFeaturesEnvironmentOff(ctx context.Context, projectId string, environment string, body BulkToggleFeaturesEnvironmentOffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkToggleFeaturesEnvironmentOnWithBody request with any body
	BulkToggleFeaturesEnvironmentOnWithBody(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkToggleFeaturesEnvironmentOn(ctx context.Context, projectId string, environment string, body BulkToggleFeaturesEnvironmentOnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeaturesWithBody request with any body
	DeleteFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteFeatures(ctx context.Context, projectId string, body DeleteFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckDependenciesExist request
	CheckDependenciesExist(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectDora request
	GetProjectDora(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddEnvironmentToProjectWithBody request with any body
	AddEnvironmentToProjectWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddEnvironmentToProject(ctx context.Context, projectId string, body AddEnvironmentToProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveEnvironmentFromProject request
	RemoveEnvironmentFromProject(ctx context.Context, projectId string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDefaultStrategyToProjectEnvironmentWithBody request with any body
	AddDefaultStrategyToProjectEnvironmentWithBody(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDefaultStrategyToProjectEnvironment(ctx context.Context, projectId string, environment string, body AddDefaultStrategyToProjectEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveFavoriteProject request
	RemoveFavoriteProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddFavoriteProject request
	AddFavoriteProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatures request
	GetFeatures(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFeatureWithBody request with any body
	CreateFeatureWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFeature(ctx context.Context, projectId string, body CreateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveFeature request
	ArchiveFeature(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeature request
	GetFeature(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFeatureWithBody request with any body
	PatchFeatureWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFeature(ctx context.Context, projectId string, featureName string, body PatchFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeatureWithBody request with any body
	UpdateFeatureWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeature(ctx context.Context, projectId string, featureName string, body UpdateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneFeatureWithBody request with any body
	CloneFeatureWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CloneFeature(ctx context.Context, projectId string, featureName string, body CloneFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeatureDependencies request
	DeleteFeatureDependencies(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddFeatureDependencyWithBody request with any body
	AddFeatureDependencyWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddFeatureDependency(ctx context.Context, projectId string, featureName string, body AddFeatureDependencyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeatureDependency request
	DeleteFeatureDependency(ctx context.Context, projectId string, featureName string, parent string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureEnvironment request
	GetFeatureEnvironment(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleFeatureEnvironmentOff request
	ToggleFeatureEnvironmentOff(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleFeatureEnvironmentOn request
	ToggleFeatureEnvironmentOn(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureStrategies request
	GetFeatureStrategies(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddFeatureStrategyWithBody request with any body
	AddFeatureStrategyWithBody(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, body AddFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetStrategySortOrderWithBody request with any body
	SetStrategySortOrderWithBody(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetStrategySortOrder(ctx context.Context, projectId string, featureName string, environment string, body SetStrategySortOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeatureStrategy request
	DeleteFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, strategyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureStrategy request
	GetFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, strategyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFeatureStrategyWithBody request with any body
	PatchFeatureStrategyWithBody(ctx context.Context, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, strategyId string, body PatchFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeatureStrategyWithBody request with any body
	UpdateFeatureStrategyWithBody(ctx context.Context, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, strategyId string, body UpdateFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentFeatureVariants request
	GetEnvironmentFeatureVariants(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchEnvironmentsFeatureVariantsWithBody request with any body
	PatchEnvironmentsFeatureVariantsWithBody(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchEnvironmentsFeatureVariants(ctx context.Context, projectId string, featureName string, environment string, body PatchEnvironmentsFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OverwriteEnvironmentFeatureVariantsWithBody request with any body
	OverwriteEnvironmentFeatureVariantsWithBody(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OverwriteEnvironmentFeatureVariants(ctx context.Context, projectId string, featureName string, environment string, body OverwriteEnvironmentFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveFavoriteFeature request
	RemoveFavoriteFeature(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddFavoriteFeature request
	AddFavoriteFeature(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListParentOptions request
	ListParentOptions(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatureVariants request
	GetFeatureVariants(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFeatureVariantsWithBody request with any body
	PatchFeatureVariantsWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFeatureVariants(ctx context.Context, projectId string, featureName string, body PatchFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OverwriteFeatureVariantsWithBody request with any body
	OverwriteFeatureVariantsWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OverwriteFeatureVariants(ctx context.Context, projectId string, featureName string, body OverwriteFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OverwriteFeatureVariantsOnEnvironmentsWithBody request with any body
	OverwriteFeatureVariantsOnEnvironmentsWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OverwriteFeatureVariantsOnEnvironments(ctx context.Context, projectId string, featureName string, body OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectHealthReport request
	GetProjectHealthReport(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectOverview request
	GetProjectOverview(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReviveFeaturesWithBody request with any body
	ReviveFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReviveFeatures(ctx context.Context, projectId string, body ReviveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StaleFeaturesWithBody request with any body
	StaleFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StaleFeatures(ctx context.Context, projectId string, body StaleFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTagToFeaturesWithBody request with any body
	AddTagToFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTagToFeatures(ctx context.Context, projectId string, body AddTagToFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchFeatures request
	SearchFeatures(ctx context.Context, params *SearchFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegments request
	GetSegments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSegmentWithBody request with any body
	CreateSegmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSegment(ctx context.Context, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeatureStrategySegmentsWithBody request with any body
	UpdateFeatureStrategySegmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeatureStrategySegments(ctx context.Context, body UpdateFeatureStrategySegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentsByStrategyId request
	GetSegmentsByStrategyId(ctx context.Context, strategyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateSegmentWithBody request with any body
	ValidateSegmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateSegment(ctx context.Context, body ValidateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveSegment request
	RemoveSegment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegment request
	GetSegment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSegmentWithBody request with any body
	UpdateSegmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSegment(ctx context.Context, id string, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStrategiesBySegmentId request
	GetStrategiesBySegmentId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSplashSettings request
	UpdateSplashSettings(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Export request
	Export(ctx context.Context, params *ExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportWithBody request with any body
	ImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Import(ctx context.Context, body ImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllStrategies request
	GetAllStrategies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStrategyWithBody request with any body
	CreateStrategyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStrategy(ctx context.Context, body CreateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveStrategy request
	RemoveStrategy(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStrategy request
	GetStrategy(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStrategyWithBody request with any body
	UpdateStrategyWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStrategy(ctx context.Context, name string, body UpdateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeprecateStrategy request
	DeprecateStrategy(ctx context.Context, strategyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReactivateStrategy request
	ReactivateStrategy(ctx context.Context, strategyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagTypes request
	GetTagTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagTypeWithBody request with any body
	CreateTagTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTagType(ctx context.Context, body CreateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateTagTypeWithBody request with any body
	ValidateTagTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateTagType(ctx context.Context, body ValidateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagType request
	DeleteTagType(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagType request
	GetTagType(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTagTypeWithBody request with any body
	UpdateTagTypeWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTagType(ctx context.Context, name string, body UpdateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTagWithBody request with any body
	CreateTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTag(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsByType request
	GetTagsByType(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTag request
	DeleteTag(ctx context.Context, pType string, value string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTag request
	GetTag(ctx context.Context, pType string, value string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetrySettings request
	GetTelemetrySettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUiConfig request
	GetUiConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUiConfigWithBody request with any body
	SetUiConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetUiConfig(ctx context.Context, body SetUiConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBaseUsersAndGroups request
	GetBaseUsersAndGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminCount request
	GetAdminCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetUserPasswordWithBody request with any body
	ResetUserPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetUserPassword(ctx context.Context, body ResetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchUsers request
	SearchUsers(ctx context.Context, params *SearchUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateUserPasswordWithBody request with any body
	ValidateUserPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateUserPassword(ctx context.Context, body ValidateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, id string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeUserPasswordWithBody request with any body
	ChangeUserPasswordWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeUserPassword(ctx context.Context, id string, body ChangeUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeMyPasswordWithBody request with any body
	ChangeMyPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeMyPassword(ctx context.Context, body ChangeMyPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfile request
	GetProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPats request
	GetPats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePatWithBody request with any body
	CreatePatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePat(ctx context.Context, body CreatePatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePat request
	DeletePat(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllClientFeatures request
	GetAllClientFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientFeature request
	GetClientFeature(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterClientMetricsWithBody request with any body
	RegisterClientMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterClientMetrics(ctx context.Context, body RegisterClientMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterClientApplicationWithBody request with any body
	RegisterClientApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterClientApplication(ctx context.Context, body RegisterClientApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFrontendFeatures request
	GetFrontendFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterFrontendMetricsWithBody request with any body
	RegisterFrontendMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterFrontendMetrics(ctx context.Context, body RegisterFrontendMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterFrontendClientWithBody request with any body
	RegisterFrontendClientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterFrontendClient(ctx context.Context, body RegisterFrontendClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePasswordWithBody request with any body
	ChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePassword(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendResetPasswordEmailWithBody request with any body
	SendResetPasswordEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendResetPasswordEmail(ctx context.Context, body SendResetPasswordEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateToken request
	ValidateToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidatePasswordWithBody request with any body
	ValidatePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidatePassword(ctx context.Context, body ValidatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkMetricsWithBody request with any body
	BulkMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkMetrics(ctx context.Context, body BulkMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidTokensWithBody request with any body
	GetValidTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetValidTokens(ctx context.Context, body GetValidTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPublicSignupTokenUserWithBody request with any body
	AddPublicSignupTokenUserWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPublicSignupTokenUser(ctx context.Context, token string, body AddPublicSignupTokenUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidatePublicSignupToken request
	ValidatePublicSignupToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAddons(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddonsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAddonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAddonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAddon(ctx context.Context, body CreateAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAddonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAddon(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAddonRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAddon(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddonRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAddonWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAddonRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAddon(ctx context.Context, id string, body UpdateAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAddonRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllApiTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllApiTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiToken(ctx context.Context, body CreateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTokensByName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTokensByNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiTokenWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiTokenRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiToken(ctx context.Context, token string, body UpdateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiTokenRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArchivedFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArchivedFeaturesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArchivedFeaturesByProjectId(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArchivedFeaturesByProjectIdRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviveFeature(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviveFeatureRequest(c.Server, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeature(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeatureRequest(c.Server, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureUsageSummary(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureUsageSummaryRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRawFeatureMetrics(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRawFeatureMetricsRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateConstraintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateConstraintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateConstraint(ctx context.Context, body ValidateConstraintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateConstraintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContextFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContextFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContextFieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContextFieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContextField(ctx context.Context, body CreateContextFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContextFieldRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Validate(ctx context.Context, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContextField(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContextFieldRequest(c.Server, contextField)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContextField(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContextFieldRequest(c.Server, contextField)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContextFieldWithBody(ctx context.Context, contextField string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContextFieldRequestWithBody(c.Server, contextField, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContextField(ctx context.Context, contextField string, body UpdateContextFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContextFieldRequest(c.Server, contextField, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStrategiesByContextField(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStrategiesByContextFieldRequest(c.Server, contextField)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEnvironments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEnvironmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectEnvironments(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectEnvironmentsRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSortOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSortOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSortOrder(ctx context.Context, body UpdateSortOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSortOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleEnvironmentOff(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleEnvironmentOffRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleEnvironmentOn(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleEnvironmentOnRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchEventsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchEvents(ctx context.Context, body SearchEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchEventsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventsForToggle(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsForToggleRequest(c.Server, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllFeatureTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllFeatureTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureTypeLifetimeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureTypeLifetimeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureTypeLifetime(ctx context.Context, id string, body UpdateFeatureTypeLifetimeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureTypeLifetimeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllToggles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTogglesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportFeaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportFeaturesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportFeatures(ctx context.Context, body ExportFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportFeaturesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportTogglesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportTogglesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportToggles(ctx context.Context, body ImportTogglesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportTogglesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateImport(ctx context.Context, body ValidateImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateImportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateFeatureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateFeatureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateFeature(ctx context.Context, body ValidateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateFeatureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTags(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTagsRequest(c.Server, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTagWithBody(ctx context.Context, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTagRequestWithBody(c.Server, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTag(ctx context.Context, featureName string, body AddTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTagRequest(c.Server, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagsWithBody(ctx context.Context, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagsRequestWithBody(c.Server, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTags(ctx context.Context, featureName string, body UpdateTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagsRequest(c.Server, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTag(ctx context.Context, featureName string, pType string, value string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTagRequest(c.Server, featureName, pType, value)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeedbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeedback(ctx context.Context, body CreateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeedbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeedbackWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeedbackRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeedback(ctx context.Context, id string, body UpdateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeedbackRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstanceAdminStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstanceAdminStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstanceAdminStatsCsv(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstanceAdminStatsCsvRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllPublicSignupTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllPublicSignupTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePublicSignupTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePublicSignupTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePublicSignupToken(ctx context.Context, body CreatePublicSignupTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePublicSignupTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicSignupToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicSignupTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePublicSignupTokenWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePublicSignupTokenRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePublicSignupToken(ctx context.Context, token string, body UpdatePublicSignupTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePublicSignupTokenRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaintenance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMaintenanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleMaintenanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleMaintenance(ctx context.Context, body ToggleMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleMaintenanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplication(ctx context.Context, appName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRequest(c.Server, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplication(ctx context.Context, appName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationRequest(c.Server, appName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationWithBody(ctx context.Context, appName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequestWithBody(c.Server, appName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplication(ctx context.Context, appName string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequest(c.Server, appName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlaygroundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaygroundRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayground(ctx context.Context, body GetPlaygroundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaygroundRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdvancedPlaygroundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdvancedPlaygroundRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdvancedPlayground(ctx context.Context, body GetAdvancedPlaygroundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdvancedPlaygroundRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeprecatedProjectOverview(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeprecatedProjectOverviewRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectApiTokens(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectApiTokensRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectApiTokenWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectApiTokenRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectApiToken(ctx context.Context, projectId string, body CreateProjectApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectApiTokenRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectApiToken(ctx context.Context, projectId string, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectApiTokenRequest(c.Server, projectId, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveFeaturesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveFeatures(ctx context.Context, projectId string, body ArchiveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveFeaturesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateArchiveFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateArchiveFeaturesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateArchiveFeatures(ctx context.Context, projectId string, body ValidateArchiveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateArchiveFeaturesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkToggleFeaturesEnvironmentOffWithBody(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkToggleFeaturesEnvironmentOffRequestWithBody(c.Server, projectId, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkToggleFeaturesEnvironmentOff(ctx context.Context, projectId string, environment string, body BulkToggleFeaturesEnvironmentOffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkToggleFeaturesEnvironmentOffRequest(c.Server, projectId, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkToggleFeaturesEnvironmentOnWithBody(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkToggleFeaturesEnvironmentOnRequestWithBody(c.Server, projectId, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkToggleFeaturesEnvironmentOn(ctx context.Context, projectId string, environment string, body BulkToggleFeaturesEnvironmentOnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkToggleFeaturesEnvironmentOnRequest(c.Server, projectId, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeaturesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeatures(ctx context.Context, projectId string, body DeleteFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeaturesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckDependenciesExist(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckDependenciesExistRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectDora(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectDoraRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddEnvironmentToProjectWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddEnvironmentToProjectRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddEnvironmentToProject(ctx context.Context, projectId string, body AddEnvironmentToProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddEnvironmentToProjectRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveEnvironmentFromProject(ctx context.Context, projectId string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveEnvironmentFromProjectRequest(c.Server, projectId, environment)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDefaultStrategyToProjectEnvironmentWithBody(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDefaultStrategyToProjectEnvironmentRequestWithBody(c.Server, projectId, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDefaultStrategyToProjectEnvironment(ctx context.Context, projectId string, environment string, body AddDefaultStrategyToProjectEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDefaultStrategyToProjectEnvironmentRequest(c.Server, projectId, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFavoriteProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFavoriteProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFavoriteProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFavoriteProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatures(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeaturesRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeatureWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeatureRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeature(ctx context.Context, projectId string, body CreateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeatureRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveFeature(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveFeatureRequest(c.Server, projectId, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeature(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureRequest(c.Server, projectId, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeatureWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeatureRequestWithBody(c.Server, projectId, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeature(ctx context.Context, projectId string, featureName string, body PatchFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeatureRequest(c.Server, projectId, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureRequestWithBody(c.Server, projectId, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeature(ctx context.Context, projectId string, featureName string, body UpdateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureRequest(c.Server, projectId, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneFeatureWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneFeatureRequestWithBody(c.Server, projectId, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneFeature(ctx context.Context, projectId string, featureName string, body CloneFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneFeatureRequest(c.Server, projectId, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeatureDependencies(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeatureDependenciesRequest(c.Server, projectId, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFeatureDependencyWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFeatureDependencyRequestWithBody(c.Server, projectId, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFeatureDependency(ctx context.Context, projectId string, featureName string, body AddFeatureDependencyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFeatureDependencyRequest(c.Server, projectId, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeatureDependency(ctx context.Context, projectId string, featureName string, parent string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeatureDependencyRequest(c.Server, projectId, featureName, parent)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureEnvironment(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureEnvironmentRequest(c.Server, projectId, featureName, environment)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleFeatureEnvironmentOff(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleFeatureEnvironmentOffRequest(c.Server, projectId, featureName, environment)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleFeatureEnvironmentOn(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleFeatureEnvironmentOnRequest(c.Server, projectId, featureName, environment)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureStrategies(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureStrategiesRequest(c.Server, projectId, featureName, environment)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFeatureStrategyWithBody(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFeatureStrategyRequestWithBody(c.Server, projectId, featureName, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, body AddFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFeatureStrategyRequest(c.Server, projectId, featureName, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetStrategySortOrderWithBody(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetStrategySortOrderRequestWithBody(c.Server, projectId, featureName, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetStrategySortOrder(ctx context.Context, projectId string, featureName string, environment string, body SetStrategySortOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetStrategySortOrderRequest(c.Server, projectId, featureName, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, strategyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeatureStrategyRequest(c.Server, projectId, featureName, environment, strategyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, strategyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureStrategyRequest(c.Server, projectId, featureName, environment, strategyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeatureStrategyWithBody(ctx context.Context, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeatureStrategyRequestWithBody(c.Server, projectId, featureName, environment, strategyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, strategyId string, body PatchFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeatureStrategyRequest(c.Server, projectId, featureName, environment, strategyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureStrategyWithBody(ctx context.Context, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureStrategyRequestWithBody(c.Server, projectId, featureName, environment, strategyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureStrategy(ctx context.Context, projectId string, featureName string, environment string, strategyId string, body UpdateFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureStrategyRequest(c.Server, projectId, featureName, environment, strategyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentFeatureVariants(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentFeatureVariantsRequest(c.Server, projectId, featureName, environment)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEnvironmentsFeatureVariantsWithBody(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEnvironmentsFeatureVariantsRequestWithBody(c.Server, projectId, featureName, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEnvironmentsFeatureVariants(ctx context.Context, projectId string, featureName string, environment string, body PatchEnvironmentsFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEnvironmentsFeatureVariantsRequest(c.Server, projectId, featureName, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverwriteEnvironmentFeatureVariantsWithBody(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverwriteEnvironmentFeatureVariantsRequestWithBody(c.Server, projectId, featureName, environment, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverwriteEnvironmentFeatureVariants(ctx context.Context, projectId string, featureName string, environment string, body OverwriteEnvironmentFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverwriteEnvironmentFeatureVariantsRequest(c.Server, projectId, featureName, environment, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveFavoriteFeature(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveFavoriteFeatureRequest(c.Server, projectId, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFavoriteFeature(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFavoriteFeatureRequest(c.Server, projectId, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListParentOptions(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListParentOptionsRequest(c.Server, projectId, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatureVariants(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureVariantsRequest(c.Server, projectId, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeatureVariantsWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeatureVariantsRequestWithBody(c.Server, projectId, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFeatureVariants(ctx context.Context, projectId string, featureName string, body PatchFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFeatureVariantsRequest(c.Server, projectId, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverwriteFeatureVariantsWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverwriteFeatureVariantsRequestWithBody(c.Server, projectId, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverwriteFeatureVariants(ctx context.Context, projectId string, featureName string, body OverwriteFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverwriteFeatureVariantsRequest(c.Server, projectId, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverwriteFeatureVariantsOnEnvironmentsWithBody(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverwriteFeatureVariantsOnEnvironmentsRequestWithBody(c.Server, projectId, featureName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverwriteFeatureVariantsOnEnvironments(ctx context.Context, projectId string, featureName string, body OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverwriteFeatureVariantsOnEnvironmentsRequest(c.Server, projectId, featureName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectHealthReport(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectHealthReportRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectOverview(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectOverviewRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviveFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviveFeaturesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviveFeatures(ctx context.Context, projectId string, body ReviveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviveFeaturesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StaleFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStaleFeaturesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StaleFeatures(ctx context.Context, projectId string, body StaleFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStaleFeaturesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTagToFeaturesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTagToFeaturesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTagToFeatures(ctx context.Context, projectId string, body AddTagToFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTagToFeaturesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchFeatures(ctx context.Context, params *SearchFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchFeaturesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSegmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSegmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSegment(ctx context.Context, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSegmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureStrategySegmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureStrategySegmentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeatureStrategySegments(ctx context.Context, body UpdateFeatureStrategySegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeatureStrategySegmentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentsByStrategyId(ctx context.Context, strategyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentsByStrategyIdRequest(c.Server, strategyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateSegmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateSegmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateSegment(ctx context.Context, body ValidateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateSegmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveSegment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveSegmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegment(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSegmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSegmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSegment(ctx context.Context, id string, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSegmentRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStrategiesBySegmentId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStrategiesBySegmentIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSplashSettings(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSplashSettingsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Export(ctx context.Context, params *ExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Import(ctx context.Context, body ImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllStrategies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllStrategiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStrategyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStrategyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStrategy(ctx context.Context, body CreateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStrategyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveStrategy(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveStrategyRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStrategy(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStrategyRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStrategyWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStrategyRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStrategy(ctx context.Context, name string, body UpdateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStrategyRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeprecateStrategy(ctx context.Context, strategyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeprecateStrategyRequest(c.Server, strategyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReactivateStrategy(ctx context.Context, strategyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReactivateStrategyRequest(c.Server, strategyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagType(ctx context.Context, body CreateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateTagTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateTagTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateTagType(ctx context.Context, body ValidateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateTagTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagType(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagTypeRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagType(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagTypeRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagTypeWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagTypeRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTagType(ctx context.Context, name string, body UpdateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTagTypeRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTag(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsByType(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsByTypeRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTag(ctx context.Context, pType string, value string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRequest(c.Server, pType, value)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTag(ctx context.Context, pType string, value string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRequest(c.Server, pType, value)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetrySettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetrySettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUiConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUiConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUiConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUiConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUiConfig(ctx context.Context, body SetUiConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUiConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBaseUsersAndGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBaseUsersAndGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetUserPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetUserPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetUserPassword(ctx context.Context, body ResetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetUserPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchUsers(ctx context.Context, params *SearchUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateUserPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateUserPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateUserPassword(ctx context.Context, body ValidateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateUserPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, id string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeUserPasswordWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeUserPasswordRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeUserPassword(ctx context.Context, id string, body ChangeUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeUserPasswordRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeMyPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeMyPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeMyPassword(ctx context.Context, body ChangeMyPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeMyPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePat(ctx context.Context, body CreatePatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePat(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePatRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllClientFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllClientFeaturesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClientFeature(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientFeatureRequest(c.Server, featureName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterClientMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterClientMetricsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterClientMetrics(ctx context.Context, body RegisterClientMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterClientMetricsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterClientApplicationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterClientApplicationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterClientApplication(ctx context.Context, body RegisterClientApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterClientApplicationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFrontendFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFrontendFeaturesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterFrontendMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterFrontendMetricsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterFrontendMetrics(ctx context.Context, body RegisterFrontendMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterFrontendMetricsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterFrontendClientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterFrontendClientRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterFrontendClient(ctx context.Context, body RegisterFrontendClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterFrontendClientRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePassword(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendResetPasswordEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendResetPasswordEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendResetPasswordEmail(ctx context.Context, body SendResetPasswordEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendResetPasswordEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidatePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidatePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidatePassword(ctx context.Context, body ValidatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidatePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkMetricsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkMetrics(ctx context.Context, body BulkMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkMetricsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidTokensRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidTokens(ctx context.Context, body GetValidTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidTokensRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPublicSignupTokenUserWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPublicSignupTokenUserRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPublicSignupTokenUser(ctx context.Context, token string, body AddPublicSignupTokenUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPublicSignupTokenUserRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidatePublicSignupToken(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidatePublicSignupTokenRequest(c.Server, token)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAddonsRequest generates requests for GetAddons
func NewGetAddonsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/addons")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAddonRequest calls the generic CreateAddon builder with application/json body
func NewCreateAddonRequest(server string, body CreateAddonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAddonRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAddonRequestWithBody generates requests for CreateAddon with any type of body
func NewCreateAddonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/addons")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAddonRequest generates requests for DeleteAddon
func NewDeleteAddonRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/addons/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAddonRequest generates requests for GetAddon
func NewGetAddonRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/addons/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAddonRequest calls the generic UpdateAddon builder with application/json body
func NewUpdateAddonRequest(server string, id string, body UpdateAddonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAddonRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAddonRequestWithBody generates requests for UpdateAddon with any type of body
func NewUpdateAddonRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/addons/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllApiTokensRequest generates requests for GetAllApiTokens
func NewGetAllApiTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/api-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiTokenRequest calls the generic CreateApiToken builder with application/json body
func NewCreateApiTokenRequest(server string, body CreateApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateApiTokenRequestWithBody generates requests for CreateApiToken with any type of body
func NewCreateApiTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/api-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiTokensByNameRequest generates requests for GetApiTokensByName
func NewGetApiTokensByNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/api-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiTokenRequest generates requests for DeleteApiToken
func NewDeleteApiTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/api-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiTokenRequest calls the generic UpdateApiToken builder with application/json body
func NewUpdateApiTokenRequest(server string, token string, body UpdateApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiTokenRequestWithBody(server, token, "application/json", bodyReader)
}

// NewUpdateApiTokenRequestWithBody generates requests for UpdateApiToken with any type of body
func NewUpdateApiTokenRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/api-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArchivedFeaturesRequest generates requests for GetArchivedFeatures
func NewGetArchivedFeaturesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/archive/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArchivedFeaturesByProjectIdRequest generates requests for GetArchivedFeaturesByProjectId
func NewGetArchivedFeaturesByProjectIdRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/archive/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReviveFeatureRequest generates requests for ReviveFeature
func NewReviveFeatureRequest(server string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/archive/revive/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFeatureRequest generates requests for DeleteFeature
func NewDeleteFeatureRequest(server string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/archive/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureUsageSummaryRequest generates requests for GetFeatureUsageSummary
func NewGetFeatureUsageSummaryRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/client-metrics/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRawFeatureMetricsRequest generates requests for GetRawFeatureMetrics
func NewGetRawFeatureMetricsRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/client-metrics/features/%s/raw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateConstraintRequest calls the generic ValidateConstraint builder with application/json body
func NewValidateConstraintRequest(server string, body ValidateConstraintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateConstraintRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateConstraintRequestWithBody generates requests for ValidateConstraint with any type of body
func NewValidateConstraintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/constraints/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContextFieldsRequest generates requests for GetContextFields
func NewGetContextFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/context")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContextFieldRequest calls the generic CreateContextField builder with application/json body
func NewCreateContextFieldRequest(server string, body CreateContextFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContextFieldRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateContextFieldRequestWithBody generates requests for CreateContextField with any type of body
func NewCreateContextFieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/context")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateRequest calls the generic Validate builder with application/json body
func NewValidateRequest(server string, body ValidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateRequestWithBody generates requests for Validate with any type of body
func NewValidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/context/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContextFieldRequest generates requests for DeleteContextField
func NewDeleteContextFieldRequest(server string, contextField string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contextField", runtime.ParamLocationPath, contextField)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/context/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContextFieldRequest generates requests for GetContextField
func NewGetContextFieldRequest(server string, contextField string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contextField", runtime.ParamLocationPath, contextField)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/context/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContextFieldRequest calls the generic UpdateContextField builder with application/json body
func NewUpdateContextFieldRequest(server string, contextField string, body UpdateContextFieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContextFieldRequestWithBody(server, contextField, "application/json", bodyReader)
}

// NewUpdateContextFieldRequestWithBody generates requests for UpdateContextField with any type of body
func NewUpdateContextFieldRequestWithBody(server string, contextField string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contextField", runtime.ParamLocationPath, contextField)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/context/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStrategiesByContextFieldRequest generates requests for GetStrategiesByContextField
func NewGetStrategiesByContextFieldRequest(server string, contextField string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contextField", runtime.ParamLocationPath, contextField)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/context/%s/strategies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllEnvironmentsRequest generates requests for GetAllEnvironments
func NewGetAllEnvironmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectEnvironmentsRequest generates requests for GetProjectEnvironments
func NewGetProjectEnvironmentsRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/environments/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSortOrderRequest calls the generic UpdateSortOrder builder with application/json body
func NewUpdateSortOrderRequest(server string, body UpdateSortOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSortOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSortOrderRequestWithBody generates requests for UpdateSortOrder with any type of body
func NewUpdateSortOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/environments/sort-order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToggleEnvironmentOffRequest generates requests for ToggleEnvironmentOff
func NewToggleEnvironmentOffRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/environments/%s/off", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToggleEnvironmentOnRequest generates requests for ToggleEnvironmentOn
func NewToggleEnvironmentOnRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/environments/%s/on", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string, params *GetEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchEventsRequest calls the generic SearchEvents builder with application/json body
func NewSearchEventsRequest(server string, body SearchEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchEventsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchEventsRequestWithBody generates requests for SearchEvents with any type of body
func NewSearchEventsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/events/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEventsForToggleRequest generates requests for GetEventsForToggle
func NewGetEventsForToggleRequest(server string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllFeatureTypesRequest generates requests for GetAllFeatureTypes
func NewGetAllFeatureTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/feature-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFeatureTypeLifetimeRequest calls the generic UpdateFeatureTypeLifetime builder with application/json body
func NewUpdateFeatureTypeLifetimeRequest(server string, id string, body UpdateFeatureTypeLifetimeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeatureTypeLifetimeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateFeatureTypeLifetimeRequestWithBody generates requests for UpdateFeatureTypeLifetime with any type of body
func NewUpdateFeatureTypeLifetimeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/feature-types/%s/lifetime", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllTogglesRequest generates requests for GetAllToggles
func NewGetAllTogglesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportFeaturesRequest calls the generic ExportFeatures builder with application/json body
func NewExportFeaturesRequest(server string, body ExportFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExportFeaturesRequestWithBody(server, "application/json", bodyReader)
}

// NewExportFeaturesRequestWithBody generates requests for ExportFeatures with any type of body
func NewExportFeaturesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features-batch/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportTogglesRequest calls the generic ImportToggles builder with application/json body
func NewImportTogglesRequest(server string, body ImportTogglesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportTogglesRequestWithBody(server, "application/json", bodyReader)
}

// NewImportTogglesRequestWithBody generates requests for ImportToggles with any type of body
func NewImportTogglesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features-batch/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateImportRequest calls the generic ValidateImport builder with application/json body
func NewValidateImportRequest(server string, body ValidateImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateImportRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateImportRequestWithBody generates requests for ValidateImport with any type of body
func NewValidateImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features-batch/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateFeatureRequest calls the generic ValidateFeature builder with application/json body
func NewValidateFeatureRequest(server string, body ValidateFeatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateFeatureRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateFeatureRequestWithBody generates requests for ValidateFeature with any type of body
func NewValidateFeatureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTagsRequest generates requests for ListTags
func NewListTagsRequest(server string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddTagRequest calls the generic AddTag builder with application/json body
func NewAddTagRequest(server string, featureName string, body AddTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTagRequestWithBody(server, featureName, "application/json", bodyReader)
}

// NewAddTagRequestWithBody generates requests for AddTag with any type of body
func NewAddTagRequestWithBody(server string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateTagsRequest calls the generic UpdateTags builder with application/json body
func NewUpdateTagsRequest(server string, featureName string, body UpdateTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTagsRequestWithBody(server, featureName, "application/json", bodyReader)
}

// NewUpdateTagsRequestWithBody generates requests for UpdateTags with any type of body
func NewUpdateTagsRequestWithBody(server string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveTagRequest generates requests for RemoveTag
func NewRemoveTagRequest(server string, featureName string, pType string, value string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "value", runtime.ParamLocationPath, value)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/features/%s/tags/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFeedbackRequest calls the generic CreateFeedback builder with application/json body
func NewCreateFeedbackRequest(server string, body CreateFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFeedbackRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFeedbackRequestWithBody generates requests for CreateFeedback with any type of body
func NewCreateFeedbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/feedback")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateFeedbackRequest calls the generic UpdateFeedback builder with application/json body
func NewUpdateFeedbackRequest(server string, id string, body UpdateFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeedbackRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateFeedbackRequestWithBody generates requests for UpdateFeedback with any type of body
func NewUpdateFeedbackRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/feedback/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstanceAdminStatsRequest generates requests for GetInstanceAdminStats
func NewGetInstanceAdminStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/instance-admin/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstanceAdminStatsCsvRequest generates requests for GetInstanceAdminStatsCsv
func NewGetInstanceAdminStatsCsvRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/instance-admin/statistics/csv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllPublicSignupTokensRequest generates requests for GetAllPublicSignupTokens
func NewGetAllPublicSignupTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/invite-link/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePublicSignupTokenRequest calls the generic CreatePublicSignupToken builder with application/json body
func NewCreatePublicSignupTokenRequest(server string, body CreatePublicSignupTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePublicSignupTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePublicSignupTokenRequestWithBody generates requests for CreatePublicSignupToken with any type of body
func NewCreatePublicSignupTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/invite-link/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublicSignupTokenRequest generates requests for GetPublicSignupToken
func NewGetPublicSignupTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/invite-link/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePublicSignupTokenRequest calls the generic UpdatePublicSignupToken builder with application/json body
func NewUpdatePublicSignupTokenRequest(server string, token string, body UpdatePublicSignupTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePublicSignupTokenRequestWithBody(server, token, "application/json", bodyReader)
}

// NewUpdatePublicSignupTokenRequestWithBody generates requests for UpdatePublicSignupToken with any type of body
func NewUpdatePublicSignupTokenRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/invite-link/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMaintenanceRequest generates requests for GetMaintenance
func NewGetMaintenanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/maintenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToggleMaintenanceRequest calls the generic ToggleMaintenance builder with application/json body
func NewToggleMaintenanceRequest(server string, body ToggleMaintenanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToggleMaintenanceRequestWithBody(server, "application/json", bodyReader)
}

// NewToggleMaintenanceRequestWithBody generates requests for ToggleMaintenance with any type of body
func NewToggleMaintenanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/maintenance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApplicationsRequest generates requests for GetApplications
func NewGetApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/metrics/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, appName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appName", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/metrics/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationRequest generates requests for GetApplication
func NewGetApplicationRequest(server string, appName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appName", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/metrics/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationRequest calls the generic CreateApplication builder with application/json body
func NewCreateApplicationRequest(server string, appName string, body CreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationRequestWithBody(server, appName, "application/json", bodyReader)
}

// NewCreateApplicationRequestWithBody generates requests for CreateApplication with any type of body
func NewCreateApplicationRequestWithBody(server string, appName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appName", runtime.ParamLocationPath, appName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/metrics/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlaygroundRequest calls the generic GetPlayground builder with application/json body
func NewGetPlaygroundRequest(server string, body GetPlaygroundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPlaygroundRequestWithBody(server, "application/json", bodyReader)
}

// NewGetPlaygroundRequestWithBody generates requests for GetPlayground with any type of body
func NewGetPlaygroundRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/playground")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdvancedPlaygroundRequest calls the generic GetAdvancedPlayground builder with application/json body
func NewGetAdvancedPlaygroundRequest(server string, body GetAdvancedPlaygroundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetAdvancedPlaygroundRequestWithBody(server, "application/json", bodyReader)
}

// NewGetAdvancedPlaygroundRequestWithBody generates requests for GetAdvancedPlayground with any type of body
func NewGetAdvancedPlaygroundRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/playground/advanced")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeprecatedProjectOverviewRequest generates requests for GetDeprecatedProjectOverview
func NewGetDeprecatedProjectOverviewRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectApiTokensRequest generates requests for GetProjectApiTokens
func NewGetProjectApiTokensRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/api-tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectApiTokenRequest calls the generic CreateProjectApiToken builder with application/json body
func NewCreateProjectApiTokenRequest(server string, projectId string, body CreateProjectApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectApiTokenRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateProjectApiTokenRequestWithBody generates requests for CreateProjectApiToken with any type of body
func NewCreateProjectApiTokenRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/api-tokens", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectApiTokenRequest generates requests for DeleteProjectApiToken
func NewDeleteProjectApiTokenRequest(server string, projectId string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/api-tokens/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveFeaturesRequest calls the generic ArchiveFeatures builder with application/json body
func NewArchiveFeaturesRequest(server string, projectId string, body ArchiveFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewArchiveFeaturesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewArchiveFeaturesRequestWithBody generates requests for ArchiveFeatures with any type of body
func NewArchiveFeaturesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateArchiveFeaturesRequest calls the generic ValidateArchiveFeatures builder with application/json body
func NewValidateArchiveFeaturesRequest(server string, projectId string, body ValidateArchiveFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateArchiveFeaturesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewValidateArchiveFeaturesRequestWithBody generates requests for ValidateArchiveFeatures with any type of body
func NewValidateArchiveFeaturesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/archive/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkToggleFeaturesEnvironmentOffRequest calls the generic BulkToggleFeaturesEnvironmentOff builder with application/json body
func NewBulkToggleFeaturesEnvironmentOffRequest(server string, projectId string, environment string, body BulkToggleFeaturesEnvironmentOffJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkToggleFeaturesEnvironmentOffRequestWithBody(server, projectId, environment, "application/json", bodyReader)
}

// NewBulkToggleFeaturesEnvironmentOffRequestWithBody generates requests for BulkToggleFeaturesEnvironmentOff with any type of body
func NewBulkToggleFeaturesEnvironmentOffRequestWithBody(server string, projectId string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/bulk_features/environments/%s/off", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkToggleFeaturesEnvironmentOnRequest calls the generic BulkToggleFeaturesEnvironmentOn builder with application/json body
func NewBulkToggleFeaturesEnvironmentOnRequest(server string, projectId string, environment string, body BulkToggleFeaturesEnvironmentOnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkToggleFeaturesEnvironmentOnRequestWithBody(server, projectId, environment, "application/json", bodyReader)
}

// NewBulkToggleFeaturesEnvironmentOnRequestWithBody generates requests for BulkToggleFeaturesEnvironmentOn with any type of body
func NewBulkToggleFeaturesEnvironmentOnRequestWithBody(server string, projectId string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/bulk_features/environments/%s/on", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeaturesRequest calls the generic DeleteFeatures builder with application/json body
func NewDeleteFeaturesRequest(server string, projectId string, body DeleteFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteFeaturesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewDeleteFeaturesRequestWithBody generates requests for DeleteFeatures with any type of body
func NewDeleteFeaturesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckDependenciesExistRequest generates requests for CheckDependenciesExist
func NewCheckDependenciesExistRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/dependencies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectDoraRequest generates requests for GetProjectDora
func NewGetProjectDoraRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/dora", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddEnvironmentToProjectRequest calls the generic AddEnvironmentToProject builder with application/json body
func NewAddEnvironmentToProjectRequest(server string, projectId string, body AddEnvironmentToProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddEnvironmentToProjectRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewAddEnvironmentToProjectRequestWithBody generates requests for AddEnvironmentToProject with any type of body
func NewAddEnvironmentToProjectRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveEnvironmentFromProjectRequest generates requests for RemoveEnvironmentFromProject
func NewRemoveEnvironmentFromProjectRequest(server string, projectId string, environment string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddDefaultStrategyToProjectEnvironmentRequest calls the generic AddDefaultStrategyToProjectEnvironment builder with application/json body
func NewAddDefaultStrategyToProjectEnvironmentRequest(server string, projectId string, environment string, body AddDefaultStrategyToProjectEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDefaultStrategyToProjectEnvironmentRequestWithBody(server, projectId, environment, "application/json", bodyReader)
}

// NewAddDefaultStrategyToProjectEnvironmentRequestWithBody generates requests for AddDefaultStrategyToProjectEnvironment with any type of body
func NewAddDefaultStrategyToProjectEnvironmentRequestWithBody(server string, projectId string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/environments/%s/default-strategy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveFavoriteProjectRequest generates requests for RemoveFavoriteProject
func NewRemoveFavoriteProjectRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/favorites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddFavoriteProjectRequest generates requests for AddFavoriteProject
func NewAddFavoriteProjectRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/favorites", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeaturesRequest generates requests for GetFeatures
func NewGetFeaturesRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFeatureRequest calls the generic CreateFeature builder with application/json body
func NewCreateFeatureRequest(server string, projectId string, body CreateFeatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFeatureRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateFeatureRequestWithBody generates requests for CreateFeature with any type of body
func NewCreateFeatureRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveFeatureRequest generates requests for ArchiveFeature
func NewArchiveFeatureRequest(server string, projectId string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureRequest generates requests for GetFeature
func NewGetFeatureRequest(server string, projectId string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFeatureRequest calls the generic PatchFeature builder with application/json body
func NewPatchFeatureRequest(server string, projectId string, featureName string, body PatchFeatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFeatureRequestWithBody(server, projectId, featureName, "application/json", bodyReader)
}

// NewPatchFeatureRequestWithBody generates requests for PatchFeature with any type of body
func NewPatchFeatureRequestWithBody(server string, projectId string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateFeatureRequest calls the generic UpdateFeature builder with application/json body
func NewUpdateFeatureRequest(server string, projectId string, featureName string, body UpdateFeatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeatureRequestWithBody(server, projectId, featureName, "application/json", bodyReader)
}

// NewUpdateFeatureRequestWithBody generates requests for UpdateFeature with any type of body
func NewUpdateFeatureRequestWithBody(server string, projectId string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloneFeatureRequest calls the generic CloneFeature builder with application/json body
func NewCloneFeatureRequest(server string, projectId string, featureName string, body CloneFeatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCloneFeatureRequestWithBody(server, projectId, featureName, "application/json", bodyReader)
}

// NewCloneFeatureRequestWithBody generates requests for CloneFeature with any type of body
func NewCloneFeatureRequestWithBody(server string, projectId string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/clone", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeatureDependenciesRequest generates requests for DeleteFeatureDependencies
func NewDeleteFeatureDependenciesRequest(server string, projectId string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/dependencies", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddFeatureDependencyRequest calls the generic AddFeatureDependency builder with application/json body
func NewAddFeatureDependencyRequest(server string, projectId string, featureName string, body AddFeatureDependencyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddFeatureDependencyRequestWithBody(server, projectId, featureName, "application/json", bodyReader)
}

// NewAddFeatureDependencyRequestWithBody generates requests for AddFeatureDependency with any type of body
func NewAddFeatureDependencyRequestWithBody(server string, projectId string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/dependencies", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeatureDependencyRequest generates requests for DeleteFeatureDependency
func NewDeleteFeatureDependencyRequest(server string, projectId string, featureName string, parent string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "parent", runtime.ParamLocationPath, parent)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/dependencies/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureEnvironmentRequest generates requests for GetFeatureEnvironment
func NewGetFeatureEnvironmentRequest(server string, projectId string, featureName string, environment string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToggleFeatureEnvironmentOffRequest generates requests for ToggleFeatureEnvironmentOff
func NewToggleFeatureEnvironmentOffRequest(server string, projectId string, featureName string, environment string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/off", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToggleFeatureEnvironmentOnRequest generates requests for ToggleFeatureEnvironmentOn
func NewToggleFeatureEnvironmentOnRequest(server string, projectId string, featureName string, environment string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/on", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureStrategiesRequest generates requests for GetFeatureStrategies
func NewGetFeatureStrategiesRequest(server string, projectId string, featureName string, environment string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/strategies", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddFeatureStrategyRequest calls the generic AddFeatureStrategy builder with application/json body
func NewAddFeatureStrategyRequest(server string, projectId string, featureName string, environment string, body AddFeatureStrategyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddFeatureStrategyRequestWithBody(server, projectId, featureName, environment, "application/json", bodyReader)
}

// NewAddFeatureStrategyRequestWithBody generates requests for AddFeatureStrategy with any type of body
func NewAddFeatureStrategyRequestWithBody(server string, projectId string, featureName string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/strategies", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetStrategySortOrderRequest calls the generic SetStrategySortOrder builder with application/json body
func NewSetStrategySortOrderRequest(server string, projectId string, featureName string, environment string, body SetStrategySortOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetStrategySortOrderRequestWithBody(server, projectId, featureName, environment, "application/json", bodyReader)
}

// NewSetStrategySortOrderRequestWithBody generates requests for SetStrategySortOrder with any type of body
func NewSetStrategySortOrderRequestWithBody(server string, projectId string, featureName string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/strategies/set-sort-order", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeatureStrategyRequest generates requests for DeleteFeatureStrategy
func NewDeleteFeatureStrategyRequest(server string, projectId string, featureName string, environment string, strategyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "strategyId", runtime.ParamLocationPath, strategyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/strategies/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureStrategyRequest generates requests for GetFeatureStrategy
func NewGetFeatureStrategyRequest(server string, projectId string, featureName string, environment string, strategyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "strategyId", runtime.ParamLocationPath, strategyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/strategies/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFeatureStrategyRequest calls the generic PatchFeatureStrategy builder with application/json body
func NewPatchFeatureStrategyRequest(server string, projectId string, featureName string, environment string, strategyId string, body PatchFeatureStrategyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFeatureStrategyRequestWithBody(server, projectId, featureName, environment, strategyId, "application/json", bodyReader)
}

// NewPatchFeatureStrategyRequestWithBody generates requests for PatchFeatureStrategy with any type of body
func NewPatchFeatureStrategyRequestWithBody(server string, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "strategyId", runtime.ParamLocationPath, strategyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/strategies/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateFeatureStrategyRequest calls the generic UpdateFeatureStrategy builder with application/json body
func NewUpdateFeatureStrategyRequest(server string, projectId string, featureName string, environment string, strategyId string, body UpdateFeatureStrategyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeatureStrategyRequestWithBody(server, projectId, featureName, environment, strategyId, "application/json", bodyReader)
}

// NewUpdateFeatureStrategyRequestWithBody generates requests for UpdateFeatureStrategy with any type of body
func NewUpdateFeatureStrategyRequestWithBody(server string, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "strategyId", runtime.ParamLocationPath, strategyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/strategies/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEnvironmentFeatureVariantsRequest generates requests for GetEnvironmentFeatureVariants
func NewGetEnvironmentFeatureVariantsRequest(server string, projectId string, featureName string, environment string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/variants", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchEnvironmentsFeatureVariantsRequest calls the generic PatchEnvironmentsFeatureVariants builder with application/json body
func NewPatchEnvironmentsFeatureVariantsRequest(server string, projectId string, featureName string, environment string, body PatchEnvironmentsFeatureVariantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchEnvironmentsFeatureVariantsRequestWithBody(server, projectId, featureName, environment, "application/json", bodyReader)
}

// NewPatchEnvironmentsFeatureVariantsRequestWithBody generates requests for PatchEnvironmentsFeatureVariants with any type of body
func NewPatchEnvironmentsFeatureVariantsRequestWithBody(server string, projectId string, featureName string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/variants", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOverwriteEnvironmentFeatureVariantsRequest calls the generic OverwriteEnvironmentFeatureVariants builder with application/json body
func NewOverwriteEnvironmentFeatureVariantsRequest(server string, projectId string, featureName string, environment string, body OverwriteEnvironmentFeatureVariantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOverwriteEnvironmentFeatureVariantsRequestWithBody(server, projectId, featureName, environment, "application/json", bodyReader)
}

// NewOverwriteEnvironmentFeatureVariantsRequestWithBody generates requests for OverwriteEnvironmentFeatureVariants with any type of body
func NewOverwriteEnvironmentFeatureVariantsRequestWithBody(server string, projectId string, featureName string, environment string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment", runtime.ParamLocationPath, environment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/environments/%s/variants", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveFavoriteFeatureRequest generates requests for RemoveFavoriteFeature
func NewRemoveFavoriteFeatureRequest(server string, projectId string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/favorites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddFavoriteFeatureRequest generates requests for AddFavoriteFeature
func NewAddFavoriteFeatureRequest(server string, projectId string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/favorites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListParentOptionsRequest generates requests for ListParentOptions
func NewListParentOptionsRequest(server string, projectId string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/parents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureVariantsRequest generates requests for GetFeatureVariants
func NewGetFeatureVariantsRequest(server string, projectId string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/variants", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFeatureVariantsRequest calls the generic PatchFeatureVariants builder with application/json body
func NewPatchFeatureVariantsRequest(server string, projectId string, featureName string, body PatchFeatureVariantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFeatureVariantsRequestWithBody(server, projectId, featureName, "application/json", bodyReader)
}

// NewPatchFeatureVariantsRequestWithBody generates requests for PatchFeatureVariants with any type of body
func NewPatchFeatureVariantsRequestWithBody(server string, projectId string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/variants", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOverwriteFeatureVariantsRequest calls the generic OverwriteFeatureVariants builder with application/json body
func NewOverwriteFeatureVariantsRequest(server string, projectId string, featureName string, body OverwriteFeatureVariantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOverwriteFeatureVariantsRequestWithBody(server, projectId, featureName, "application/json", bodyReader)
}

// NewOverwriteFeatureVariantsRequestWithBody generates requests for OverwriteFeatureVariants with any type of body
func NewOverwriteFeatureVariantsRequestWithBody(server string, projectId string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/variants", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOverwriteFeatureVariantsOnEnvironmentsRequest calls the generic OverwriteFeatureVariantsOnEnvironments builder with application/json body
func NewOverwriteFeatureVariantsOnEnvironmentsRequest(server string, projectId string, featureName string, body OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOverwriteFeatureVariantsOnEnvironmentsRequestWithBody(server, projectId, featureName, "application/json", bodyReader)
}

// NewOverwriteFeatureVariantsOnEnvironmentsRequestWithBody generates requests for OverwriteFeatureVariantsOnEnvironments with any type of body
func NewOverwriteFeatureVariantsOnEnvironmentsRequestWithBody(server string, projectId string, featureName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/features/%s/variants-batch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectHealthReportRequest generates requests for GetProjectHealthReport
func NewGetProjectHealthReportRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/health-report", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectOverviewRequest generates requests for GetProjectOverview
func NewGetProjectOverviewRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/overview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReviveFeaturesRequest calls the generic ReviveFeatures builder with application/json body
func NewReviveFeaturesRequest(server string, projectId string, body ReviveFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReviveFeaturesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewReviveFeaturesRequestWithBody generates requests for ReviveFeatures with any type of body
func NewReviveFeaturesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/revive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStaleFeaturesRequest calls the generic StaleFeatures builder with application/json body
func NewStaleFeaturesRequest(server string, projectId string, body StaleFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStaleFeaturesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewStaleFeaturesRequestWithBody generates requests for StaleFeatures with any type of body
func NewStaleFeaturesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/stale", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddTagToFeaturesRequest calls the generic AddTagToFeatures builder with application/json body
func NewAddTagToFeaturesRequest(server string, projectId string, body AddTagToFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTagToFeaturesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewAddTagToFeaturesRequestWithBody generates requests for AddTagToFeatures with any type of body
func NewAddTagToFeaturesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/projects/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchFeaturesRequest generates requests for SearchFeatures
func NewSearchFeaturesRequest(server string, params *SearchFeaturesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/search/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Segment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "segment", runtime.ParamLocationQuery, *params.Segment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FavoritesFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "favoritesFirst", runtime.ParamLocationQuery, *params.FavoritesFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAt", runtime.ParamLocationQuery, *params.CreatedAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentsRequest generates requests for GetSegments
func NewGetSegmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSegmentRequest calls the generic CreateSegment builder with application/json body
func NewCreateSegmentRequest(server string, body CreateSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSegmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSegmentRequestWithBody generates requests for CreateSegment with any type of body
func NewCreateSegmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateFeatureStrategySegmentsRequest calls the generic UpdateFeatureStrategySegments builder with application/json body
func NewUpdateFeatureStrategySegmentsRequest(server string, body UpdateFeatureStrategySegmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeatureStrategySegmentsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateFeatureStrategySegmentsRequestWithBody generates requests for UpdateFeatureStrategySegments with any type of body
func NewUpdateFeatureStrategySegmentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments/strategies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSegmentsByStrategyIdRequest generates requests for GetSegmentsByStrategyId
func NewGetSegmentsByStrategyIdRequest(server string, strategyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "strategyId", runtime.ParamLocationPath, strategyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments/strategies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateSegmentRequest calls the generic ValidateSegment builder with application/json body
func NewValidateSegmentRequest(server string, body ValidateSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateSegmentRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateSegmentRequestWithBody generates requests for ValidateSegment with any type of body
func NewValidateSegmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveSegmentRequest generates requests for RemoveSegment
func NewRemoveSegmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentRequest generates requests for GetSegment
func NewGetSegmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSegmentRequest calls the generic UpdateSegment builder with application/json body
func NewUpdateSegmentRequest(server string, id string, body UpdateSegmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSegmentRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateSegmentRequestWithBody generates requests for UpdateSegment with any type of body
func NewUpdateSegmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStrategiesBySegmentIdRequest generates requests for GetStrategiesBySegmentId
func NewGetStrategiesBySegmentIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/segments/%s/strategies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSplashSettingsRequest generates requests for UpdateSplashSettings
func NewUpdateSplashSettingsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/splash/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportRequest generates requests for Export
func NewExportRequest(server string, params *ExportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/state/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Download != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Strategies != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "strategies", runtime.ParamLocationQuery, *params.Strategies); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FeatureToggles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "featureToggles", runtime.ParamLocationQuery, *params.FeatureToggles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Projects != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects", runtime.ParamLocationQuery, *params.Projects); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environments != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environments", runtime.ParamLocationQuery, *params.Environments); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewImportRequest calls the generic Import builder with application/json body
func NewImportRequest(server string, body ImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportRequestWithBody(server, "application/json", bodyReader)
}

// NewImportRequestWithBody generates requests for Import with any type of body
func NewImportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/state/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllStrategiesRequest generates requests for GetAllStrategies
func NewGetAllStrategiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/strategies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStrategyRequest calls the generic CreateStrategy builder with application/json body
func NewCreateStrategyRequest(server string, body CreateStrategyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStrategyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateStrategyRequestWithBody generates requests for CreateStrategy with any type of body
func NewCreateStrategyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/strategies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveStrategyRequest generates requests for RemoveStrategy
func NewRemoveStrategyRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/strategies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStrategyRequest generates requests for GetStrategy
func NewGetStrategyRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/strategies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStrategyRequest calls the generic UpdateStrategy builder with application/json body
func NewUpdateStrategyRequest(server string, name string, body UpdateStrategyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStrategyRequestWithBody(server, name, "application/json", bodyReader)
}

// NewUpdateStrategyRequestWithBody generates requests for UpdateStrategy with any type of body
func NewUpdateStrategyRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/strategies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeprecateStrategyRequest generates requests for DeprecateStrategy
func NewDeprecateStrategyRequest(server string, strategyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "strategyName", runtime.ParamLocationPath, strategyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/strategies/%s/deprecate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReactivateStrategyRequest generates requests for ReactivateStrategy
func NewReactivateStrategyRequest(server string, strategyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "strategyName", runtime.ParamLocationPath, strategyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/strategies/%s/reactivate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagTypesRequest generates requests for GetTagTypes
func NewGetTagTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tag-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTagTypeRequest calls the generic CreateTagType builder with application/json body
func NewCreateTagTypeRequest(server string, body CreateTagTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTagTypeRequestWithBody generates requests for CreateTagType with any type of body
func NewCreateTagTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tag-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateTagTypeRequest calls the generic ValidateTagType builder with application/json body
func NewValidateTagTypeRequest(server string, body ValidateTagTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateTagTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateTagTypeRequestWithBody generates requests for ValidateTagType with any type of body
func NewValidateTagTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tag-types/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagTypeRequest generates requests for DeleteTagType
func NewDeleteTagTypeRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tag-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagTypeRequest generates requests for GetTagType
func NewGetTagTypeRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tag-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTagTypeRequest calls the generic UpdateTagType builder with application/json body
func NewUpdateTagTypeRequest(server string, name string, body UpdateTagTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTagTypeRequestWithBody(server, name, "application/json", bodyReader)
}

// NewUpdateTagTypeRequestWithBody generates requests for UpdateTagType with any type of body
func NewUpdateTagTypeRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tag-types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTagRequest calls the generic CreateTag builder with application/json body
func NewCreateTagRequest(server string, body CreateTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTagRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTagRequestWithBody generates requests for CreateTag with any type of body
func NewCreateTagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsByTypeRequest generates requests for GetTagsByType
func NewGetTagsByTypeRequest(server string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTagRequest generates requests for DeleteTag
func NewDeleteTagRequest(server string, pType string, value string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "value", runtime.ParamLocationPath, value)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tags/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagRequest generates requests for GetTag
func NewGetTagRequest(server string, pType string, value string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "value", runtime.ParamLocationPath, value)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/tags/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTelemetrySettingsRequest generates requests for GetTelemetrySettings
func NewGetTelemetrySettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/telemetry/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUiConfigRequest generates requests for GetUiConfig
func NewGetUiConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/ui-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetUiConfigRequest calls the generic SetUiConfig builder with application/json body
func NewSetUiConfigRequest(server string, body SetUiConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetUiConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewSetUiConfigRequestWithBody generates requests for SetUiConfig with any type of body
func NewSetUiConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/ui-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBaseUsersAndGroupsRequest generates requests for GetBaseUsersAndGroups
func NewGetBaseUsersAndGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/access")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminCountRequest generates requests for GetAdminCount
func NewGetAdminCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/admin-count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetUserPasswordRequest calls the generic ResetUserPassword builder with application/json body
func NewResetUserPasswordRequest(server string, body ResetUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetUserPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewResetUserPasswordRequestWithBody generates requests for ResetUserPassword with any type of body
func NewResetUserPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/reset-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchUsersRequest generates requests for SearchUsers
func NewSearchUsersRequest(server string, params *SearchUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateUserPasswordRequest calls the generic ValidateUserPassword builder with application/json body
func NewValidateUserPasswordRequest(server string, body ValidateUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateUserPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewValidateUserPasswordRequestWithBody generates requests for ValidateUserPassword with any type of body
func NewValidateUserPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/validate-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, id string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangeUserPasswordRequest calls the generic ChangeUserPassword builder with application/json body
func NewChangeUserPasswordRequest(server string, id string, body ChangeUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeUserPasswordRequestWithBody(server, id, "application/json", bodyReader)
}

// NewChangeUserPasswordRequestWithBody generates requests for ChangeUserPassword with any type of body
func NewChangeUserPasswordRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user-admin/%s/change-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangeMyPasswordRequest calls the generic ChangeMyPassword builder with application/json body
func NewChangeMyPasswordRequest(server string, body ChangeMyPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeMyPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewChangeMyPasswordRequestWithBody generates requests for ChangeMyPassword with any type of body
func NewChangeMyPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProfileRequest generates requests for GetProfile
func NewGetProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatsRequest generates requests for GetPats
func NewGetPatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePatRequest calls the generic CreatePat builder with application/json body
func NewCreatePatRequest(server string, body CreatePatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePatRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePatRequestWithBody generates requests for CreatePat with any type of body
func NewCreatePatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePatRequest generates requests for DeletePat
func NewDeletePatRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/user/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllClientFeaturesRequest generates requests for GetAllClientFeatures
func NewGetAllClientFeaturesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/client/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientFeatureRequest generates requests for GetClientFeature
func NewGetClientFeatureRequest(server string, featureName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureName", runtime.ParamLocationPath, featureName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/client/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterClientMetricsRequest calls the generic RegisterClientMetrics builder with application/json body
func NewRegisterClientMetricsRequest(server string, body RegisterClientMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterClientMetricsRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterClientMetricsRequestWithBody generates requests for RegisterClientMetrics with any type of body
func NewRegisterClientMetricsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/client/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterClientApplicationRequest calls the generic RegisterClientApplication builder with application/json body
func NewRegisterClientApplicationRequest(server string, body RegisterClientApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterClientApplicationRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterClientApplicationRequestWithBody generates requests for RegisterClientApplication with any type of body
func NewRegisterClientApplicationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/client/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFrontendFeaturesRequest generates requests for GetFrontendFeatures
func NewGetFrontendFeaturesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/frontend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterFrontendMetricsRequest calls the generic RegisterFrontendMetrics builder with application/json body
func NewRegisterFrontendMetricsRequest(server string, body RegisterFrontendMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterFrontendMetricsRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterFrontendMetricsRequestWithBody generates requests for RegisterFrontendMetrics with any type of body
func NewRegisterFrontendMetricsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/frontend/client/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterFrontendClientRequest calls the generic RegisterFrontendClient builder with application/json body
func NewRegisterFrontendClientRequest(server string, body RegisterFrontendClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterFrontendClientRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterFrontendClientRequestWithBody generates requests for RegisterFrontendClient with any type of body
func NewRegisterFrontendClientRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/frontend/client/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangePasswordRequest calls the generic ChangePassword builder with application/json body
func NewChangePasswordRequest(server string, body ChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewChangePasswordRequestWithBody generates requests for ChangePassword with any type of body
func NewChangePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/reset/password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendResetPasswordEmailRequest calls the generic SendResetPasswordEmail builder with application/json body
func NewSendResetPasswordEmailRequest(server string, body SendResetPasswordEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendResetPasswordEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewSendResetPasswordEmailRequestWithBody generates requests for SendResetPasswordEmail with any type of body
func NewSendResetPasswordEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/reset/password-email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateTokenRequest generates requests for ValidateToken
func NewValidateTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/reset/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidatePasswordRequest calls the generic ValidatePassword builder with application/json body
func NewValidatePasswordRequest(server string, body ValidatePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidatePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewValidatePasswordRequestWithBody generates requests for ValidatePassword with any type of body
func NewValidatePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/reset/validate-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/simple/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkMetricsRequest calls the generic BulkMetrics builder with application/json body
func NewBulkMetricsRequest(server string, body BulkMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkMetricsRequestWithBody(server, "application/json", bodyReader)
}

// NewBulkMetricsRequestWithBody generates requests for BulkMetrics with any type of body
func NewBulkMetricsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/edge/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidTokensRequest calls the generic GetValidTokens builder with application/json body
func NewGetValidTokensRequest(server string, body GetValidTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetValidTokensRequestWithBody(server, "application/json", bodyReader)
}

// NewGetValidTokensRequestWithBody generates requests for GetValidTokens with any type of body
func NewGetValidTokensRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/edge/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPublicSignupTokenUserRequest calls the generic AddPublicSignupTokenUser builder with application/json body
func NewAddPublicSignupTokenUserRequest(server string, token string, body AddPublicSignupTokenUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPublicSignupTokenUserRequestWithBody(server, token, "application/json", bodyReader)
}

// NewAddPublicSignupTokenUserRequestWithBody generates requests for AddPublicSignupTokenUser with any type of body
func NewAddPublicSignupTokenUserRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invite/%s/signup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidatePublicSignupTokenRequest generates requests for ValidatePublicSignupToken
func NewValidatePublicSignupTokenRequest(server string, token string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invite/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAddonsWithResponse request
	GetAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAddonsResponse, error)

	// CreateAddonWithBodyWithResponse request with any body
	CreateAddonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAddonResponse, error)

	CreateAddonWithResponse(ctx context.Context, body CreateAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAddonResponse, error)

	// DeleteAddonWithResponse request
	DeleteAddonWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAddonResponse, error)

	// GetAddonWithResponse request
	GetAddonWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAddonResponse, error)

	// UpdateAddonWithBodyWithResponse request with any body
	UpdateAddonWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAddonResponse, error)

	UpdateAddonWithResponse(ctx context.Context, id string, body UpdateAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAddonResponse, error)

	// GetAllApiTokensWithResponse request
	GetAllApiTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllApiTokensResponse, error)

	// CreateApiTokenWithBodyWithResponse request with any body
	CreateApiTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiTokenResponse, error)

	CreateApiTokenWithResponse(ctx context.Context, body CreateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiTokenResponse, error)

	// GetApiTokensByNameWithResponse request
	GetApiTokensByNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiTokensByNameResponse, error)

	// DeleteApiTokenWithResponse request
	DeleteApiTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*DeleteApiTokenResponse, error)

	// UpdateApiTokenWithBodyWithResponse request with any body
	UpdateApiTokenWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiTokenResponse, error)

	UpdateApiTokenWithResponse(ctx context.Context, token string, body UpdateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiTokenResponse, error)

	// GetArchivedFeaturesWithResponse request
	GetArchivedFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetArchivedFeaturesResponse, error)

	// GetArchivedFeaturesByProjectIdWithResponse request
	GetArchivedFeaturesByProjectIdWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetArchivedFeaturesByProjectIdResponse, error)

	// ReviveFeatureWithResponse request
	ReviveFeatureWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*ReviveFeatureResponse, error)

	// DeleteFeatureWithResponse request
	DeleteFeatureWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*DeleteFeatureResponse, error)

	// GetFeatureUsageSummaryWithResponse request
	GetFeatureUsageSummaryWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetFeatureUsageSummaryResponse, error)

	// GetRawFeatureMetricsWithResponse request
	GetRawFeatureMetricsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetRawFeatureMetricsResponse, error)

	// ValidateConstraintWithBodyWithResponse request with any body
	ValidateConstraintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateConstraintResponse, error)

	ValidateConstraintWithResponse(ctx context.Context, body ValidateConstraintJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateConstraintResponse, error)

	// GetContextFieldsWithResponse request
	GetContextFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContextFieldsResponse, error)

	// CreateContextFieldWithBodyWithResponse request with any body
	CreateContextFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContextFieldResponse, error)

	CreateContextFieldWithResponse(ctx context.Context, body CreateContextFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContextFieldResponse, error)

	// ValidateWithBodyWithResponse request with any body
	ValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateResponse, error)

	ValidateWithResponse(ctx context.Context, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateResponse, error)

	// DeleteContextFieldWithResponse request
	DeleteContextFieldWithResponse(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*DeleteContextFieldResponse, error)

	// GetContextFieldWithResponse request
	GetContextFieldWithResponse(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*GetContextFieldResponse, error)

	// UpdateContextFieldWithBodyWithResponse request with any body
	UpdateContextFieldWithBodyWithResponse(ctx context.Context, contextField string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContextFieldResponse, error)

	UpdateContextFieldWithResponse(ctx context.Context, contextField string, body UpdateContextFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContextFieldResponse, error)

	// GetStrategiesByContextFieldWithResponse request
	GetStrategiesByContextFieldWithResponse(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*GetStrategiesByContextFieldResponse, error)

	// GetAllEnvironmentsWithResponse request
	GetAllEnvironmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllEnvironmentsResponse, error)

	// GetProjectEnvironmentsWithResponse request
	GetProjectEnvironmentsWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectEnvironmentsResponse, error)

	// UpdateSortOrderWithBodyWithResponse request with any body
	UpdateSortOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSortOrderResponse, error)

	UpdateSortOrderWithResponse(ctx context.Context, body UpdateSortOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSortOrderResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// ToggleEnvironmentOffWithResponse request
	ToggleEnvironmentOffWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ToggleEnvironmentOffResponse, error)

	// ToggleEnvironmentOnWithResponse request
	ToggleEnvironmentOnWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ToggleEnvironmentOnResponse, error)

	// GetEventsWithResponse request
	GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// SearchEventsWithBodyWithResponse request with any body
	SearchEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchEventsResponse, error)

	SearchEventsWithResponse(ctx context.Context, body SearchEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchEventsResponse, error)

	// GetEventsForToggleWithResponse request
	GetEventsForToggleWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*GetEventsForToggleResponse, error)

	// GetAllFeatureTypesWithResponse request
	GetAllFeatureTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllFeatureTypesResponse, error)

	// UpdateFeatureTypeLifetimeWithBodyWithResponse request with any body
	UpdateFeatureTypeLifetimeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureTypeLifetimeResponse, error)

	UpdateFeatureTypeLifetimeWithResponse(ctx context.Context, id string, body UpdateFeatureTypeLifetimeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureTypeLifetimeResponse, error)

	// GetAllTogglesWithResponse request
	GetAllTogglesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllTogglesResponse, error)

	// ExportFeaturesWithBodyWithResponse request with any body
	ExportFeaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExportFeaturesResponse, error)

	ExportFeaturesWithResponse(ctx context.Context, body ExportFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ExportFeaturesResponse, error)

	// ImportTogglesWithBodyWithResponse request with any body
	ImportTogglesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportTogglesResponse, error)

	ImportTogglesWithResponse(ctx context.Context, body ImportTogglesJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportTogglesResponse, error)

	// ValidateImportWithBodyWithResponse request with any body
	ValidateImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateImportResponse, error)

	ValidateImportWithResponse(ctx context.Context, body ValidateImportJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateImportResponse, error)

	// ValidateFeatureWithBodyWithResponse request with any body
	ValidateFeatureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateFeatureResponse, error)

	ValidateFeatureWithResponse(ctx context.Context, body ValidateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateFeatureResponse, error)

	// ListTagsWithResponse request
	ListTagsWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*ListTagsResponse, error)

	// AddTagWithBodyWithResponse request with any body
	AddTagWithBodyWithResponse(ctx context.Context, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTagResponse, error)

	AddTagWithResponse(ctx context.Context, featureName string, body AddTagJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTagResponse, error)

	// UpdateTagsWithBodyWithResponse request with any body
	UpdateTagsWithBodyWithResponse(ctx context.Context, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagsResponse, error)

	UpdateTagsWithResponse(ctx context.Context, featureName string, body UpdateTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagsResponse, error)

	// RemoveTagWithResponse request
	RemoveTagWithResponse(ctx context.Context, featureName string, pType string, value string, reqEditors ...RequestEditorFn) (*RemoveTagResponse, error)

	// CreateFeedbackWithBodyWithResponse request with any body
	CreateFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeedbackResponse, error)

	CreateFeedbackWithResponse(ctx context.Context, body CreateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeedbackResponse, error)

	// UpdateFeedbackWithBodyWithResponse request with any body
	UpdateFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeedbackResponse, error)

	UpdateFeedbackWithResponse(ctx context.Context, id string, body UpdateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeedbackResponse, error)

	// GetInstanceAdminStatsWithResponse request
	GetInstanceAdminStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInstanceAdminStatsResponse, error)

	// GetInstanceAdminStatsCsvWithResponse request
	GetInstanceAdminStatsCsvWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInstanceAdminStatsCsvResponse, error)

	// GetAllPublicSignupTokensWithResponse request
	GetAllPublicSignupTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllPublicSignupTokensResponse, error)

	// CreatePublicSignupTokenWithBodyWithResponse request with any body
	CreatePublicSignupTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePublicSignupTokenResponse, error)

	CreatePublicSignupTokenWithResponse(ctx context.Context, body CreatePublicSignupTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePublicSignupTokenResponse, error)

	// GetPublicSignupTokenWithResponse request
	GetPublicSignupTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetPublicSignupTokenResponse, error)

	// UpdatePublicSignupTokenWithBodyWithResponse request with any body
	UpdatePublicSignupTokenWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePublicSignupTokenResponse, error)

	UpdatePublicSignupTokenWithResponse(ctx context.Context, token string, body UpdatePublicSignupTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePublicSignupTokenResponse, error)

	// GetMaintenanceWithResponse request
	GetMaintenanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMaintenanceResponse, error)

	// ToggleMaintenanceWithBodyWithResponse request with any body
	ToggleMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToggleMaintenanceResponse, error)

	ToggleMaintenanceWithResponse(ctx context.Context, body ToggleMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ToggleMaintenanceResponse, error)

	// GetApplicationsWithResponse request
	GetApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error)

	// DeleteApplicationWithResponse request
	DeleteApplicationWithResponse(ctx context.Context, appName string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error)

	// GetApplicationWithResponse request
	GetApplicationWithResponse(ctx context.Context, appName string, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error)

	// CreateApplicationWithBodyWithResponse request with any body
	CreateApplicationWithBodyWithResponse(ctx context.Context, appName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	CreateApplicationWithResponse(ctx context.Context, appName string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	// GetPlaygroundWithBodyWithResponse request with any body
	GetPlaygroundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPlaygroundResponse, error)

	GetPlaygroundWithResponse(ctx context.Context, body GetPlaygroundJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPlaygroundResponse, error)

	// GetAdvancedPlaygroundWithBodyWithResponse request with any body
	GetAdvancedPlaygroundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAdvancedPlaygroundResponse, error)

	GetAdvancedPlaygroundWithResponse(ctx context.Context, body GetAdvancedPlaygroundJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAdvancedPlaygroundResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// GetDeprecatedProjectOverviewWithResponse request
	GetDeprecatedProjectOverviewWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetDeprecatedProjectOverviewResponse, error)

	// GetProjectApiTokensWithResponse request
	GetProjectApiTokensWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectApiTokensResponse, error)

	// CreateProjectApiTokenWithBodyWithResponse request with any body
	CreateProjectApiTokenWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectApiTokenResponse, error)

	CreateProjectApiTokenWithResponse(ctx context.Context, projectId string, body CreateProjectApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectApiTokenResponse, error)

	// DeleteProjectApiTokenWithResponse request
	DeleteProjectApiTokenWithResponse(ctx context.Context, projectId string, token string, reqEditors ...RequestEditorFn) (*DeleteProjectApiTokenResponse, error)

	// ArchiveFeaturesWithBodyWithResponse request with any body
	ArchiveFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArchiveFeaturesResponse, error)

	ArchiveFeaturesWithResponse(ctx context.Context, projectId string, body ArchiveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ArchiveFeaturesResponse, error)

	// ValidateArchiveFeaturesWithBodyWithResponse request with any body
	ValidateArchiveFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateArchiveFeaturesResponse, error)

	ValidateArchiveFeaturesWithResponse(ctx context.Context, projectId string, body ValidateArchiveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateArchiveFeaturesResponse, error)

	// BulkToggleFeaturesEnvironmentOffWithBodyWithResponse request with any body
	BulkToggleFeaturesEnvironmentOffWithBodyWithResponse(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkToggleFeaturesEnvironmentOffResponse, error)

	BulkToggleFeaturesEnvironmentOffWithResponse(ctx context.Context, projectId string, environment string, body BulkToggleFeaturesEnvironmentOffJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkToggleFeaturesEnvironmentOffResponse, error)

	// BulkToggleFeaturesEnvironmentOnWithBodyWithResponse request with any body
	BulkToggleFeaturesEnvironmentOnWithBodyWithResponse(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkToggleFeaturesEnvironmentOnResponse, error)

	BulkToggleFeaturesEnvironmentOnWithResponse(ctx context.Context, projectId string, environment string, body BulkToggleFeaturesEnvironmentOnJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkToggleFeaturesEnvironmentOnResponse, error)

	// DeleteFeaturesWithBodyWithResponse request with any body
	DeleteFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFeaturesResponse, error)

	DeleteFeaturesWithResponse(ctx context.Context, projectId string, body DeleteFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFeaturesResponse, error)

	// CheckDependenciesExistWithResponse request
	CheckDependenciesExistWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*CheckDependenciesExistResponse, error)

	// GetProjectDoraWithResponse request
	GetProjectDoraWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectDoraResponse, error)

	// AddEnvironmentToProjectWithBodyWithResponse request with any body
	AddEnvironmentToProjectWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddEnvironmentToProjectResponse, error)

	AddEnvironmentToProjectWithResponse(ctx context.Context, projectId string, body AddEnvironmentToProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AddEnvironmentToProjectResponse, error)

	// RemoveEnvironmentFromProjectWithResponse request
	RemoveEnvironmentFromProjectWithResponse(ctx context.Context, projectId string, environment string, reqEditors ...RequestEditorFn) (*RemoveEnvironmentFromProjectResponse, error)

	// AddDefaultStrategyToProjectEnvironmentWithBodyWithResponse request with any body
	AddDefaultStrategyToProjectEnvironmentWithBodyWithResponse(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDefaultStrategyToProjectEnvironmentResponse, error)

	AddDefaultStrategyToProjectEnvironmentWithResponse(ctx context.Context, projectId string, environment string, body AddDefaultStrategyToProjectEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDefaultStrategyToProjectEnvironmentResponse, error)

	// RemoveFavoriteProjectWithResponse request
	RemoveFavoriteProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*RemoveFavoriteProjectResponse, error)

	// AddFavoriteProjectWithResponse request
	AddFavoriteProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*AddFavoriteProjectResponse, error)

	// GetFeaturesWithResponse request
	GetFeaturesWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetFeaturesResponse, error)

	// CreateFeatureWithBodyWithResponse request with any body
	CreateFeatureWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeatureResponse, error)

	CreateFeatureWithResponse(ctx context.Context, projectId string, body CreateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeatureResponse, error)

	// ArchiveFeatureWithResponse request
	ArchiveFeatureWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*ArchiveFeatureResponse, error)

	// GetFeatureWithResponse request
	GetFeatureWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*GetFeatureResponse, error)

	// PatchFeatureWithBodyWithResponse request with any body
	PatchFeatureWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeatureResponse, error)

	PatchFeatureWithResponse(ctx context.Context, projectId string, featureName string, body PatchFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeatureResponse, error)

	// UpdateFeatureWithBodyWithResponse request with any body
	UpdateFeatureWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureResponse, error)

	UpdateFeatureWithResponse(ctx context.Context, projectId string, featureName string, body UpdateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureResponse, error)

	// CloneFeatureWithBodyWithResponse request with any body
	CloneFeatureWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneFeatureResponse, error)

	CloneFeatureWithResponse(ctx context.Context, projectId string, featureName string, body CloneFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneFeatureResponse, error)

	// DeleteFeatureDependenciesWithResponse request
	DeleteFeatureDependenciesWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*DeleteFeatureDependenciesResponse, error)

	// AddFeatureDependencyWithBodyWithResponse request with any body
	AddFeatureDependencyWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFeatureDependencyResponse, error)

	AddFeatureDependencyWithResponse(ctx context.Context, projectId string, featureName string, body AddFeatureDependencyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFeatureDependencyResponse, error)

	// DeleteFeatureDependencyWithResponse request
	DeleteFeatureDependencyWithResponse(ctx context.Context, projectId string, featureName string, parent string, reqEditors ...RequestEditorFn) (*DeleteFeatureDependencyResponse, error)

	// GetFeatureEnvironmentWithResponse request
	GetFeatureEnvironmentWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*GetFeatureEnvironmentResponse, error)

	// ToggleFeatureEnvironmentOffWithResponse request
	ToggleFeatureEnvironmentOffWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*ToggleFeatureEnvironmentOffResponse, error)

	// ToggleFeatureEnvironmentOnWithResponse request
	ToggleFeatureEnvironmentOnWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*ToggleFeatureEnvironmentOnResponse, error)

	// GetFeatureStrategiesWithResponse request
	GetFeatureStrategiesWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*GetFeatureStrategiesResponse, error)

	// AddFeatureStrategyWithBodyWithResponse request with any body
	AddFeatureStrategyWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFeatureStrategyResponse, error)

	AddFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, body AddFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFeatureStrategyResponse, error)

	// SetStrategySortOrderWithBodyWithResponse request with any body
	SetStrategySortOrderWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetStrategySortOrderResponse, error)

	SetStrategySortOrderWithResponse(ctx context.Context, projectId string, featureName string, environment string, body SetStrategySortOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*SetStrategySortOrderResponse, error)

	// DeleteFeatureStrategyWithResponse request
	DeleteFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, reqEditors ...RequestEditorFn) (*DeleteFeatureStrategyResponse, error)

	// GetFeatureStrategyWithResponse request
	GetFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, reqEditors ...RequestEditorFn) (*GetFeatureStrategyResponse, error)

	// PatchFeatureStrategyWithBodyWithResponse request with any body
	PatchFeatureStrategyWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeatureStrategyResponse, error)

	PatchFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, body PatchFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeatureStrategyResponse, error)

	// UpdateFeatureStrategyWithBodyWithResponse request with any body
	UpdateFeatureStrategyWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureStrategyResponse, error)

	UpdateFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, body UpdateFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureStrategyResponse, error)

	// GetEnvironmentFeatureVariantsWithResponse request
	GetEnvironmentFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*GetEnvironmentFeatureVariantsResponse, error)

	// PatchEnvironmentsFeatureVariantsWithBodyWithResponse request with any body
	PatchEnvironmentsFeatureVariantsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchEnvironmentsFeatureVariantsResponse, error)

	PatchEnvironmentsFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, environment string, body PatchEnvironmentsFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentsFeatureVariantsResponse, error)

	// OverwriteEnvironmentFeatureVariantsWithBodyWithResponse request with any body
	OverwriteEnvironmentFeatureVariantsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverwriteEnvironmentFeatureVariantsResponse, error)

	OverwriteEnvironmentFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, environment string, body OverwriteEnvironmentFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*OverwriteEnvironmentFeatureVariantsResponse, error)

	// RemoveFavoriteFeatureWithResponse request
	RemoveFavoriteFeatureWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*RemoveFavoriteFeatureResponse, error)

	// AddFavoriteFeatureWithResponse request
	AddFavoriteFeatureWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*AddFavoriteFeatureResponse, error)

	// ListParentOptionsWithResponse request
	ListParentOptionsWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*ListParentOptionsResponse, error)

	// GetFeatureVariantsWithResponse request
	GetFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*GetFeatureVariantsResponse, error)

	// PatchFeatureVariantsWithBodyWithResponse request with any body
	PatchFeatureVariantsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeatureVariantsResponse, error)

	PatchFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, body PatchFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeatureVariantsResponse, error)

	// OverwriteFeatureVariantsWithBodyWithResponse request with any body
	OverwriteFeatureVariantsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverwriteFeatureVariantsResponse, error)

	OverwriteFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, body OverwriteFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*OverwriteFeatureVariantsResponse, error)

	// OverwriteFeatureVariantsOnEnvironmentsWithBodyWithResponse request with any body
	OverwriteFeatureVariantsOnEnvironmentsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverwriteFeatureVariantsOnEnvironmentsResponse, error)

	OverwriteFeatureVariantsOnEnvironmentsWithResponse(ctx context.Context, projectId string, featureName string, body OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*OverwriteFeatureVariantsOnEnvironmentsResponse, error)

	// GetProjectHealthReportWithResponse request
	GetProjectHealthReportWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectHealthReportResponse, error)

	// GetProjectOverviewWithResponse request
	GetProjectOverviewWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectOverviewResponse, error)

	// ReviveFeaturesWithBodyWithResponse request with any body
	ReviveFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviveFeaturesResponse, error)

	ReviveFeaturesWithResponse(ctx context.Context, projectId string, body ReviveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviveFeaturesResponse, error)

	// StaleFeaturesWithBodyWithResponse request with any body
	StaleFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StaleFeaturesResponse, error)

	StaleFeaturesWithResponse(ctx context.Context, projectId string, body StaleFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*StaleFeaturesResponse, error)

	// AddTagToFeaturesWithBodyWithResponse request with any body
	AddTagToFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTagToFeaturesResponse, error)

	AddTagToFeaturesWithResponse(ctx context.Context, projectId string, body AddTagToFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTagToFeaturesResponse, error)

	// SearchFeaturesWithResponse request
	SearchFeaturesWithResponse(ctx context.Context, params *SearchFeaturesParams, reqEditors ...RequestEditorFn) (*SearchFeaturesResponse, error)

	// GetSegmentsWithResponse request
	GetSegmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSegmentsResponse, error)

	// CreateSegmentWithBodyWithResponse request with any body
	CreateSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error)

	CreateSegmentWithResponse(ctx context.Context, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error)

	// UpdateFeatureStrategySegmentsWithBodyWithResponse request with any body
	UpdateFeatureStrategySegmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureStrategySegmentsResponse, error)

	UpdateFeatureStrategySegmentsWithResponse(ctx context.Context, body UpdateFeatureStrategySegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureStrategySegmentsResponse, error)

	// GetSegmentsByStrategyIdWithResponse request
	GetSegmentsByStrategyIdWithResponse(ctx context.Context, strategyId string, reqEditors ...RequestEditorFn) (*GetSegmentsByStrategyIdResponse, error)

	// ValidateSegmentWithBodyWithResponse request with any body
	ValidateSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateSegmentResponse, error)

	ValidateSegmentWithResponse(ctx context.Context, body ValidateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateSegmentResponse, error)

	// RemoveSegmentWithResponse request
	RemoveSegmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RemoveSegmentResponse, error)

	// GetSegmentWithResponse request
	GetSegmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error)

	// UpdateSegmentWithBodyWithResponse request with any body
	UpdateSegmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error)

	UpdateSegmentWithResponse(ctx context.Context, id string, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error)

	// GetStrategiesBySegmentIdWithResponse request
	GetStrategiesBySegmentIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStrategiesBySegmentIdResponse, error)

	// UpdateSplashSettingsWithResponse request
	UpdateSplashSettingsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UpdateSplashSettingsResponse, error)

	// ExportWithResponse request
	ExportWithResponse(ctx context.Context, params *ExportParams, reqEditors ...RequestEditorFn) (*ExportResponse, error)

	// ImportWithBodyWithResponse request with any body
	ImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportResponse, error)

	ImportWithResponse(ctx context.Context, body ImportJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportResponse, error)

	// GetAllStrategiesWithResponse request
	GetAllStrategiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStrategiesResponse, error)

	// CreateStrategyWithBodyWithResponse request with any body
	CreateStrategyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStrategyResponse, error)

	CreateStrategyWithResponse(ctx context.Context, body CreateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStrategyResponse, error)

	// RemoveStrategyWithResponse request
	RemoveStrategyWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*RemoveStrategyResponse, error)

	// GetStrategyWithResponse request
	GetStrategyWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetStrategyResponse, error)

	// UpdateStrategyWithBodyWithResponse request with any body
	UpdateStrategyWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStrategyResponse, error)

	UpdateStrategyWithResponse(ctx context.Context, name string, body UpdateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStrategyResponse, error)

	// DeprecateStrategyWithResponse request
	DeprecateStrategyWithResponse(ctx context.Context, strategyName string, reqEditors ...RequestEditorFn) (*DeprecateStrategyResponse, error)

	// ReactivateStrategyWithResponse request
	ReactivateStrategyWithResponse(ctx context.Context, strategyName string, reqEditors ...RequestEditorFn) (*ReactivateStrategyResponse, error)

	// GetTagTypesWithResponse request
	GetTagTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagTypesResponse, error)

	// CreateTagTypeWithBodyWithResponse request with any body
	CreateTagTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagTypeResponse, error)

	CreateTagTypeWithResponse(ctx context.Context, body CreateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagTypeResponse, error)

	// ValidateTagTypeWithBodyWithResponse request with any body
	ValidateTagTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateTagTypeResponse, error)

	ValidateTagTypeWithResponse(ctx context.Context, body ValidateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateTagTypeResponse, error)

	// DeleteTagTypeWithResponse request
	DeleteTagTypeWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteTagTypeResponse, error)

	// GetTagTypeWithResponse request
	GetTagTypeWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetTagTypeResponse, error)

	// UpdateTagTypeWithBodyWithResponse request with any body
	UpdateTagTypeWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagTypeResponse, error)

	UpdateTagTypeWithResponse(ctx context.Context, name string, body UpdateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagTypeResponse, error)

	// GetTagsWithResponse request
	GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// CreateTagWithBodyWithResponse request with any body
	CreateTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	CreateTagWithResponse(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error)

	// GetTagsByTypeWithResponse request
	GetTagsByTypeWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*GetTagsByTypeResponse, error)

	// DeleteTagWithResponse request
	DeleteTagWithResponse(ctx context.Context, pType string, value string, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error)

	// GetTagWithResponse request
	GetTagWithResponse(ctx context.Context, pType string, value string, reqEditors ...RequestEditorFn) (*GetTagResponse, error)

	// GetTelemetrySettingsWithResponse request
	GetTelemetrySettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTelemetrySettingsResponse, error)

	// GetUiConfigWithResponse request
	GetUiConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUiConfigResponse, error)

	// SetUiConfigWithBodyWithResponse request with any body
	SetUiConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUiConfigResponse, error)

	SetUiConfigWithResponse(ctx context.Context, body SetUiConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUiConfigResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// GetBaseUsersAndGroupsWithResponse request
	GetBaseUsersAndGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBaseUsersAndGroupsResponse, error)

	// GetAdminCountWithResponse request
	GetAdminCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminCountResponse, error)

	// ResetUserPasswordWithBodyWithResponse request with any body
	ResetUserPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetUserPasswordResponse, error)

	ResetUserPasswordWithResponse(ctx context.Context, body ResetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetUserPasswordResponse, error)

	// SearchUsersWithResponse request
	SearchUsersWithResponse(ctx context.Context, params *SearchUsersParams, reqEditors ...RequestEditorFn) (*SearchUsersResponse, error)

	// ValidateUserPasswordWithBodyWithResponse request with any body
	ValidateUserPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateUserPasswordResponse, error)

	ValidateUserPasswordWithResponse(ctx context.Context, body ValidateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateUserPasswordResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, id string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// ChangeUserPasswordWithBodyWithResponse request with any body
	ChangeUserPasswordWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeUserPasswordResponse, error)

	ChangeUserPasswordWithResponse(ctx context.Context, id string, body ChangeUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeUserPasswordResponse, error)

	// ChangeMyPasswordWithBodyWithResponse request with any body
	ChangeMyPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeMyPasswordResponse, error)

	ChangeMyPasswordWithResponse(ctx context.Context, body ChangeMyPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeMyPasswordResponse, error)

	// GetProfileWithResponse request
	GetProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProfileResponse, error)

	// GetPatsWithResponse request
	GetPatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPatsResponse, error)

	// CreatePatWithBodyWithResponse request with any body
	CreatePatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatResponse, error)

	CreatePatWithResponse(ctx context.Context, body CreatePatJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatResponse, error)

	// DeletePatWithResponse request
	DeletePatWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePatResponse, error)

	// GetAllClientFeaturesWithResponse request
	GetAllClientFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllClientFeaturesResponse, error)

	// GetClientFeatureWithResponse request
	GetClientFeatureWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*GetClientFeatureResponse, error)

	// RegisterClientMetricsWithBodyWithResponse request with any body
	RegisterClientMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterClientMetricsResponse, error)

	RegisterClientMetricsWithResponse(ctx context.Context, body RegisterClientMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterClientMetricsResponse, error)

	// RegisterClientApplicationWithBodyWithResponse request with any body
	RegisterClientApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterClientApplicationResponse, error)

	RegisterClientApplicationWithResponse(ctx context.Context, body RegisterClientApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterClientApplicationResponse, error)

	// GetFrontendFeaturesWithResponse request
	GetFrontendFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFrontendFeaturesResponse, error)

	// RegisterFrontendMetricsWithBodyWithResponse request with any body
	RegisterFrontendMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterFrontendMetricsResponse, error)

	RegisterFrontendMetricsWithResponse(ctx context.Context, body RegisterFrontendMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterFrontendMetricsResponse, error)

	// RegisterFrontendClientWithBodyWithResponse request with any body
	RegisterFrontendClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterFrontendClientResponse, error)

	RegisterFrontendClientWithResponse(ctx context.Context, body RegisterFrontendClientJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterFrontendClientResponse, error)

	// ChangePasswordWithBodyWithResponse request with any body
	ChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error)

	ChangePasswordWithResponse(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error)

	// SendResetPasswordEmailWithBodyWithResponse request with any body
	SendResetPasswordEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendResetPasswordEmailResponse, error)

	SendResetPasswordEmailWithResponse(ctx context.Context, body SendResetPasswordEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*SendResetPasswordEmailResponse, error)

	// ValidateTokenWithResponse request
	ValidateTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ValidateTokenResponse, error)

	// ValidatePasswordWithBodyWithResponse request with any body
	ValidatePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidatePasswordResponse, error)

	ValidatePasswordWithResponse(ctx context.Context, body ValidatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidatePasswordResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// BulkMetricsWithBodyWithResponse request with any body
	BulkMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkMetricsResponse, error)

	BulkMetricsWithResponse(ctx context.Context, body BulkMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkMetricsResponse, error)

	// GetValidTokensWithBodyWithResponse request with any body
	GetValidTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetValidTokensResponse, error)

	GetValidTokensWithResponse(ctx context.Context, body GetValidTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*GetValidTokensResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// AddPublicSignupTokenUserWithBodyWithResponse request with any body
	AddPublicSignupTokenUserWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPublicSignupTokenUserResponse, error)

	AddPublicSignupTokenUserWithResponse(ctx context.Context, token string, body AddPublicSignupTokenUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPublicSignupTokenUserResponse, error)

	// ValidatePublicSignupTokenWithResponse request
	ValidatePublicSignupTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*ValidatePublicSignupTokenResponse, error)
}

type GetAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON413 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON413 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllApiTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiTokensSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAllApiTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllApiTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiTokenSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTokensByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiTokensSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiTokensByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTokensByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArchivedFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeaturesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetArchivedFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArchivedFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArchivedFeaturesByProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeaturesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetArchivedFeaturesByProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArchivedFeaturesByProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReviveFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReviveFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReviveFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureUsageSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureUsageSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFeatureUsageSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureUsageSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRawFeatureMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureMetricsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRawFeatureMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRawFeatureMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateConstraintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateConstraintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateConstraintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContextFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContextFieldsSchema
}

// Status returns HTTPResponse.Status
func (r GetContextFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContextFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContextFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContextFieldSchema
}

// Status returns HTTPResponse.Status
func (r CreateContextFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContextFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContextFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContextFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContextFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContextFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContextFieldSchema
}

// Status returns HTTPResponse.Status
func (r GetContextFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContextFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContextFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateContextFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContextFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStrategiesByContextFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContextFieldStrategiesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStrategiesByContextFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStrategiesByContextFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAllEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentsProjectSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProjectEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSortOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateSortOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSortOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleEnvironmentOffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ToggleEnvironmentOffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleEnvironmentOffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleEnvironmentOnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ToggleEnvironmentOnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleEnvironmentOnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventsSchema
}

// Status returns HTTPResponse.Status
func (r SearchEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsForToggleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureEventsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetEventsForToggleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsForToggleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllFeatureTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureTypesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAllFeatureTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllFeatureTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeatureTypeLifetimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureTypeSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateFeatureTypeLifetimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeatureTypeLifetimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllTogglesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeaturesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAllTogglesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTogglesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExportResultSchema
	JSON404      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ExportFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportTogglesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ImportTogglesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportTogglesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportTogglesValidateSchema
	JSON404      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagsSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeedbackResponseSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeedbackResponseSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstanceAdminStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceAdminStatsSchema
}

// Status returns HTTPResponse.Status
func (r GetInstanceAdminStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceAdminStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstanceAdminStatsCsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInstanceAdminStatsCsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceAdminStatsCsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllPublicSignupTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicSignupTokensSchema
}

// Status returns HTTPResponse.Status
func (r GetAllPublicSignupTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllPublicSignupTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePublicSignupTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PublicSignupTokenSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreatePublicSignupTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePublicSignupTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicSignupTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicSignupTokenSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPublicSignupTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicSignupTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePublicSignupTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicSignupTokenSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdatePublicSignupTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePublicSignupTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaintenanceSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ToggleMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationsSchema
}

// Status returns HTTPResponse.Status
func (r GetApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationSchema
	JSON404      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaygroundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlaygroundResponseSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPlaygroundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaygroundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdvancedPlaygroundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedPlaygroundResponseSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdvancedPlaygroundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdvancedPlaygroundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeprecatedProjectOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeprecatedProjectOverviewSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDeprecatedProjectOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeprecatedProjectOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectApiTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiTokensSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProjectApiTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectApiTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiTokenSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateProjectApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteProjectApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ArchiveFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateArchiveFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidateArchiveFeaturesSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateArchiveFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateArchiveFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkToggleFeaturesEnvironmentOffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON413 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkToggleFeaturesEnvironmentOffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkToggleFeaturesEnvironmentOffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkToggleFeaturesEnvironmentOnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON413 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkToggleFeaturesEnvironmentOnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkToggleFeaturesEnvironmentOnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckDependenciesExistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DependenciesExistSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CheckDependenciesExistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckDependenciesExistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectDoraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectDoraMetricsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProjectDoraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectDoraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddEnvironmentToProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddEnvironmentToProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddEnvironmentToProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveEnvironmentFromProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveEnvironmentFromProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveEnvironmentFromProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDefaultStrategyToProjectEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateFeatureStrategySchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddDefaultStrategyToProjectEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDefaultStrategyToProjectEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveFavoriteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveFavoriteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveFavoriteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddFavoriteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddFavoriteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFavoriteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeaturesSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ArchiveFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CloneFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeatureDependenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteFeatureDependenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeatureDependenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddFeatureDependencyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddFeatureDependencyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFeatureDependencyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeatureDependencyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteFeatureDependencyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeatureDependencyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureEnvironmentSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFeatureEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleFeatureEnvironmentOffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ToggleFeatureEnvironmentOffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleFeatureEnvironmentOffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleFeatureEnvironmentOnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ToggleFeatureEnvironmentOnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleFeatureEnvironmentOnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureStrategiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureStrategiesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFeatureStrategiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureStrategiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddFeatureStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureStrategySchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddFeatureStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFeatureStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetStrategySortOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SetStrategySortOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetStrategySortOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeatureStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteFeatureStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeatureStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureStrategySchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFeatureStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFeatureStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureStrategySchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchFeatureStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFeatureStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeatureStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureStrategySchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateFeatureStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeatureStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentFeatureVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureVariantsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentFeatureVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentFeatureVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchEnvironmentsFeatureVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureVariantsSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchEnvironmentsFeatureVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchEnvironmentsFeatureVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OverwriteEnvironmentFeatureVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureVariantsSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r OverwriteEnvironmentFeatureVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OverwriteEnvironmentFeatureVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveFavoriteFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveFavoriteFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveFavoriteFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddFavoriteFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddFavoriteFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFavoriteFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListParentOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParentFeatureOptionsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListParentOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListParentOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureVariantsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFeatureVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFeatureVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureVariantsSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchFeatureVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFeatureVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OverwriteFeatureVariantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureVariantsSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r OverwriteFeatureVariantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OverwriteFeatureVariantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OverwriteFeatureVariantsOnEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeatureVariantsSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r OverwriteFeatureVariantsOnEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OverwriteFeatureVariantsOnEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectHealthReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthReportSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProjectHealthReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectHealthReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectOverviewSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProjectOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReviveFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReviveFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReviveFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StaleFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r StaleFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StaleFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTagToFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddTagToFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTagToFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchFeaturesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SearchFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SegmentsSchema
}

// Status returns HTTPResponse.Status
func (r GetSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AdminSegmentSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeatureStrategySegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UpdateFeatureStrategySegmentsSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateFeatureStrategySegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeatureStrategySegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentsByStrategyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SegmentsSchema
}

// Status returns HTTPResponse.Status
func (r GetSegmentsByStrategyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentsByStrategyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminSegmentSchema
	JSON404      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSegmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateSegmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSegmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStrategiesBySegmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SegmentStrategiesSchema
}

// Status returns HTTPResponse.Status
func (r GetStrategiesBySegmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStrategiesBySegmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSplashSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SplashResponseSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateSplashSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSplashSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StateSchema
}

// Status returns HTTPResponse.Status
func (r ExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllStrategiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StrategiesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAllStrategiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllStrategiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StrategySchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StrategySchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeprecateStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeprecateStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeprecateStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReactivateStrategyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ReactivateStrategyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReactivateStrategyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagTypesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagTypeSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateTagTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateTagTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidateTagTypeSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateTagTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateTagTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteTagTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagTypeSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTagTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateTagTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTagTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TagWithVersionSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsByTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagsByTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsByTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagWithVersionSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetrySettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetrySettingsSchema
}

// Status returns HTTPResponse.Status
func (r GetTelemetrySettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetrySettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUiConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UiConfigSchema
}

// Status returns HTTPResponse.Status
func (r GetUiConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUiConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUiConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetUiConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUiConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateUserResponseSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBaseUsersAndGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersGroupsBaseSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBaseUsersAndGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBaseUsersAndGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminCountSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAdminCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResetPasswordSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ResetUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SearchUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateUserResponseSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ChangeUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeMyPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeMyPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeMyPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatsSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PatSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreatePatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeletePatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllClientFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientFeaturesSchema
}

// Status returns HTTPResponse.Status
func (r GetAllClientFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllClientFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientFeatureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientFeatureSchema
}

// Status returns HTTPResponse.Status
func (r GetClientFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterClientMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RegisterClientMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterClientMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterClientApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegisterClientApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterClientApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFrontendFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProxyFeaturesSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFrontendFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFrontendFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterFrontendMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RegisterFrontendMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterFrontendMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterFrontendClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON401 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r RegisterFrontendClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterFrontendClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON403 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendResetPasswordEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON404 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r SendResetPasswordEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendResetPasswordEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenUserSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidatePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidatePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidatePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSchema
	JSON401      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON413 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidatedEdgeTokensSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON413 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON415 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetValidTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthCheckSchema
	JSON500      *HealthCheckSchema
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPublicSignupTokenUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSchema
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
	JSON409 *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AddPublicSignupTokenUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPublicSignupTokenUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidatePublicSignupTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Id The ID of the error instance
		Id *string `json:"id,omitempty"`

		// Message A description of what went wrong.
		Message *string `json:"message,omitempty"`

		// Name The name of the error kind
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ValidatePublicSignupTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidatePublicSignupTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAddonsWithResponse request returning *GetAddonsResponse
func (c *ClientWithResponses) GetAddonsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAddonsResponse, error) {
	rsp, err := c.GetAddons(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddonsResponse(rsp)
}

// CreateAddonWithBodyWithResponse request with arbitrary body returning *CreateAddonResponse
func (c *ClientWithResponses) CreateAddonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAddonResponse, error) {
	rsp, err := c.CreateAddonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAddonResponse(rsp)
}

func (c *ClientWithResponses) CreateAddonWithResponse(ctx context.Context, body CreateAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAddonResponse, error) {
	rsp, err := c.CreateAddon(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAddonResponse(rsp)
}

// DeleteAddonWithResponse request returning *DeleteAddonResponse
func (c *ClientWithResponses) DeleteAddonWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteAddonResponse, error) {
	rsp, err := c.DeleteAddon(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAddonResponse(rsp)
}

// GetAddonWithResponse request returning *GetAddonResponse
func (c *ClientWithResponses) GetAddonWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAddonResponse, error) {
	rsp, err := c.GetAddon(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddonResponse(rsp)
}

// UpdateAddonWithBodyWithResponse request with arbitrary body returning *UpdateAddonResponse
func (c *ClientWithResponses) UpdateAddonWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAddonResponse, error) {
	rsp, err := c.UpdateAddonWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAddonResponse(rsp)
}

func (c *ClientWithResponses) UpdateAddonWithResponse(ctx context.Context, id string, body UpdateAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAddonResponse, error) {
	rsp, err := c.UpdateAddon(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAddonResponse(rsp)
}

// GetAllApiTokensWithResponse request returning *GetAllApiTokensResponse
func (c *ClientWithResponses) GetAllApiTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllApiTokensResponse, error) {
	rsp, err := c.GetAllApiTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllApiTokensResponse(rsp)
}

// CreateApiTokenWithBodyWithResponse request with arbitrary body returning *CreateApiTokenResponse
func (c *ClientWithResponses) CreateApiTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiTokenResponse, error) {
	rsp, err := c.CreateApiTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateApiTokenWithResponse(ctx context.Context, body CreateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiTokenResponse, error) {
	rsp, err := c.CreateApiToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiTokenResponse(rsp)
}

// GetApiTokensByNameWithResponse request returning *GetApiTokensByNameResponse
func (c *ClientWithResponses) GetApiTokensByNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetApiTokensByNameResponse, error) {
	rsp, err := c.GetApiTokensByName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTokensByNameResponse(rsp)
}

// DeleteApiTokenWithResponse request returning *DeleteApiTokenResponse
func (c *ClientWithResponses) DeleteApiTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*DeleteApiTokenResponse, error) {
	rsp, err := c.DeleteApiToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiTokenResponse(rsp)
}

// UpdateApiTokenWithBodyWithResponse request with arbitrary body returning *UpdateApiTokenResponse
func (c *ClientWithResponses) UpdateApiTokenWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiTokenResponse, error) {
	rsp, err := c.UpdateApiTokenWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiTokenWithResponse(ctx context.Context, token string, body UpdateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiTokenResponse, error) {
	rsp, err := c.UpdateApiToken(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiTokenResponse(rsp)
}

// GetArchivedFeaturesWithResponse request returning *GetArchivedFeaturesResponse
func (c *ClientWithResponses) GetArchivedFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetArchivedFeaturesResponse, error) {
	rsp, err := c.GetArchivedFeatures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArchivedFeaturesResponse(rsp)
}

// GetArchivedFeaturesByProjectIdWithResponse request returning *GetArchivedFeaturesByProjectIdResponse
func (c *ClientWithResponses) GetArchivedFeaturesByProjectIdWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetArchivedFeaturesByProjectIdResponse, error) {
	rsp, err := c.GetArchivedFeaturesByProjectId(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArchivedFeaturesByProjectIdResponse(rsp)
}

// ReviveFeatureWithResponse request returning *ReviveFeatureResponse
func (c *ClientWithResponses) ReviveFeatureWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*ReviveFeatureResponse, error) {
	rsp, err := c.ReviveFeature(ctx, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviveFeatureResponse(rsp)
}

// DeleteFeatureWithResponse request returning *DeleteFeatureResponse
func (c *ClientWithResponses) DeleteFeatureWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*DeleteFeatureResponse, error) {
	rsp, err := c.DeleteFeature(ctx, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeatureResponse(rsp)
}

// GetFeatureUsageSummaryWithResponse request returning *GetFeatureUsageSummaryResponse
func (c *ClientWithResponses) GetFeatureUsageSummaryWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetFeatureUsageSummaryResponse, error) {
	rsp, err := c.GetFeatureUsageSummary(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureUsageSummaryResponse(rsp)
}

// GetRawFeatureMetricsWithResponse request returning *GetRawFeatureMetricsResponse
func (c *ClientWithResponses) GetRawFeatureMetricsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetRawFeatureMetricsResponse, error) {
	rsp, err := c.GetRawFeatureMetrics(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRawFeatureMetricsResponse(rsp)
}

// ValidateConstraintWithBodyWithResponse request with arbitrary body returning *ValidateConstraintResponse
func (c *ClientWithResponses) ValidateConstraintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateConstraintResponse, error) {
	rsp, err := c.ValidateConstraintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateConstraintResponse(rsp)
}

func (c *ClientWithResponses) ValidateConstraintWithResponse(ctx context.Context, body ValidateConstraintJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateConstraintResponse, error) {
	rsp, err := c.ValidateConstraint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateConstraintResponse(rsp)
}

// GetContextFieldsWithResponse request returning *GetContextFieldsResponse
func (c *ClientWithResponses) GetContextFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContextFieldsResponse, error) {
	rsp, err := c.GetContextFields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContextFieldsResponse(rsp)
}

// CreateContextFieldWithBodyWithResponse request with arbitrary body returning *CreateContextFieldResponse
func (c *ClientWithResponses) CreateContextFieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContextFieldResponse, error) {
	rsp, err := c.CreateContextFieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContextFieldResponse(rsp)
}

func (c *ClientWithResponses) CreateContextFieldWithResponse(ctx context.Context, body CreateContextFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContextFieldResponse, error) {
	rsp, err := c.CreateContextField(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContextFieldResponse(rsp)
}

// ValidateWithBodyWithResponse request with arbitrary body returning *ValidateResponse
func (c *ClientWithResponses) ValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateResponse, error) {
	rsp, err := c.ValidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateResponse(rsp)
}

func (c *ClientWithResponses) ValidateWithResponse(ctx context.Context, body ValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateResponse, error) {
	rsp, err := c.Validate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateResponse(rsp)
}

// DeleteContextFieldWithResponse request returning *DeleteContextFieldResponse
func (c *ClientWithResponses) DeleteContextFieldWithResponse(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*DeleteContextFieldResponse, error) {
	rsp, err := c.DeleteContextField(ctx, contextField, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContextFieldResponse(rsp)
}

// GetContextFieldWithResponse request returning *GetContextFieldResponse
func (c *ClientWithResponses) GetContextFieldWithResponse(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*GetContextFieldResponse, error) {
	rsp, err := c.GetContextField(ctx, contextField, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContextFieldResponse(rsp)
}

// UpdateContextFieldWithBodyWithResponse request with arbitrary body returning *UpdateContextFieldResponse
func (c *ClientWithResponses) UpdateContextFieldWithBodyWithResponse(ctx context.Context, contextField string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContextFieldResponse, error) {
	rsp, err := c.UpdateContextFieldWithBody(ctx, contextField, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContextFieldResponse(rsp)
}

func (c *ClientWithResponses) UpdateContextFieldWithResponse(ctx context.Context, contextField string, body UpdateContextFieldJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContextFieldResponse, error) {
	rsp, err := c.UpdateContextField(ctx, contextField, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContextFieldResponse(rsp)
}

// GetStrategiesByContextFieldWithResponse request returning *GetStrategiesByContextFieldResponse
func (c *ClientWithResponses) GetStrategiesByContextFieldWithResponse(ctx context.Context, contextField string, reqEditors ...RequestEditorFn) (*GetStrategiesByContextFieldResponse, error) {
	rsp, err := c.GetStrategiesByContextField(ctx, contextField, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStrategiesByContextFieldResponse(rsp)
}

// GetAllEnvironmentsWithResponse request returning *GetAllEnvironmentsResponse
func (c *ClientWithResponses) GetAllEnvironmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllEnvironmentsResponse, error) {
	rsp, err := c.GetAllEnvironments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEnvironmentsResponse(rsp)
}

// GetProjectEnvironmentsWithResponse request returning *GetProjectEnvironmentsResponse
func (c *ClientWithResponses) GetProjectEnvironmentsWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectEnvironmentsResponse, error) {
	rsp, err := c.GetProjectEnvironments(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectEnvironmentsResponse(rsp)
}

// UpdateSortOrderWithBodyWithResponse request with arbitrary body returning *UpdateSortOrderResponse
func (c *ClientWithResponses) UpdateSortOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSortOrderResponse, error) {
	rsp, err := c.UpdateSortOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSortOrderResponse(rsp)
}

func (c *ClientWithResponses) UpdateSortOrderWithResponse(ctx context.Context, body UpdateSortOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSortOrderResponse, error) {
	rsp, err := c.UpdateSortOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSortOrderResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// ToggleEnvironmentOffWithResponse request returning *ToggleEnvironmentOffResponse
func (c *ClientWithResponses) ToggleEnvironmentOffWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ToggleEnvironmentOffResponse, error) {
	rsp, err := c.ToggleEnvironmentOff(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleEnvironmentOffResponse(rsp)
}

// ToggleEnvironmentOnWithResponse request returning *ToggleEnvironmentOnResponse
func (c *ClientWithResponses) ToggleEnvironmentOnWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*ToggleEnvironmentOnResponse, error) {
	rsp, err := c.ToggleEnvironmentOn(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleEnvironmentOnResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, params *GetEventsParams, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// SearchEventsWithBodyWithResponse request with arbitrary body returning *SearchEventsResponse
func (c *ClientWithResponses) SearchEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchEventsResponse, error) {
	rsp, err := c.SearchEventsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchEventsResponse(rsp)
}

func (c *ClientWithResponses) SearchEventsWithResponse(ctx context.Context, body SearchEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchEventsResponse, error) {
	rsp, err := c.SearchEvents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchEventsResponse(rsp)
}

// GetEventsForToggleWithResponse request returning *GetEventsForToggleResponse
func (c *ClientWithResponses) GetEventsForToggleWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*GetEventsForToggleResponse, error) {
	rsp, err := c.GetEventsForToggle(ctx, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsForToggleResponse(rsp)
}

// GetAllFeatureTypesWithResponse request returning *GetAllFeatureTypesResponse
func (c *ClientWithResponses) GetAllFeatureTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllFeatureTypesResponse, error) {
	rsp, err := c.GetAllFeatureTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllFeatureTypesResponse(rsp)
}

// UpdateFeatureTypeLifetimeWithBodyWithResponse request with arbitrary body returning *UpdateFeatureTypeLifetimeResponse
func (c *ClientWithResponses) UpdateFeatureTypeLifetimeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureTypeLifetimeResponse, error) {
	rsp, err := c.UpdateFeatureTypeLifetimeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureTypeLifetimeResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeatureTypeLifetimeWithResponse(ctx context.Context, id string, body UpdateFeatureTypeLifetimeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureTypeLifetimeResponse, error) {
	rsp, err := c.UpdateFeatureTypeLifetime(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureTypeLifetimeResponse(rsp)
}

// GetAllTogglesWithResponse request returning *GetAllTogglesResponse
func (c *ClientWithResponses) GetAllTogglesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllTogglesResponse, error) {
	rsp, err := c.GetAllToggles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTogglesResponse(rsp)
}

// ExportFeaturesWithBodyWithResponse request with arbitrary body returning *ExportFeaturesResponse
func (c *ClientWithResponses) ExportFeaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExportFeaturesResponse, error) {
	rsp, err := c.ExportFeaturesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportFeaturesResponse(rsp)
}

func (c *ClientWithResponses) ExportFeaturesWithResponse(ctx context.Context, body ExportFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ExportFeaturesResponse, error) {
	rsp, err := c.ExportFeatures(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportFeaturesResponse(rsp)
}

// ImportTogglesWithBodyWithResponse request with arbitrary body returning *ImportTogglesResponse
func (c *ClientWithResponses) ImportTogglesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportTogglesResponse, error) {
	rsp, err := c.ImportTogglesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportTogglesResponse(rsp)
}

func (c *ClientWithResponses) ImportTogglesWithResponse(ctx context.Context, body ImportTogglesJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportTogglesResponse, error) {
	rsp, err := c.ImportToggles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportTogglesResponse(rsp)
}

// ValidateImportWithBodyWithResponse request with arbitrary body returning *ValidateImportResponse
func (c *ClientWithResponses) ValidateImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateImportResponse, error) {
	rsp, err := c.ValidateImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateImportResponse(rsp)
}

func (c *ClientWithResponses) ValidateImportWithResponse(ctx context.Context, body ValidateImportJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateImportResponse, error) {
	rsp, err := c.ValidateImport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateImportResponse(rsp)
}

// ValidateFeatureWithBodyWithResponse request with arbitrary body returning *ValidateFeatureResponse
func (c *ClientWithResponses) ValidateFeatureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateFeatureResponse, error) {
	rsp, err := c.ValidateFeatureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateFeatureResponse(rsp)
}

func (c *ClientWithResponses) ValidateFeatureWithResponse(ctx context.Context, body ValidateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateFeatureResponse, error) {
	rsp, err := c.ValidateFeature(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateFeatureResponse(rsp)
}

// ListTagsWithResponse request returning *ListTagsResponse
func (c *ClientWithResponses) ListTagsWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*ListTagsResponse, error) {
	rsp, err := c.ListTags(ctx, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTagsResponse(rsp)
}

// AddTagWithBodyWithResponse request with arbitrary body returning *AddTagResponse
func (c *ClientWithResponses) AddTagWithBodyWithResponse(ctx context.Context, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTagResponse, error) {
	rsp, err := c.AddTagWithBody(ctx, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTagResponse(rsp)
}

func (c *ClientWithResponses) AddTagWithResponse(ctx context.Context, featureName string, body AddTagJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTagResponse, error) {
	rsp, err := c.AddTag(ctx, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTagResponse(rsp)
}

// UpdateTagsWithBodyWithResponse request with arbitrary body returning *UpdateTagsResponse
func (c *ClientWithResponses) UpdateTagsWithBodyWithResponse(ctx context.Context, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagsResponse, error) {
	rsp, err := c.UpdateTagsWithBody(ctx, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagsResponse(rsp)
}

func (c *ClientWithResponses) UpdateTagsWithResponse(ctx context.Context, featureName string, body UpdateTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagsResponse, error) {
	rsp, err := c.UpdateTags(ctx, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagsResponse(rsp)
}

// RemoveTagWithResponse request returning *RemoveTagResponse
func (c *ClientWithResponses) RemoveTagWithResponse(ctx context.Context, featureName string, pType string, value string, reqEditors ...RequestEditorFn) (*RemoveTagResponse, error) {
	rsp, err := c.RemoveTag(ctx, featureName, pType, value, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTagResponse(rsp)
}

// CreateFeedbackWithBodyWithResponse request with arbitrary body returning *CreateFeedbackResponse
func (c *ClientWithResponses) CreateFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeedbackResponse, error) {
	rsp, err := c.CreateFeedbackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeedbackResponse(rsp)
}

func (c *ClientWithResponses) CreateFeedbackWithResponse(ctx context.Context, body CreateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeedbackResponse, error) {
	rsp, err := c.CreateFeedback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeedbackResponse(rsp)
}

// UpdateFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateFeedbackResponse
func (c *ClientWithResponses) UpdateFeedbackWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeedbackResponse, error) {
	rsp, err := c.UpdateFeedbackWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeedbackResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeedbackWithResponse(ctx context.Context, id string, body UpdateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeedbackResponse, error) {
	rsp, err := c.UpdateFeedback(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeedbackResponse(rsp)
}

// GetInstanceAdminStatsWithResponse request returning *GetInstanceAdminStatsResponse
func (c *ClientWithResponses) GetInstanceAdminStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInstanceAdminStatsResponse, error) {
	rsp, err := c.GetInstanceAdminStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceAdminStatsResponse(rsp)
}

// GetInstanceAdminStatsCsvWithResponse request returning *GetInstanceAdminStatsCsvResponse
func (c *ClientWithResponses) GetInstanceAdminStatsCsvWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInstanceAdminStatsCsvResponse, error) {
	rsp, err := c.GetInstanceAdminStatsCsv(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceAdminStatsCsvResponse(rsp)
}

// GetAllPublicSignupTokensWithResponse request returning *GetAllPublicSignupTokensResponse
func (c *ClientWithResponses) GetAllPublicSignupTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllPublicSignupTokensResponse, error) {
	rsp, err := c.GetAllPublicSignupTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllPublicSignupTokensResponse(rsp)
}

// CreatePublicSignupTokenWithBodyWithResponse request with arbitrary body returning *CreatePublicSignupTokenResponse
func (c *ClientWithResponses) CreatePublicSignupTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePublicSignupTokenResponse, error) {
	rsp, err := c.CreatePublicSignupTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePublicSignupTokenResponse(rsp)
}

func (c *ClientWithResponses) CreatePublicSignupTokenWithResponse(ctx context.Context, body CreatePublicSignupTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePublicSignupTokenResponse, error) {
	rsp, err := c.CreatePublicSignupToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePublicSignupTokenResponse(rsp)
}

// GetPublicSignupTokenWithResponse request returning *GetPublicSignupTokenResponse
func (c *ClientWithResponses) GetPublicSignupTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*GetPublicSignupTokenResponse, error) {
	rsp, err := c.GetPublicSignupToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicSignupTokenResponse(rsp)
}

// UpdatePublicSignupTokenWithBodyWithResponse request with arbitrary body returning *UpdatePublicSignupTokenResponse
func (c *ClientWithResponses) UpdatePublicSignupTokenWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePublicSignupTokenResponse, error) {
	rsp, err := c.UpdatePublicSignupTokenWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePublicSignupTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdatePublicSignupTokenWithResponse(ctx context.Context, token string, body UpdatePublicSignupTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePublicSignupTokenResponse, error) {
	rsp, err := c.UpdatePublicSignupToken(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePublicSignupTokenResponse(rsp)
}

// GetMaintenanceWithResponse request returning *GetMaintenanceResponse
func (c *ClientWithResponses) GetMaintenanceWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMaintenanceResponse, error) {
	rsp, err := c.GetMaintenance(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMaintenanceResponse(rsp)
}

// ToggleMaintenanceWithBodyWithResponse request with arbitrary body returning *ToggleMaintenanceResponse
func (c *ClientWithResponses) ToggleMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToggleMaintenanceResponse, error) {
	rsp, err := c.ToggleMaintenanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) ToggleMaintenanceWithResponse(ctx context.Context, body ToggleMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*ToggleMaintenanceResponse, error) {
	rsp, err := c.ToggleMaintenance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleMaintenanceResponse(rsp)
}

// GetApplicationsWithResponse request returning *GetApplicationsResponse
func (c *ClientWithResponses) GetApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApplicationsResponse, error) {
	rsp, err := c.GetApplications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsResponse(rsp)
}

// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, appName string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error) {
	rsp, err := c.DeleteApplication(ctx, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationResponse(rsp)
}

// GetApplicationWithResponse request returning *GetApplicationResponse
func (c *ClientWithResponses) GetApplicationWithResponse(ctx context.Context, appName string, reqEditors ...RequestEditorFn) (*GetApplicationResponse, error) {
	rsp, err := c.GetApplication(ctx, appName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationResponse(rsp)
}

// CreateApplicationWithBodyWithResponse request with arbitrary body returning *CreateApplicationResponse
func (c *ClientWithResponses) CreateApplicationWithBodyWithResponse(ctx context.Context, appName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplicationWithBody(ctx, appName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationWithResponse(ctx context.Context, appName string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplication(ctx, appName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

// GetPlaygroundWithBodyWithResponse request with arbitrary body returning *GetPlaygroundResponse
func (c *ClientWithResponses) GetPlaygroundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPlaygroundResponse, error) {
	rsp, err := c.GetPlaygroundWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaygroundResponse(rsp)
}

func (c *ClientWithResponses) GetPlaygroundWithResponse(ctx context.Context, body GetPlaygroundJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPlaygroundResponse, error) {
	rsp, err := c.GetPlayground(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaygroundResponse(rsp)
}

// GetAdvancedPlaygroundWithBodyWithResponse request with arbitrary body returning *GetAdvancedPlaygroundResponse
func (c *ClientWithResponses) GetAdvancedPlaygroundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetAdvancedPlaygroundResponse, error) {
	rsp, err := c.GetAdvancedPlaygroundWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdvancedPlaygroundResponse(rsp)
}

func (c *ClientWithResponses) GetAdvancedPlaygroundWithResponse(ctx context.Context, body GetAdvancedPlaygroundJSONRequestBody, reqEditors ...RequestEditorFn) (*GetAdvancedPlaygroundResponse, error) {
	rsp, err := c.GetAdvancedPlayground(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdvancedPlaygroundResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// GetDeprecatedProjectOverviewWithResponse request returning *GetDeprecatedProjectOverviewResponse
func (c *ClientWithResponses) GetDeprecatedProjectOverviewWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetDeprecatedProjectOverviewResponse, error) {
	rsp, err := c.GetDeprecatedProjectOverview(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeprecatedProjectOverviewResponse(rsp)
}

// GetProjectApiTokensWithResponse request returning *GetProjectApiTokensResponse
func (c *ClientWithResponses) GetProjectApiTokensWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectApiTokensResponse, error) {
	rsp, err := c.GetProjectApiTokens(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectApiTokensResponse(rsp)
}

// CreateProjectApiTokenWithBodyWithResponse request with arbitrary body returning *CreateProjectApiTokenResponse
func (c *ClientWithResponses) CreateProjectApiTokenWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectApiTokenResponse, error) {
	rsp, err := c.CreateProjectApiTokenWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectApiTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectApiTokenWithResponse(ctx context.Context, projectId string, body CreateProjectApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectApiTokenResponse, error) {
	rsp, err := c.CreateProjectApiToken(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectApiTokenResponse(rsp)
}

// DeleteProjectApiTokenWithResponse request returning *DeleteProjectApiTokenResponse
func (c *ClientWithResponses) DeleteProjectApiTokenWithResponse(ctx context.Context, projectId string, token string, reqEditors ...RequestEditorFn) (*DeleteProjectApiTokenResponse, error) {
	rsp, err := c.DeleteProjectApiToken(ctx, projectId, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectApiTokenResponse(rsp)
}

// ArchiveFeaturesWithBodyWithResponse request with arbitrary body returning *ArchiveFeaturesResponse
func (c *ClientWithResponses) ArchiveFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArchiveFeaturesResponse, error) {
	rsp, err := c.ArchiveFeaturesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveFeaturesResponse(rsp)
}

func (c *ClientWithResponses) ArchiveFeaturesWithResponse(ctx context.Context, projectId string, body ArchiveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ArchiveFeaturesResponse, error) {
	rsp, err := c.ArchiveFeatures(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveFeaturesResponse(rsp)
}

// ValidateArchiveFeaturesWithBodyWithResponse request with arbitrary body returning *ValidateArchiveFeaturesResponse
func (c *ClientWithResponses) ValidateArchiveFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateArchiveFeaturesResponse, error) {
	rsp, err := c.ValidateArchiveFeaturesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateArchiveFeaturesResponse(rsp)
}

func (c *ClientWithResponses) ValidateArchiveFeaturesWithResponse(ctx context.Context, projectId string, body ValidateArchiveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateArchiveFeaturesResponse, error) {
	rsp, err := c.ValidateArchiveFeatures(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateArchiveFeaturesResponse(rsp)
}

// BulkToggleFeaturesEnvironmentOffWithBodyWithResponse request with arbitrary body returning *BulkToggleFeaturesEnvironmentOffResponse
func (c *ClientWithResponses) BulkToggleFeaturesEnvironmentOffWithBodyWithResponse(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkToggleFeaturesEnvironmentOffResponse, error) {
	rsp, err := c.BulkToggleFeaturesEnvironmentOffWithBody(ctx, projectId, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkToggleFeaturesEnvironmentOffResponse(rsp)
}

func (c *ClientWithResponses) BulkToggleFeaturesEnvironmentOffWithResponse(ctx context.Context, projectId string, environment string, body BulkToggleFeaturesEnvironmentOffJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkToggleFeaturesEnvironmentOffResponse, error) {
	rsp, err := c.BulkToggleFeaturesEnvironmentOff(ctx, projectId, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkToggleFeaturesEnvironmentOffResponse(rsp)
}

// BulkToggleFeaturesEnvironmentOnWithBodyWithResponse request with arbitrary body returning *BulkToggleFeaturesEnvironmentOnResponse
func (c *ClientWithResponses) BulkToggleFeaturesEnvironmentOnWithBodyWithResponse(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkToggleFeaturesEnvironmentOnResponse, error) {
	rsp, err := c.BulkToggleFeaturesEnvironmentOnWithBody(ctx, projectId, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkToggleFeaturesEnvironmentOnResponse(rsp)
}

func (c *ClientWithResponses) BulkToggleFeaturesEnvironmentOnWithResponse(ctx context.Context, projectId string, environment string, body BulkToggleFeaturesEnvironmentOnJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkToggleFeaturesEnvironmentOnResponse, error) {
	rsp, err := c.BulkToggleFeaturesEnvironmentOn(ctx, projectId, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkToggleFeaturesEnvironmentOnResponse(rsp)
}

// DeleteFeaturesWithBodyWithResponse request with arbitrary body returning *DeleteFeaturesResponse
func (c *ClientWithResponses) DeleteFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteFeaturesResponse, error) {
	rsp, err := c.DeleteFeaturesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeaturesResponse(rsp)
}

func (c *ClientWithResponses) DeleteFeaturesWithResponse(ctx context.Context, projectId string, body DeleteFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteFeaturesResponse, error) {
	rsp, err := c.DeleteFeatures(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeaturesResponse(rsp)
}

// CheckDependenciesExistWithResponse request returning *CheckDependenciesExistResponse
func (c *ClientWithResponses) CheckDependenciesExistWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*CheckDependenciesExistResponse, error) {
	rsp, err := c.CheckDependenciesExist(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckDependenciesExistResponse(rsp)
}

// GetProjectDoraWithResponse request returning *GetProjectDoraResponse
func (c *ClientWithResponses) GetProjectDoraWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectDoraResponse, error) {
	rsp, err := c.GetProjectDora(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectDoraResponse(rsp)
}

// AddEnvironmentToProjectWithBodyWithResponse request with arbitrary body returning *AddEnvironmentToProjectResponse
func (c *ClientWithResponses) AddEnvironmentToProjectWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddEnvironmentToProjectResponse, error) {
	rsp, err := c.AddEnvironmentToProjectWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddEnvironmentToProjectResponse(rsp)
}

func (c *ClientWithResponses) AddEnvironmentToProjectWithResponse(ctx context.Context, projectId string, body AddEnvironmentToProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*AddEnvironmentToProjectResponse, error) {
	rsp, err := c.AddEnvironmentToProject(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddEnvironmentToProjectResponse(rsp)
}

// RemoveEnvironmentFromProjectWithResponse request returning *RemoveEnvironmentFromProjectResponse
func (c *ClientWithResponses) RemoveEnvironmentFromProjectWithResponse(ctx context.Context, projectId string, environment string, reqEditors ...RequestEditorFn) (*RemoveEnvironmentFromProjectResponse, error) {
	rsp, err := c.RemoveEnvironmentFromProject(ctx, projectId, environment, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveEnvironmentFromProjectResponse(rsp)
}

// AddDefaultStrategyToProjectEnvironmentWithBodyWithResponse request with arbitrary body returning *AddDefaultStrategyToProjectEnvironmentResponse
func (c *ClientWithResponses) AddDefaultStrategyToProjectEnvironmentWithBodyWithResponse(ctx context.Context, projectId string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDefaultStrategyToProjectEnvironmentResponse, error) {
	rsp, err := c.AddDefaultStrategyToProjectEnvironmentWithBody(ctx, projectId, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDefaultStrategyToProjectEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) AddDefaultStrategyToProjectEnvironmentWithResponse(ctx context.Context, projectId string, environment string, body AddDefaultStrategyToProjectEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDefaultStrategyToProjectEnvironmentResponse, error) {
	rsp, err := c.AddDefaultStrategyToProjectEnvironment(ctx, projectId, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddDefaultStrategyToProjectEnvironmentResponse(rsp)
}

// RemoveFavoriteProjectWithResponse request returning *RemoveFavoriteProjectResponse
func (c *ClientWithResponses) RemoveFavoriteProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*RemoveFavoriteProjectResponse, error) {
	rsp, err := c.RemoveFavoriteProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFavoriteProjectResponse(rsp)
}

// AddFavoriteProjectWithResponse request returning *AddFavoriteProjectResponse
func (c *ClientWithResponses) AddFavoriteProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*AddFavoriteProjectResponse, error) {
	rsp, err := c.AddFavoriteProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFavoriteProjectResponse(rsp)
}

// GetFeaturesWithResponse request returning *GetFeaturesResponse
func (c *ClientWithResponses) GetFeaturesWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetFeaturesResponse, error) {
	rsp, err := c.GetFeatures(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeaturesResponse(rsp)
}

// CreateFeatureWithBodyWithResponse request with arbitrary body returning *CreateFeatureResponse
func (c *ClientWithResponses) CreateFeatureWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeatureResponse, error) {
	rsp, err := c.CreateFeatureWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeatureResponse(rsp)
}

func (c *ClientWithResponses) CreateFeatureWithResponse(ctx context.Context, projectId string, body CreateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeatureResponse, error) {
	rsp, err := c.CreateFeature(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeatureResponse(rsp)
}

// ArchiveFeatureWithResponse request returning *ArchiveFeatureResponse
func (c *ClientWithResponses) ArchiveFeatureWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*ArchiveFeatureResponse, error) {
	rsp, err := c.ArchiveFeature(ctx, projectId, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveFeatureResponse(rsp)
}

// GetFeatureWithResponse request returning *GetFeatureResponse
func (c *ClientWithResponses) GetFeatureWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*GetFeatureResponse, error) {
	rsp, err := c.GetFeature(ctx, projectId, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureResponse(rsp)
}

// PatchFeatureWithBodyWithResponse request with arbitrary body returning *PatchFeatureResponse
func (c *ClientWithResponses) PatchFeatureWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeatureResponse, error) {
	rsp, err := c.PatchFeatureWithBody(ctx, projectId, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeatureResponse(rsp)
}

func (c *ClientWithResponses) PatchFeatureWithResponse(ctx context.Context, projectId string, featureName string, body PatchFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeatureResponse, error) {
	rsp, err := c.PatchFeature(ctx, projectId, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeatureResponse(rsp)
}

// UpdateFeatureWithBodyWithResponse request with arbitrary body returning *UpdateFeatureResponse
func (c *ClientWithResponses) UpdateFeatureWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureResponse, error) {
	rsp, err := c.UpdateFeatureWithBody(ctx, projectId, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeatureWithResponse(ctx context.Context, projectId string, featureName string, body UpdateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureResponse, error) {
	rsp, err := c.UpdateFeature(ctx, projectId, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureResponse(rsp)
}

// CloneFeatureWithBodyWithResponse request with arbitrary body returning *CloneFeatureResponse
func (c *ClientWithResponses) CloneFeatureWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CloneFeatureResponse, error) {
	rsp, err := c.CloneFeatureWithBody(ctx, projectId, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneFeatureResponse(rsp)
}

func (c *ClientWithResponses) CloneFeatureWithResponse(ctx context.Context, projectId string, featureName string, body CloneFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*CloneFeatureResponse, error) {
	rsp, err := c.CloneFeature(ctx, projectId, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneFeatureResponse(rsp)
}

// DeleteFeatureDependenciesWithResponse request returning *DeleteFeatureDependenciesResponse
func (c *ClientWithResponses) DeleteFeatureDependenciesWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*DeleteFeatureDependenciesResponse, error) {
	rsp, err := c.DeleteFeatureDependencies(ctx, projectId, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeatureDependenciesResponse(rsp)
}

// AddFeatureDependencyWithBodyWithResponse request with arbitrary body returning *AddFeatureDependencyResponse
func (c *ClientWithResponses) AddFeatureDependencyWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFeatureDependencyResponse, error) {
	rsp, err := c.AddFeatureDependencyWithBody(ctx, projectId, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFeatureDependencyResponse(rsp)
}

func (c *ClientWithResponses) AddFeatureDependencyWithResponse(ctx context.Context, projectId string, featureName string, body AddFeatureDependencyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFeatureDependencyResponse, error) {
	rsp, err := c.AddFeatureDependency(ctx, projectId, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFeatureDependencyResponse(rsp)
}

// DeleteFeatureDependencyWithResponse request returning *DeleteFeatureDependencyResponse
func (c *ClientWithResponses) DeleteFeatureDependencyWithResponse(ctx context.Context, projectId string, featureName string, parent string, reqEditors ...RequestEditorFn) (*DeleteFeatureDependencyResponse, error) {
	rsp, err := c.DeleteFeatureDependency(ctx, projectId, featureName, parent, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeatureDependencyResponse(rsp)
}

// GetFeatureEnvironmentWithResponse request returning *GetFeatureEnvironmentResponse
func (c *ClientWithResponses) GetFeatureEnvironmentWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*GetFeatureEnvironmentResponse, error) {
	rsp, err := c.GetFeatureEnvironment(ctx, projectId, featureName, environment, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureEnvironmentResponse(rsp)
}

// ToggleFeatureEnvironmentOffWithResponse request returning *ToggleFeatureEnvironmentOffResponse
func (c *ClientWithResponses) ToggleFeatureEnvironmentOffWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*ToggleFeatureEnvironmentOffResponse, error) {
	rsp, err := c.ToggleFeatureEnvironmentOff(ctx, projectId, featureName, environment, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleFeatureEnvironmentOffResponse(rsp)
}

// ToggleFeatureEnvironmentOnWithResponse request returning *ToggleFeatureEnvironmentOnResponse
func (c *ClientWithResponses) ToggleFeatureEnvironmentOnWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*ToggleFeatureEnvironmentOnResponse, error) {
	rsp, err := c.ToggleFeatureEnvironmentOn(ctx, projectId, featureName, environment, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleFeatureEnvironmentOnResponse(rsp)
}

// GetFeatureStrategiesWithResponse request returning *GetFeatureStrategiesResponse
func (c *ClientWithResponses) GetFeatureStrategiesWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*GetFeatureStrategiesResponse, error) {
	rsp, err := c.GetFeatureStrategies(ctx, projectId, featureName, environment, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureStrategiesResponse(rsp)
}

// AddFeatureStrategyWithBodyWithResponse request with arbitrary body returning *AddFeatureStrategyResponse
func (c *ClientWithResponses) AddFeatureStrategyWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFeatureStrategyResponse, error) {
	rsp, err := c.AddFeatureStrategyWithBody(ctx, projectId, featureName, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFeatureStrategyResponse(rsp)
}

func (c *ClientWithResponses) AddFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, body AddFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFeatureStrategyResponse, error) {
	rsp, err := c.AddFeatureStrategy(ctx, projectId, featureName, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFeatureStrategyResponse(rsp)
}

// SetStrategySortOrderWithBodyWithResponse request with arbitrary body returning *SetStrategySortOrderResponse
func (c *ClientWithResponses) SetStrategySortOrderWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetStrategySortOrderResponse, error) {
	rsp, err := c.SetStrategySortOrderWithBody(ctx, projectId, featureName, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetStrategySortOrderResponse(rsp)
}

func (c *ClientWithResponses) SetStrategySortOrderWithResponse(ctx context.Context, projectId string, featureName string, environment string, body SetStrategySortOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*SetStrategySortOrderResponse, error) {
	rsp, err := c.SetStrategySortOrder(ctx, projectId, featureName, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetStrategySortOrderResponse(rsp)
}

// DeleteFeatureStrategyWithResponse request returning *DeleteFeatureStrategyResponse
func (c *ClientWithResponses) DeleteFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, reqEditors ...RequestEditorFn) (*DeleteFeatureStrategyResponse, error) {
	rsp, err := c.DeleteFeatureStrategy(ctx, projectId, featureName, environment, strategyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeatureStrategyResponse(rsp)
}

// GetFeatureStrategyWithResponse request returning *GetFeatureStrategyResponse
func (c *ClientWithResponses) GetFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, reqEditors ...RequestEditorFn) (*GetFeatureStrategyResponse, error) {
	rsp, err := c.GetFeatureStrategy(ctx, projectId, featureName, environment, strategyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureStrategyResponse(rsp)
}

// PatchFeatureStrategyWithBodyWithResponse request with arbitrary body returning *PatchFeatureStrategyResponse
func (c *ClientWithResponses) PatchFeatureStrategyWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeatureStrategyResponse, error) {
	rsp, err := c.PatchFeatureStrategyWithBody(ctx, projectId, featureName, environment, strategyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeatureStrategyResponse(rsp)
}

func (c *ClientWithResponses) PatchFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, body PatchFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeatureStrategyResponse, error) {
	rsp, err := c.PatchFeatureStrategy(ctx, projectId, featureName, environment, strategyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeatureStrategyResponse(rsp)
}

// UpdateFeatureStrategyWithBodyWithResponse request with arbitrary body returning *UpdateFeatureStrategyResponse
func (c *ClientWithResponses) UpdateFeatureStrategyWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureStrategyResponse, error) {
	rsp, err := c.UpdateFeatureStrategyWithBody(ctx, projectId, featureName, environment, strategyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureStrategyResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeatureStrategyWithResponse(ctx context.Context, projectId string, featureName string, environment string, strategyId string, body UpdateFeatureStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureStrategyResponse, error) {
	rsp, err := c.UpdateFeatureStrategy(ctx, projectId, featureName, environment, strategyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureStrategyResponse(rsp)
}

// GetEnvironmentFeatureVariantsWithResponse request returning *GetEnvironmentFeatureVariantsResponse
func (c *ClientWithResponses) GetEnvironmentFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, environment string, reqEditors ...RequestEditorFn) (*GetEnvironmentFeatureVariantsResponse, error) {
	rsp, err := c.GetEnvironmentFeatureVariants(ctx, projectId, featureName, environment, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentFeatureVariantsResponse(rsp)
}

// PatchEnvironmentsFeatureVariantsWithBodyWithResponse request with arbitrary body returning *PatchEnvironmentsFeatureVariantsResponse
func (c *ClientWithResponses) PatchEnvironmentsFeatureVariantsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchEnvironmentsFeatureVariantsResponse, error) {
	rsp, err := c.PatchEnvironmentsFeatureVariantsWithBody(ctx, projectId, featureName, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEnvironmentsFeatureVariantsResponse(rsp)
}

func (c *ClientWithResponses) PatchEnvironmentsFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, environment string, body PatchEnvironmentsFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentsFeatureVariantsResponse, error) {
	rsp, err := c.PatchEnvironmentsFeatureVariants(ctx, projectId, featureName, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEnvironmentsFeatureVariantsResponse(rsp)
}

// OverwriteEnvironmentFeatureVariantsWithBodyWithResponse request with arbitrary body returning *OverwriteEnvironmentFeatureVariantsResponse
func (c *ClientWithResponses) OverwriteEnvironmentFeatureVariantsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, environment string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverwriteEnvironmentFeatureVariantsResponse, error) {
	rsp, err := c.OverwriteEnvironmentFeatureVariantsWithBody(ctx, projectId, featureName, environment, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverwriteEnvironmentFeatureVariantsResponse(rsp)
}

func (c *ClientWithResponses) OverwriteEnvironmentFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, environment string, body OverwriteEnvironmentFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*OverwriteEnvironmentFeatureVariantsResponse, error) {
	rsp, err := c.OverwriteEnvironmentFeatureVariants(ctx, projectId, featureName, environment, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverwriteEnvironmentFeatureVariantsResponse(rsp)
}

// RemoveFavoriteFeatureWithResponse request returning *RemoveFavoriteFeatureResponse
func (c *ClientWithResponses) RemoveFavoriteFeatureWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*RemoveFavoriteFeatureResponse, error) {
	rsp, err := c.RemoveFavoriteFeature(ctx, projectId, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveFavoriteFeatureResponse(rsp)
}

// AddFavoriteFeatureWithResponse request returning *AddFavoriteFeatureResponse
func (c *ClientWithResponses) AddFavoriteFeatureWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*AddFavoriteFeatureResponse, error) {
	rsp, err := c.AddFavoriteFeature(ctx, projectId, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFavoriteFeatureResponse(rsp)
}

// ListParentOptionsWithResponse request returning *ListParentOptionsResponse
func (c *ClientWithResponses) ListParentOptionsWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*ListParentOptionsResponse, error) {
	rsp, err := c.ListParentOptions(ctx, projectId, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListParentOptionsResponse(rsp)
}

// GetFeatureVariantsWithResponse request returning *GetFeatureVariantsResponse
func (c *ClientWithResponses) GetFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, reqEditors ...RequestEditorFn) (*GetFeatureVariantsResponse, error) {
	rsp, err := c.GetFeatureVariants(ctx, projectId, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureVariantsResponse(rsp)
}

// PatchFeatureVariantsWithBodyWithResponse request with arbitrary body returning *PatchFeatureVariantsResponse
func (c *ClientWithResponses) PatchFeatureVariantsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFeatureVariantsResponse, error) {
	rsp, err := c.PatchFeatureVariantsWithBody(ctx, projectId, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeatureVariantsResponse(rsp)
}

func (c *ClientWithResponses) PatchFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, body PatchFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFeatureVariantsResponse, error) {
	rsp, err := c.PatchFeatureVariants(ctx, projectId, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFeatureVariantsResponse(rsp)
}

// OverwriteFeatureVariantsWithBodyWithResponse request with arbitrary body returning *OverwriteFeatureVariantsResponse
func (c *ClientWithResponses) OverwriteFeatureVariantsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverwriteFeatureVariantsResponse, error) {
	rsp, err := c.OverwriteFeatureVariantsWithBody(ctx, projectId, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverwriteFeatureVariantsResponse(rsp)
}

func (c *ClientWithResponses) OverwriteFeatureVariantsWithResponse(ctx context.Context, projectId string, featureName string, body OverwriteFeatureVariantsJSONRequestBody, reqEditors ...RequestEditorFn) (*OverwriteFeatureVariantsResponse, error) {
	rsp, err := c.OverwriteFeatureVariants(ctx, projectId, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverwriteFeatureVariantsResponse(rsp)
}

// OverwriteFeatureVariantsOnEnvironmentsWithBodyWithResponse request with arbitrary body returning *OverwriteFeatureVariantsOnEnvironmentsResponse
func (c *ClientWithResponses) OverwriteFeatureVariantsOnEnvironmentsWithBodyWithResponse(ctx context.Context, projectId string, featureName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverwriteFeatureVariantsOnEnvironmentsResponse, error) {
	rsp, err := c.OverwriteFeatureVariantsOnEnvironmentsWithBody(ctx, projectId, featureName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverwriteFeatureVariantsOnEnvironmentsResponse(rsp)
}

func (c *ClientWithResponses) OverwriteFeatureVariantsOnEnvironmentsWithResponse(ctx context.Context, projectId string, featureName string, body OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*OverwriteFeatureVariantsOnEnvironmentsResponse, error) {
	rsp, err := c.OverwriteFeatureVariantsOnEnvironments(ctx, projectId, featureName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverwriteFeatureVariantsOnEnvironmentsResponse(rsp)
}

// GetProjectHealthReportWithResponse request returning *GetProjectHealthReportResponse
func (c *ClientWithResponses) GetProjectHealthReportWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectHealthReportResponse, error) {
	rsp, err := c.GetProjectHealthReport(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectHealthReportResponse(rsp)
}

// GetProjectOverviewWithResponse request returning *GetProjectOverviewResponse
func (c *ClientWithResponses) GetProjectOverviewWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectOverviewResponse, error) {
	rsp, err := c.GetProjectOverview(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectOverviewResponse(rsp)
}

// ReviveFeaturesWithBodyWithResponse request with arbitrary body returning *ReviveFeaturesResponse
func (c *ClientWithResponses) ReviveFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviveFeaturesResponse, error) {
	rsp, err := c.ReviveFeaturesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviveFeaturesResponse(rsp)
}

func (c *ClientWithResponses) ReviveFeaturesWithResponse(ctx context.Context, projectId string, body ReviveFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviveFeaturesResponse, error) {
	rsp, err := c.ReviveFeatures(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviveFeaturesResponse(rsp)
}

// StaleFeaturesWithBodyWithResponse request with arbitrary body returning *StaleFeaturesResponse
func (c *ClientWithResponses) StaleFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StaleFeaturesResponse, error) {
	rsp, err := c.StaleFeaturesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStaleFeaturesResponse(rsp)
}

func (c *ClientWithResponses) StaleFeaturesWithResponse(ctx context.Context, projectId string, body StaleFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*StaleFeaturesResponse, error) {
	rsp, err := c.StaleFeatures(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStaleFeaturesResponse(rsp)
}

// AddTagToFeaturesWithBodyWithResponse request with arbitrary body returning *AddTagToFeaturesResponse
func (c *ClientWithResponses) AddTagToFeaturesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTagToFeaturesResponse, error) {
	rsp, err := c.AddTagToFeaturesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTagToFeaturesResponse(rsp)
}

func (c *ClientWithResponses) AddTagToFeaturesWithResponse(ctx context.Context, projectId string, body AddTagToFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTagToFeaturesResponse, error) {
	rsp, err := c.AddTagToFeatures(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTagToFeaturesResponse(rsp)
}

// SearchFeaturesWithResponse request returning *SearchFeaturesResponse
func (c *ClientWithResponses) SearchFeaturesWithResponse(ctx context.Context, params *SearchFeaturesParams, reqEditors ...RequestEditorFn) (*SearchFeaturesResponse, error) {
	rsp, err := c.SearchFeatures(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchFeaturesResponse(rsp)
}

// GetSegmentsWithResponse request returning *GetSegmentsResponse
func (c *ClientWithResponses) GetSegmentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSegmentsResponse, error) {
	rsp, err := c.GetSegments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentsResponse(rsp)
}

// CreateSegmentWithBodyWithResponse request with arbitrary body returning *CreateSegmentResponse
func (c *ClientWithResponses) CreateSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error) {
	rsp, err := c.CreateSegmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSegmentResponse(rsp)
}

func (c *ClientWithResponses) CreateSegmentWithResponse(ctx context.Context, body CreateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSegmentResponse, error) {
	rsp, err := c.CreateSegment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSegmentResponse(rsp)
}

// UpdateFeatureStrategySegmentsWithBodyWithResponse request with arbitrary body returning *UpdateFeatureStrategySegmentsResponse
func (c *ClientWithResponses) UpdateFeatureStrategySegmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeatureStrategySegmentsResponse, error) {
	rsp, err := c.UpdateFeatureStrategySegmentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureStrategySegmentsResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeatureStrategySegmentsWithResponse(ctx context.Context, body UpdateFeatureStrategySegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeatureStrategySegmentsResponse, error) {
	rsp, err := c.UpdateFeatureStrategySegments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeatureStrategySegmentsResponse(rsp)
}

// GetSegmentsByStrategyIdWithResponse request returning *GetSegmentsByStrategyIdResponse
func (c *ClientWithResponses) GetSegmentsByStrategyIdWithResponse(ctx context.Context, strategyId string, reqEditors ...RequestEditorFn) (*GetSegmentsByStrategyIdResponse, error) {
	rsp, err := c.GetSegmentsByStrategyId(ctx, strategyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentsByStrategyIdResponse(rsp)
}

// ValidateSegmentWithBodyWithResponse request with arbitrary body returning *ValidateSegmentResponse
func (c *ClientWithResponses) ValidateSegmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateSegmentResponse, error) {
	rsp, err := c.ValidateSegmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateSegmentResponse(rsp)
}

func (c *ClientWithResponses) ValidateSegmentWithResponse(ctx context.Context, body ValidateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateSegmentResponse, error) {
	rsp, err := c.ValidateSegment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateSegmentResponse(rsp)
}

// RemoveSegmentWithResponse request returning *RemoveSegmentResponse
func (c *ClientWithResponses) RemoveSegmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RemoveSegmentResponse, error) {
	rsp, err := c.RemoveSegment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveSegmentResponse(rsp)
}

// GetSegmentWithResponse request returning *GetSegmentResponse
func (c *ClientWithResponses) GetSegmentWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSegmentResponse, error) {
	rsp, err := c.GetSegment(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentResponse(rsp)
}

// UpdateSegmentWithBodyWithResponse request with arbitrary body returning *UpdateSegmentResponse
func (c *ClientWithResponses) UpdateSegmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error) {
	rsp, err := c.UpdateSegmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSegmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateSegmentWithResponse(ctx context.Context, id string, body UpdateSegmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSegmentResponse, error) {
	rsp, err := c.UpdateSegment(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSegmentResponse(rsp)
}

// GetStrategiesBySegmentIdWithResponse request returning *GetStrategiesBySegmentIdResponse
func (c *ClientWithResponses) GetStrategiesBySegmentIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetStrategiesBySegmentIdResponse, error) {
	rsp, err := c.GetStrategiesBySegmentId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStrategiesBySegmentIdResponse(rsp)
}

// UpdateSplashSettingsWithResponse request returning *UpdateSplashSettingsResponse
func (c *ClientWithResponses) UpdateSplashSettingsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UpdateSplashSettingsResponse, error) {
	rsp, err := c.UpdateSplashSettings(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSplashSettingsResponse(rsp)
}

// ExportWithResponse request returning *ExportResponse
func (c *ClientWithResponses) ExportWithResponse(ctx context.Context, params *ExportParams, reqEditors ...RequestEditorFn) (*ExportResponse, error) {
	rsp, err := c.Export(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportResponse(rsp)
}

// ImportWithBodyWithResponse request with arbitrary body returning *ImportResponse
func (c *ClientWithResponses) ImportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportResponse, error) {
	rsp, err := c.ImportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportResponse(rsp)
}

func (c *ClientWithResponses) ImportWithResponse(ctx context.Context, body ImportJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportResponse, error) {
	rsp, err := c.Import(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportResponse(rsp)
}

// GetAllStrategiesWithResponse request returning *GetAllStrategiesResponse
func (c *ClientWithResponses) GetAllStrategiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllStrategiesResponse, error) {
	rsp, err := c.GetAllStrategies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllStrategiesResponse(rsp)
}

// CreateStrategyWithBodyWithResponse request with arbitrary body returning *CreateStrategyResponse
func (c *ClientWithResponses) CreateStrategyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStrategyResponse, error) {
	rsp, err := c.CreateStrategyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStrategyResponse(rsp)
}

func (c *ClientWithResponses) CreateStrategyWithResponse(ctx context.Context, body CreateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStrategyResponse, error) {
	rsp, err := c.CreateStrategy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStrategyResponse(rsp)
}

// RemoveStrategyWithResponse request returning *RemoveStrategyResponse
func (c *ClientWithResponses) RemoveStrategyWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*RemoveStrategyResponse, error) {
	rsp, err := c.RemoveStrategy(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveStrategyResponse(rsp)
}

// GetStrategyWithResponse request returning *GetStrategyResponse
func (c *ClientWithResponses) GetStrategyWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetStrategyResponse, error) {
	rsp, err := c.GetStrategy(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStrategyResponse(rsp)
}

// UpdateStrategyWithBodyWithResponse request with arbitrary body returning *UpdateStrategyResponse
func (c *ClientWithResponses) UpdateStrategyWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStrategyResponse, error) {
	rsp, err := c.UpdateStrategyWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStrategyResponse(rsp)
}

func (c *ClientWithResponses) UpdateStrategyWithResponse(ctx context.Context, name string, body UpdateStrategyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStrategyResponse, error) {
	rsp, err := c.UpdateStrategy(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStrategyResponse(rsp)
}

// DeprecateStrategyWithResponse request returning *DeprecateStrategyResponse
func (c *ClientWithResponses) DeprecateStrategyWithResponse(ctx context.Context, strategyName string, reqEditors ...RequestEditorFn) (*DeprecateStrategyResponse, error) {
	rsp, err := c.DeprecateStrategy(ctx, strategyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeprecateStrategyResponse(rsp)
}

// ReactivateStrategyWithResponse request returning *ReactivateStrategyResponse
func (c *ClientWithResponses) ReactivateStrategyWithResponse(ctx context.Context, strategyName string, reqEditors ...RequestEditorFn) (*ReactivateStrategyResponse, error) {
	rsp, err := c.ReactivateStrategy(ctx, strategyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReactivateStrategyResponse(rsp)
}

// GetTagTypesWithResponse request returning *GetTagTypesResponse
func (c *ClientWithResponses) GetTagTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagTypesResponse, error) {
	rsp, err := c.GetTagTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagTypesResponse(rsp)
}

// CreateTagTypeWithBodyWithResponse request with arbitrary body returning *CreateTagTypeResponse
func (c *ClientWithResponses) CreateTagTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagTypeResponse, error) {
	rsp, err := c.CreateTagTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateTagTypeWithResponse(ctx context.Context, body CreateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagTypeResponse, error) {
	rsp, err := c.CreateTagType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagTypeResponse(rsp)
}

// ValidateTagTypeWithBodyWithResponse request with arbitrary body returning *ValidateTagTypeResponse
func (c *ClientWithResponses) ValidateTagTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateTagTypeResponse, error) {
	rsp, err := c.ValidateTagTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateTagTypeResponse(rsp)
}

func (c *ClientWithResponses) ValidateTagTypeWithResponse(ctx context.Context, body ValidateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateTagTypeResponse, error) {
	rsp, err := c.ValidateTagType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateTagTypeResponse(rsp)
}

// DeleteTagTypeWithResponse request returning *DeleteTagTypeResponse
func (c *ClientWithResponses) DeleteTagTypeWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DeleteTagTypeResponse, error) {
	rsp, err := c.DeleteTagType(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagTypeResponse(rsp)
}

// GetTagTypeWithResponse request returning *GetTagTypeResponse
func (c *ClientWithResponses) GetTagTypeWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetTagTypeResponse, error) {
	rsp, err := c.GetTagType(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagTypeResponse(rsp)
}

// UpdateTagTypeWithBodyWithResponse request with arbitrary body returning *UpdateTagTypeResponse
func (c *ClientWithResponses) UpdateTagTypeWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTagTypeResponse, error) {
	rsp, err := c.UpdateTagTypeWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateTagTypeWithResponse(ctx context.Context, name string, body UpdateTagTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTagTypeResponse, error) {
	rsp, err := c.UpdateTagType(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTagTypeResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// CreateTagWithBodyWithResponse request with arbitrary body returning *CreateTagResponse
func (c *ClientWithResponses) CreateTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

func (c *ClientWithResponses) CreateTagWithResponse(ctx context.Context, body CreateTagJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTagResponse, error) {
	rsp, err := c.CreateTag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTagResponse(rsp)
}

// GetTagsByTypeWithResponse request returning *GetTagsByTypeResponse
func (c *ClientWithResponses) GetTagsByTypeWithResponse(ctx context.Context, pType string, reqEditors ...RequestEditorFn) (*GetTagsByTypeResponse, error) {
	rsp, err := c.GetTagsByType(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsByTypeResponse(rsp)
}

// DeleteTagWithResponse request returning *DeleteTagResponse
func (c *ClientWithResponses) DeleteTagWithResponse(ctx context.Context, pType string, value string, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error) {
	rsp, err := c.DeleteTag(ctx, pType, value, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagResponse(rsp)
}

// GetTagWithResponse request returning *GetTagResponse
func (c *ClientWithResponses) GetTagWithResponse(ctx context.Context, pType string, value string, reqEditors ...RequestEditorFn) (*GetTagResponse, error) {
	rsp, err := c.GetTag(ctx, pType, value, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagResponse(rsp)
}

// GetTelemetrySettingsWithResponse request returning *GetTelemetrySettingsResponse
func (c *ClientWithResponses) GetTelemetrySettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTelemetrySettingsResponse, error) {
	rsp, err := c.GetTelemetrySettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetrySettingsResponse(rsp)
}

// GetUiConfigWithResponse request returning *GetUiConfigResponse
func (c *ClientWithResponses) GetUiConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUiConfigResponse, error) {
	rsp, err := c.GetUiConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUiConfigResponse(rsp)
}

// SetUiConfigWithBodyWithResponse request with arbitrary body returning *SetUiConfigResponse
func (c *ClientWithResponses) SetUiConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUiConfigResponse, error) {
	rsp, err := c.SetUiConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUiConfigResponse(rsp)
}

func (c *ClientWithResponses) SetUiConfigWithResponse(ctx context.Context, body SetUiConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUiConfigResponse, error) {
	rsp, err := c.SetUiConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUiConfigResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// GetBaseUsersAndGroupsWithResponse request returning *GetBaseUsersAndGroupsResponse
func (c *ClientWithResponses) GetBaseUsersAndGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBaseUsersAndGroupsResponse, error) {
	rsp, err := c.GetBaseUsersAndGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBaseUsersAndGroupsResponse(rsp)
}

// GetAdminCountWithResponse request returning *GetAdminCountResponse
func (c *ClientWithResponses) GetAdminCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminCountResponse, error) {
	rsp, err := c.GetAdminCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminCountResponse(rsp)
}

// ResetUserPasswordWithBodyWithResponse request with arbitrary body returning *ResetUserPasswordResponse
func (c *ClientWithResponses) ResetUserPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetUserPasswordResponse, error) {
	rsp, err := c.ResetUserPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) ResetUserPasswordWithResponse(ctx context.Context, body ResetUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetUserPasswordResponse, error) {
	rsp, err := c.ResetUserPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetUserPasswordResponse(rsp)
}

// SearchUsersWithResponse request returning *SearchUsersResponse
func (c *ClientWithResponses) SearchUsersWithResponse(ctx context.Context, params *SearchUsersParams, reqEditors ...RequestEditorFn) (*SearchUsersResponse, error) {
	rsp, err := c.SearchUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchUsersResponse(rsp)
}

// ValidateUserPasswordWithBodyWithResponse request with arbitrary body returning *ValidateUserPasswordResponse
func (c *ClientWithResponses) ValidateUserPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateUserPasswordResponse, error) {
	rsp, err := c.ValidateUserPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) ValidateUserPasswordWithResponse(ctx context.Context, body ValidateUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateUserPasswordResponse, error) {
	rsp, err := c.ValidateUserPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateUserPasswordResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, id string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// ChangeUserPasswordWithBodyWithResponse request with arbitrary body returning *ChangeUserPasswordResponse
func (c *ClientWithResponses) ChangeUserPasswordWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeUserPasswordResponse, error) {
	rsp, err := c.ChangeUserPasswordWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) ChangeUserPasswordWithResponse(ctx context.Context, id string, body ChangeUserPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeUserPasswordResponse, error) {
	rsp, err := c.ChangeUserPassword(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeUserPasswordResponse(rsp)
}

// ChangeMyPasswordWithBodyWithResponse request with arbitrary body returning *ChangeMyPasswordResponse
func (c *ClientWithResponses) ChangeMyPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeMyPasswordResponse, error) {
	rsp, err := c.ChangeMyPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeMyPasswordResponse(rsp)
}

func (c *ClientWithResponses) ChangeMyPasswordWithResponse(ctx context.Context, body ChangeMyPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeMyPasswordResponse, error) {
	rsp, err := c.ChangeMyPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeMyPasswordResponse(rsp)
}

// GetProfileWithResponse request returning *GetProfileResponse
func (c *ClientWithResponses) GetProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProfileResponse, error) {
	rsp, err := c.GetProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileResponse(rsp)
}

// GetPatsWithResponse request returning *GetPatsResponse
func (c *ClientWithResponses) GetPatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPatsResponse, error) {
	rsp, err := c.GetPats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatsResponse(rsp)
}

// CreatePatWithBodyWithResponse request with arbitrary body returning *CreatePatResponse
func (c *ClientWithResponses) CreatePatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePatResponse, error) {
	rsp, err := c.CreatePatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatResponse(rsp)
}

func (c *ClientWithResponses) CreatePatWithResponse(ctx context.Context, body CreatePatJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePatResponse, error) {
	rsp, err := c.CreatePat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePatResponse(rsp)
}

// DeletePatWithResponse request returning *DeletePatResponse
func (c *ClientWithResponses) DeletePatWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePatResponse, error) {
	rsp, err := c.DeletePat(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePatResponse(rsp)
}

// GetAllClientFeaturesWithResponse request returning *GetAllClientFeaturesResponse
func (c *ClientWithResponses) GetAllClientFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllClientFeaturesResponse, error) {
	rsp, err := c.GetAllClientFeatures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllClientFeaturesResponse(rsp)
}

// GetClientFeatureWithResponse request returning *GetClientFeatureResponse
func (c *ClientWithResponses) GetClientFeatureWithResponse(ctx context.Context, featureName string, reqEditors ...RequestEditorFn) (*GetClientFeatureResponse, error) {
	rsp, err := c.GetClientFeature(ctx, featureName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientFeatureResponse(rsp)
}

// RegisterClientMetricsWithBodyWithResponse request with arbitrary body returning *RegisterClientMetricsResponse
func (c *ClientWithResponses) RegisterClientMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterClientMetricsResponse, error) {
	rsp, err := c.RegisterClientMetricsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterClientMetricsResponse(rsp)
}

func (c *ClientWithResponses) RegisterClientMetricsWithResponse(ctx context.Context, body RegisterClientMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterClientMetricsResponse, error) {
	rsp, err := c.RegisterClientMetrics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterClientMetricsResponse(rsp)
}

// RegisterClientApplicationWithBodyWithResponse request with arbitrary body returning *RegisterClientApplicationResponse
func (c *ClientWithResponses) RegisterClientApplicationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterClientApplicationResponse, error) {
	rsp, err := c.RegisterClientApplicationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterClientApplicationResponse(rsp)
}

func (c *ClientWithResponses) RegisterClientApplicationWithResponse(ctx context.Context, body RegisterClientApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterClientApplicationResponse, error) {
	rsp, err := c.RegisterClientApplication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterClientApplicationResponse(rsp)
}

// GetFrontendFeaturesWithResponse request returning *GetFrontendFeaturesResponse
func (c *ClientWithResponses) GetFrontendFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFrontendFeaturesResponse, error) {
	rsp, err := c.GetFrontendFeatures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFrontendFeaturesResponse(rsp)
}

// RegisterFrontendMetricsWithBodyWithResponse request with arbitrary body returning *RegisterFrontendMetricsResponse
func (c *ClientWithResponses) RegisterFrontendMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterFrontendMetricsResponse, error) {
	rsp, err := c.RegisterFrontendMetricsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterFrontendMetricsResponse(rsp)
}

func (c *ClientWithResponses) RegisterFrontendMetricsWithResponse(ctx context.Context, body RegisterFrontendMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterFrontendMetricsResponse, error) {
	rsp, err := c.RegisterFrontendMetrics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterFrontendMetricsResponse(rsp)
}

// RegisterFrontendClientWithBodyWithResponse request with arbitrary body returning *RegisterFrontendClientResponse
func (c *ClientWithResponses) RegisterFrontendClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterFrontendClientResponse, error) {
	rsp, err := c.RegisterFrontendClientWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterFrontendClientResponse(rsp)
}

func (c *ClientWithResponses) RegisterFrontendClientWithResponse(ctx context.Context, body RegisterFrontendClientJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterFrontendClientResponse, error) {
	rsp, err := c.RegisterFrontendClient(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterFrontendClientResponse(rsp)
}

// ChangePasswordWithBodyWithResponse request with arbitrary body returning *ChangePasswordResponse
func (c *ClientWithResponses) ChangePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error) {
	rsp, err := c.ChangePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) ChangePasswordWithResponse(ctx context.Context, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error) {
	rsp, err := c.ChangePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordResponse(rsp)
}

// SendResetPasswordEmailWithBodyWithResponse request with arbitrary body returning *SendResetPasswordEmailResponse
func (c *ClientWithResponses) SendResetPasswordEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendResetPasswordEmailResponse, error) {
	rsp, err := c.SendResetPasswordEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendResetPasswordEmailResponse(rsp)
}

func (c *ClientWithResponses) SendResetPasswordEmailWithResponse(ctx context.Context, body SendResetPasswordEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*SendResetPasswordEmailResponse, error) {
	rsp, err := c.SendResetPasswordEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendResetPasswordEmailResponse(rsp)
}

// ValidateTokenWithResponse request returning *ValidateTokenResponse
func (c *ClientWithResponses) ValidateTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ValidateTokenResponse, error) {
	rsp, err := c.ValidateToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateTokenResponse(rsp)
}

// ValidatePasswordWithBodyWithResponse request with arbitrary body returning *ValidatePasswordResponse
func (c *ClientWithResponses) ValidatePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidatePasswordResponse, error) {
	rsp, err := c.ValidatePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidatePasswordResponse(rsp)
}

func (c *ClientWithResponses) ValidatePasswordWithResponse(ctx context.Context, body ValidatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidatePasswordResponse, error) {
	rsp, err := c.ValidatePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidatePasswordResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// BulkMetricsWithBodyWithResponse request with arbitrary body returning *BulkMetricsResponse
func (c *ClientWithResponses) BulkMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkMetricsResponse, error) {
	rsp, err := c.BulkMetricsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkMetricsResponse(rsp)
}

func (c *ClientWithResponses) BulkMetricsWithResponse(ctx context.Context, body BulkMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkMetricsResponse, error) {
	rsp, err := c.BulkMetrics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkMetricsResponse(rsp)
}

// GetValidTokensWithBodyWithResponse request with arbitrary body returning *GetValidTokensResponse
func (c *ClientWithResponses) GetValidTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetValidTokensResponse, error) {
	rsp, err := c.GetValidTokensWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidTokensResponse(rsp)
}

func (c *ClientWithResponses) GetValidTokensWithResponse(ctx context.Context, body GetValidTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*GetValidTokensResponse, error) {
	rsp, err := c.GetValidTokens(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidTokensResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// AddPublicSignupTokenUserWithBodyWithResponse request with arbitrary body returning *AddPublicSignupTokenUserResponse
func (c *ClientWithResponses) AddPublicSignupTokenUserWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPublicSignupTokenUserResponse, error) {
	rsp, err := c.AddPublicSignupTokenUserWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPublicSignupTokenUserResponse(rsp)
}

func (c *ClientWithResponses) AddPublicSignupTokenUserWithResponse(ctx context.Context, token string, body AddPublicSignupTokenUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPublicSignupTokenUserResponse, error) {
	rsp, err := c.AddPublicSignupTokenUser(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPublicSignupTokenUserResponse(rsp)
}

// ValidatePublicSignupTokenWithResponse request returning *ValidatePublicSignupTokenResponse
func (c *ClientWithResponses) ValidatePublicSignupTokenWithResponse(ctx context.Context, token string, reqEditors ...RequestEditorFn) (*ValidatePublicSignupTokenResponse, error) {
	rsp, err := c.ValidatePublicSignupToken(ctx, token, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidatePublicSignupTokenResponse(rsp)
}

// ParseGetAddonsResponse parses an HTTP response from a GetAddonsWithResponse call
func ParseGetAddonsResponse(rsp *http.Response) (*GetAddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateAddonResponse parses an HTTP response from a CreateAddonWithResponse call
func ParseCreateAddonResponse(rsp *http.Response) (*CreateAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseDeleteAddonResponse parses an HTTP response from a DeleteAddonWithResponse call
func ParseDeleteAddonResponse(rsp *http.Response) (*DeleteAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAddonResponse parses an HTTP response from a GetAddonWithResponse call
func ParseGetAddonResponse(rsp *http.Response) (*GetAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseUpdateAddonResponse parses an HTTP response from a UpdateAddonWithResponse call
func ParseUpdateAddonResponse(rsp *http.Response) (*UpdateAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetAllApiTokensResponse parses an HTTP response from a GetAllApiTokensWithResponse call
func ParseGetAllApiTokensResponse(rsp *http.Response) (*GetAllApiTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllApiTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiTokensSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateApiTokenResponse parses an HTTP response from a CreateApiTokenWithResponse call
func ParseCreateApiTokenResponse(rsp *http.Response) (*CreateApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiTokenSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetApiTokensByNameResponse parses an HTTP response from a GetApiTokensByNameWithResponse call
func ParseGetApiTokensByNameResponse(rsp *http.Response) (*GetApiTokensByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTokensByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiTokensSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteApiTokenResponse parses an HTTP response from a DeleteApiTokenWithResponse call
func ParseDeleteApiTokenResponse(rsp *http.Response) (*DeleteApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdateApiTokenResponse parses an HTTP response from a UpdateApiTokenWithResponse call
func ParseUpdateApiTokenResponse(rsp *http.Response) (*UpdateApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetArchivedFeaturesResponse parses an HTTP response from a GetArchivedFeaturesWithResponse call
func ParseGetArchivedFeaturesResponse(rsp *http.Response) (*GetArchivedFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArchivedFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeaturesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetArchivedFeaturesByProjectIdResponse parses an HTTP response from a GetArchivedFeaturesByProjectIdWithResponse call
func ParseGetArchivedFeaturesByProjectIdResponse(rsp *http.Response) (*GetArchivedFeaturesByProjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArchivedFeaturesByProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeaturesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseReviveFeatureResponse parses an HTTP response from a ReviveFeatureWithResponse call
func ParseReviveFeatureResponse(rsp *http.Response) (*ReviveFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReviveFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteFeatureResponse parses an HTTP response from a DeleteFeatureWithResponse call
func ParseDeleteFeatureResponse(rsp *http.Response) (*DeleteFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetFeatureUsageSummaryResponse parses an HTTP response from a GetFeatureUsageSummaryWithResponse call
func ParseGetFeatureUsageSummaryResponse(rsp *http.Response) (*GetFeatureUsageSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureUsageSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureUsageSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRawFeatureMetricsResponse parses an HTTP response from a GetRawFeatureMetricsWithResponse call
func ParseGetRawFeatureMetricsResponse(rsp *http.Response) (*GetRawFeatureMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRawFeatureMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureMetricsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseValidateConstraintResponse parses an HTTP response from a ValidateConstraintWithResponse call
func ParseValidateConstraintResponse(rsp *http.Response) (*ValidateConstraintResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateConstraintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetContextFieldsResponse parses an HTTP response from a GetContextFieldsWithResponse call
func ParseGetContextFieldsResponse(rsp *http.Response) (*GetContextFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContextFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContextFieldsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContextFieldResponse parses an HTTP response from a CreateContextFieldWithResponse call
func ParseCreateContextFieldResponse(rsp *http.Response) (*CreateContextFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContextFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContextFieldSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseValidateResponse parses an HTTP response from a ValidateWithResponse call
func ParseValidateResponse(rsp *http.Response) (*ValidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteContextFieldResponse parses an HTTP response from a DeleteContextFieldWithResponse call
func ParseDeleteContextFieldResponse(rsp *http.Response) (*DeleteContextFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContextFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContextFieldResponse parses an HTTP response from a GetContextFieldWithResponse call
func ParseGetContextFieldResponse(rsp *http.Response) (*GetContextFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContextFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContextFieldSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContextFieldResponse parses an HTTP response from a UpdateContextFieldWithResponse call
func ParseUpdateContextFieldResponse(rsp *http.Response) (*UpdateContextFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContextFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStrategiesByContextFieldResponse parses an HTTP response from a GetStrategiesByContextFieldWithResponse call
func ParseGetStrategiesByContextFieldResponse(rsp *http.Response) (*GetStrategiesByContextFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStrategiesByContextFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContextFieldStrategiesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetAllEnvironmentsResponse parses an HTTP response from a GetAllEnvironmentsWithResponse call
func ParseGetAllEnvironmentsResponse(rsp *http.Response) (*GetAllEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetProjectEnvironmentsResponse parses an HTTP response from a GetProjectEnvironmentsWithResponse call
func ParseGetProjectEnvironmentsResponse(rsp *http.Response) (*GetProjectEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentsProjectSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateSortOrderResponse parses an HTTP response from a UpdateSortOrderWithResponse call
func ParseUpdateSortOrderResponse(rsp *http.Response) (*UpdateSortOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSortOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseToggleEnvironmentOffResponse parses an HTTP response from a ToggleEnvironmentOffWithResponse call
func ParseToggleEnvironmentOffResponse(rsp *http.Response) (*ToggleEnvironmentOffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleEnvironmentOffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseToggleEnvironmentOnResponse parses an HTTP response from a ToggleEnvironmentOnWithResponse call
func ParseToggleEnvironmentOnResponse(rsp *http.Response) (*ToggleEnvironmentOnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleEnvironmentOnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchEventsResponse parses an HTTP response from a SearchEventsWithResponse call
func ParseSearchEventsResponse(rsp *http.Response) (*SearchEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEventsForToggleResponse parses an HTTP response from a GetEventsForToggleWithResponse call
func ParseGetEventsForToggleResponse(rsp *http.Response) (*GetEventsForToggleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsForToggleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureEventsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetAllFeatureTypesResponse parses an HTTP response from a GetAllFeatureTypesWithResponse call
func ParseGetAllFeatureTypesResponse(rsp *http.Response) (*GetAllFeatureTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllFeatureTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureTypesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseUpdateFeatureTypeLifetimeResponse parses an HTTP response from a UpdateFeatureTypeLifetimeWithResponse call
func ParseUpdateFeatureTypeLifetimeResponse(rsp *http.Response) (*UpdateFeatureTypeLifetimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeatureTypeLifetimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureTypeSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetAllTogglesResponse parses an HTTP response from a GetAllTogglesWithResponse call
func ParseGetAllTogglesResponse(rsp *http.Response) (*GetAllTogglesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTogglesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeaturesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseExportFeaturesResponse parses an HTTP response from a ExportFeaturesWithResponse call
func ParseExportFeaturesResponse(rsp *http.Response) (*ExportFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExportResultSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseImportTogglesResponse parses an HTTP response from a ImportTogglesWithResponse call
func ParseImportTogglesResponse(rsp *http.Response) (*ImportTogglesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportTogglesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseValidateImportResponse parses an HTTP response from a ValidateImportWithResponse call
func ParseValidateImportResponse(rsp *http.Response) (*ValidateImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportTogglesValidateSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseValidateFeatureResponse parses an HTTP response from a ValidateFeatureWithResponse call
func ParseValidateFeatureResponse(rsp *http.Response) (*ValidateFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseListTagsResponse parses an HTTP response from a ListTagsWithResponse call
func ParseListTagsResponse(rsp *http.Response) (*ListTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddTagResponse parses an HTTP response from a AddTagWithResponse call
func ParseAddTagResponse(rsp *http.Response) (*AddTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateTagsResponse parses an HTTP response from a UpdateTagsWithResponse call
func ParseUpdateTagsResponse(rsp *http.Response) (*UpdateTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRemoveTagResponse parses an HTTP response from a RemoveTagWithResponse call
func ParseRemoveTagResponse(rsp *http.Response) (*RemoveTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateFeedbackResponse parses an HTTP response from a CreateFeedbackWithResponse call
func ParseCreateFeedbackResponse(rsp *http.Response) (*CreateFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeedbackResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseUpdateFeedbackResponse parses an HTTP response from a UpdateFeedbackWithResponse call
func ParseUpdateFeedbackResponse(rsp *http.Response) (*UpdateFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeedbackResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetInstanceAdminStatsResponse parses an HTTP response from a GetInstanceAdminStatsWithResponse call
func ParseGetInstanceAdminStatsResponse(rsp *http.Response) (*GetInstanceAdminStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceAdminStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceAdminStatsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInstanceAdminStatsCsvResponse parses an HTTP response from a GetInstanceAdminStatsCsvWithResponse call
func ParseGetInstanceAdminStatsCsvResponse(rsp *http.Response) (*GetInstanceAdminStatsCsvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceAdminStatsCsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllPublicSignupTokensResponse parses an HTTP response from a GetAllPublicSignupTokensWithResponse call
func ParseGetAllPublicSignupTokensResponse(rsp *http.Response) (*GetAllPublicSignupTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllPublicSignupTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicSignupTokensSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePublicSignupTokenResponse parses an HTTP response from a CreatePublicSignupTokenWithResponse call
func ParseCreatePublicSignupTokenResponse(rsp *http.Response) (*CreatePublicSignupTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePublicSignupTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PublicSignupTokenSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPublicSignupTokenResponse parses an HTTP response from a GetPublicSignupTokenWithResponse call
func ParseGetPublicSignupTokenResponse(rsp *http.Response) (*GetPublicSignupTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicSignupTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicSignupTokenSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdatePublicSignupTokenResponse parses an HTTP response from a UpdatePublicSignupTokenWithResponse call
func ParseUpdatePublicSignupTokenResponse(rsp *http.Response) (*UpdatePublicSignupTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePublicSignupTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicSignupTokenSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetMaintenanceResponse parses an HTTP response from a GetMaintenanceWithResponse call
func ParseGetMaintenanceResponse(rsp *http.Response) (*GetMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaintenanceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseToggleMaintenanceResponse parses an HTTP response from a ToggleMaintenanceWithResponse call
func ParseToggleMaintenanceResponse(rsp *http.Response) (*ToggleMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetApplicationsResponse parses an HTTP response from a GetApplicationsWithResponse call
func ParseGetApplicationsResponse(rsp *http.Response) (*GetApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetApplicationResponse parses an HTTP response from a GetApplicationWithResponse call
func ParseGetApplicationResponse(rsp *http.Response) (*GetApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateApplicationResponse parses an HTTP response from a CreateApplicationWithResponse call
func ParseCreateApplicationResponse(rsp *http.Response) (*CreateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlaygroundResponse parses an HTTP response from a GetPlaygroundWithResponse call
func ParseGetPlaygroundResponse(rsp *http.Response) (*GetPlaygroundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaygroundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlaygroundResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetAdvancedPlaygroundResponse parses an HTTP response from a GetAdvancedPlaygroundWithResponse call
func ParseGetAdvancedPlaygroundResponse(rsp *http.Response) (*GetAdvancedPlaygroundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdvancedPlaygroundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedPlaygroundResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetDeprecatedProjectOverviewResponse parses an HTTP response from a GetDeprecatedProjectOverviewWithResponse call
func ParseGetDeprecatedProjectOverviewResponse(rsp *http.Response) (*GetDeprecatedProjectOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeprecatedProjectOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeprecatedProjectOverviewSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectApiTokensResponse parses an HTTP response from a GetProjectApiTokensWithResponse call
func ParseGetProjectApiTokensResponse(rsp *http.Response) (*GetProjectApiTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectApiTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiTokensSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateProjectApiTokenResponse parses an HTTP response from a CreateProjectApiTokenWithResponse call
func ParseCreateProjectApiTokenResponse(rsp *http.Response) (*CreateProjectApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiTokenSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteProjectApiTokenResponse parses an HTTP response from a DeleteProjectApiTokenWithResponse call
func ParseDeleteProjectApiTokenResponse(rsp *http.Response) (*DeleteProjectApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseArchiveFeaturesResponse parses an HTTP response from a ArchiveFeaturesWithResponse call
func ParseArchiveFeaturesResponse(rsp *http.Response) (*ArchiveFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseValidateArchiveFeaturesResponse parses an HTTP response from a ValidateArchiveFeaturesWithResponse call
func ParseValidateArchiveFeaturesResponse(rsp *http.Response) (*ValidateArchiveFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateArchiveFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidateArchiveFeaturesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseBulkToggleFeaturesEnvironmentOffResponse parses an HTTP response from a BulkToggleFeaturesEnvironmentOffWithResponse call
func ParseBulkToggleFeaturesEnvironmentOffResponse(rsp *http.Response) (*BulkToggleFeaturesEnvironmentOffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkToggleFeaturesEnvironmentOffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseBulkToggleFeaturesEnvironmentOnResponse parses an HTTP response from a BulkToggleFeaturesEnvironmentOnWithResponse call
func ParseBulkToggleFeaturesEnvironmentOnResponse(rsp *http.Response) (*BulkToggleFeaturesEnvironmentOnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkToggleFeaturesEnvironmentOnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseDeleteFeaturesResponse parses an HTTP response from a DeleteFeaturesWithResponse call
func ParseDeleteFeaturesResponse(rsp *http.Response) (*DeleteFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCheckDependenciesExistResponse parses an HTTP response from a CheckDependenciesExistWithResponse call
func ParseCheckDependenciesExistResponse(rsp *http.Response) (*CheckDependenciesExistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckDependenciesExistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DependenciesExistSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetProjectDoraResponse parses an HTTP response from a GetProjectDoraWithResponse call
func ParseGetProjectDoraResponse(rsp *http.Response) (*GetProjectDoraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectDoraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectDoraMetricsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddEnvironmentToProjectResponse parses an HTTP response from a AddEnvironmentToProjectWithResponse call
func ParseAddEnvironmentToProjectResponse(rsp *http.Response) (*AddEnvironmentToProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddEnvironmentToProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRemoveEnvironmentFromProjectResponse parses an HTTP response from a RemoveEnvironmentFromProjectWithResponse call
func ParseRemoveEnvironmentFromProjectResponse(rsp *http.Response) (*RemoveEnvironmentFromProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveEnvironmentFromProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAddDefaultStrategyToProjectEnvironmentResponse parses an HTTP response from a AddDefaultStrategyToProjectEnvironmentWithResponse call
func ParseAddDefaultStrategyToProjectEnvironmentResponse(rsp *http.Response) (*AddDefaultStrategyToProjectEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddDefaultStrategyToProjectEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateFeatureStrategySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRemoveFavoriteProjectResponse parses an HTTP response from a RemoveFavoriteProjectWithResponse call
func ParseRemoveFavoriteProjectResponse(rsp *http.Response) (*RemoveFavoriteProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveFavoriteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddFavoriteProjectResponse parses an HTTP response from a AddFavoriteProjectWithResponse call
func ParseAddFavoriteProjectResponse(rsp *http.Response) (*AddFavoriteProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddFavoriteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetFeaturesResponse parses an HTTP response from a GetFeaturesWithResponse call
func ParseGetFeaturesResponse(rsp *http.Response) (*GetFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeaturesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateFeatureResponse parses an HTTP response from a CreateFeatureWithResponse call
func ParseCreateFeatureResponse(rsp *http.Response) (*CreateFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseArchiveFeatureResponse parses an HTTP response from a ArchiveFeatureWithResponse call
func ParseArchiveFeatureResponse(rsp *http.Response) (*ArchiveFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetFeatureResponse parses an HTTP response from a GetFeatureWithResponse call
func ParseGetFeatureResponse(rsp *http.Response) (*GetFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchFeatureResponse parses an HTTP response from a PatchFeatureWithResponse call
func ParsePatchFeatureResponse(rsp *http.Response) (*PatchFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseUpdateFeatureResponse parses an HTTP response from a UpdateFeatureWithResponse call
func ParseUpdateFeatureResponse(rsp *http.Response) (*UpdateFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseCloneFeatureResponse parses an HTTP response from a CloneFeatureWithResponse call
func ParseCloneFeatureResponse(rsp *http.Response) (*CloneFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloneFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseDeleteFeatureDependenciesResponse parses an HTTP response from a DeleteFeatureDependenciesWithResponse call
func ParseDeleteFeatureDependenciesResponse(rsp *http.Response) (*DeleteFeatureDependenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeatureDependenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddFeatureDependencyResponse parses an HTTP response from a AddFeatureDependencyWithResponse call
func ParseAddFeatureDependencyResponse(rsp *http.Response) (*AddFeatureDependencyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddFeatureDependencyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteFeatureDependencyResponse parses an HTTP response from a DeleteFeatureDependencyWithResponse call
func ParseDeleteFeatureDependencyResponse(rsp *http.Response) (*DeleteFeatureDependencyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeatureDependencyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetFeatureEnvironmentResponse parses an HTTP response from a GetFeatureEnvironmentWithResponse call
func ParseGetFeatureEnvironmentResponse(rsp *http.Response) (*GetFeatureEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureEnvironmentSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseToggleFeatureEnvironmentOffResponse parses an HTTP response from a ToggleFeatureEnvironmentOffWithResponse call
func ParseToggleFeatureEnvironmentOffResponse(rsp *http.Response) (*ToggleFeatureEnvironmentOffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleFeatureEnvironmentOffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseToggleFeatureEnvironmentOnResponse parses an HTTP response from a ToggleFeatureEnvironmentOnWithResponse call
func ParseToggleFeatureEnvironmentOnResponse(rsp *http.Response) (*ToggleFeatureEnvironmentOnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleFeatureEnvironmentOnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetFeatureStrategiesResponse parses an HTTP response from a GetFeatureStrategiesWithResponse call
func ParseGetFeatureStrategiesResponse(rsp *http.Response) (*GetFeatureStrategiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureStrategiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureStrategiesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddFeatureStrategyResponse parses an HTTP response from a AddFeatureStrategyWithResponse call
func ParseAddFeatureStrategyResponse(rsp *http.Response) (*AddFeatureStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddFeatureStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureStrategySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetStrategySortOrderResponse parses an HTTP response from a SetStrategySortOrderWithResponse call
func ParseSetStrategySortOrderResponse(rsp *http.Response) (*SetStrategySortOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetStrategySortOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteFeatureStrategyResponse parses an HTTP response from a DeleteFeatureStrategyWithResponse call
func ParseDeleteFeatureStrategyResponse(rsp *http.Response) (*DeleteFeatureStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeatureStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetFeatureStrategyResponse parses an HTTP response from a GetFeatureStrategyWithResponse call
func ParseGetFeatureStrategyResponse(rsp *http.Response) (*GetFeatureStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureStrategySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchFeatureStrategyResponse parses an HTTP response from a PatchFeatureStrategyWithResponse call
func ParsePatchFeatureStrategyResponse(rsp *http.Response) (*PatchFeatureStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFeatureStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureStrategySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseUpdateFeatureStrategyResponse parses an HTTP response from a UpdateFeatureStrategyWithResponse call
func ParseUpdateFeatureStrategyResponse(rsp *http.Response) (*UpdateFeatureStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeatureStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureStrategySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentFeatureVariantsResponse parses an HTTP response from a GetEnvironmentFeatureVariantsWithResponse call
func ParseGetEnvironmentFeatureVariantsResponse(rsp *http.Response) (*GetEnvironmentFeatureVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentFeatureVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureVariantsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchEnvironmentsFeatureVariantsResponse parses an HTTP response from a PatchEnvironmentsFeatureVariantsWithResponse call
func ParsePatchEnvironmentsFeatureVariantsResponse(rsp *http.Response) (*PatchEnvironmentsFeatureVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchEnvironmentsFeatureVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureVariantsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseOverwriteEnvironmentFeatureVariantsResponse parses an HTTP response from a OverwriteEnvironmentFeatureVariantsWithResponse call
func ParseOverwriteEnvironmentFeatureVariantsResponse(rsp *http.Response) (*OverwriteEnvironmentFeatureVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OverwriteEnvironmentFeatureVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureVariantsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveFavoriteFeatureResponse parses an HTTP response from a RemoveFavoriteFeatureWithResponse call
func ParseRemoveFavoriteFeatureResponse(rsp *http.Response) (*RemoveFavoriteFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveFavoriteFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddFavoriteFeatureResponse parses an HTTP response from a AddFavoriteFeatureWithResponse call
func ParseAddFavoriteFeatureResponse(rsp *http.Response) (*AddFavoriteFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddFavoriteFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListParentOptionsResponse parses an HTTP response from a ListParentOptionsWithResponse call
func ParseListParentOptionsResponse(rsp *http.Response) (*ListParentOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListParentOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParentFeatureOptionsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetFeatureVariantsResponse parses an HTTP response from a GetFeatureVariantsWithResponse call
func ParseGetFeatureVariantsResponse(rsp *http.Response) (*GetFeatureVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureVariantsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchFeatureVariantsResponse parses an HTTP response from a PatchFeatureVariantsWithResponse call
func ParsePatchFeatureVariantsResponse(rsp *http.Response) (*PatchFeatureVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFeatureVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureVariantsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseOverwriteFeatureVariantsResponse parses an HTTP response from a OverwriteFeatureVariantsWithResponse call
func ParseOverwriteFeatureVariantsResponse(rsp *http.Response) (*OverwriteFeatureVariantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OverwriteFeatureVariantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureVariantsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseOverwriteFeatureVariantsOnEnvironmentsResponse parses an HTTP response from a OverwriteFeatureVariantsOnEnvironmentsWithResponse call
func ParseOverwriteFeatureVariantsOnEnvironmentsResponse(rsp *http.Response) (*OverwriteFeatureVariantsOnEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OverwriteFeatureVariantsOnEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeatureVariantsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetProjectHealthReportResponse parses an HTTP response from a GetProjectHealthReportWithResponse call
func ParseGetProjectHealthReportResponse(rsp *http.Response) (*GetProjectHealthReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectHealthReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthReportSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetProjectOverviewResponse parses an HTTP response from a GetProjectOverviewWithResponse call
func ParseGetProjectOverviewResponse(rsp *http.Response) (*GetProjectOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectOverviewSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseReviveFeaturesResponse parses an HTTP response from a ReviveFeaturesWithResponse call
func ParseReviveFeaturesResponse(rsp *http.Response) (*ReviveFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReviveFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseStaleFeaturesResponse parses an HTTP response from a StaleFeaturesWithResponse call
func ParseStaleFeaturesResponse(rsp *http.Response) (*StaleFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StaleFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseAddTagToFeaturesResponse parses an HTTP response from a AddTagToFeaturesWithResponse call
func ParseAddTagToFeaturesResponse(rsp *http.Response) (*AddTagToFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTagToFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseSearchFeaturesResponse parses an HTTP response from a SearchFeaturesWithResponse call
func ParseSearchFeaturesResponse(rsp *http.Response) (*SearchFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchFeaturesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSegmentsResponse parses an HTTP response from a GetSegmentsWithResponse call
func ParseGetSegmentsResponse(rsp *http.Response) (*GetSegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SegmentsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSegmentResponse parses an HTTP response from a CreateSegmentWithResponse call
func ParseCreateSegmentResponse(rsp *http.Response) (*CreateSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AdminSegmentSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseUpdateFeatureStrategySegmentsResponse parses an HTTP response from a UpdateFeatureStrategySegmentsWithResponse call
func ParseUpdateFeatureStrategySegmentsResponse(rsp *http.Response) (*UpdateFeatureStrategySegmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeatureStrategySegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpdateFeatureStrategySegmentsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetSegmentsByStrategyIdResponse parses an HTTP response from a GetSegmentsByStrategyIdWithResponse call
func ParseGetSegmentsByStrategyIdResponse(rsp *http.Response) (*GetSegmentsByStrategyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentsByStrategyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SegmentsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseValidateSegmentResponse parses an HTTP response from a ValidateSegmentWithResponse call
func ParseValidateSegmentResponse(rsp *http.Response) (*ValidateSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseRemoveSegmentResponse parses an HTTP response from a RemoveSegmentWithResponse call
func ParseRemoveSegmentResponse(rsp *http.Response) (*RemoveSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetSegmentResponse parses an HTTP response from a GetSegmentWithResponse call
func ParseGetSegmentResponse(rsp *http.Response) (*GetSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminSegmentSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateSegmentResponse parses an HTTP response from a UpdateSegmentWithResponse call
func ParseUpdateSegmentResponse(rsp *http.Response) (*UpdateSegmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSegmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetStrategiesBySegmentIdResponse parses an HTTP response from a GetStrategiesBySegmentIdWithResponse call
func ParseGetStrategiesBySegmentIdResponse(rsp *http.Response) (*GetStrategiesBySegmentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStrategiesBySegmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SegmentStrategiesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSplashSettingsResponse parses an HTTP response from a UpdateSplashSettingsWithResponse call
func ParseUpdateSplashSettingsResponse(rsp *http.Response) (*UpdateSplashSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSplashSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SplashResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseExportResponse parses an HTTP response from a ExportWithResponse call
func ParseExportResponse(rsp *http.Response) (*ExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StateSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportResponse parses an HTTP response from a ImportWithResponse call
func ParseImportResponse(rsp *http.Response) (*ImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllStrategiesResponse parses an HTTP response from a GetAllStrategiesWithResponse call
func ParseGetAllStrategiesResponse(rsp *http.Response) (*GetAllStrategiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllStrategiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StrategiesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateStrategyResponse parses an HTTP response from a CreateStrategyWithResponse call
func ParseCreateStrategyResponse(rsp *http.Response) (*CreateStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StrategySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseRemoveStrategyResponse parses an HTTP response from a RemoveStrategyWithResponse call
func ParseRemoveStrategyResponse(rsp *http.Response) (*RemoveStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetStrategyResponse parses an HTTP response from a GetStrategyWithResponse call
func ParseGetStrategyResponse(rsp *http.Response) (*GetStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StrategySchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateStrategyResponse parses an HTTP response from a UpdateStrategyWithResponse call
func ParseUpdateStrategyResponse(rsp *http.Response) (*UpdateStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseDeprecateStrategyResponse parses an HTTP response from a DeprecateStrategyWithResponse call
func ParseDeprecateStrategyResponse(rsp *http.Response) (*DeprecateStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeprecateStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseReactivateStrategyResponse parses an HTTP response from a ReactivateStrategyWithResponse call
func ParseReactivateStrategyResponse(rsp *http.Response) (*ReactivateStrategyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReactivateStrategyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTagTypesResponse parses an HTTP response from a GetTagTypesWithResponse call
func ParseGetTagTypesResponse(rsp *http.Response) (*GetTagTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagTypesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateTagTypeResponse parses an HTTP response from a CreateTagTypeWithResponse call
func ParseCreateTagTypeResponse(rsp *http.Response) (*CreateTagTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagTypeSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseValidateTagTypeResponse parses an HTTP response from a ValidateTagTypeWithResponse call
func ParseValidateTagTypeResponse(rsp *http.Response) (*ValidateTagTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateTagTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidateTagTypeSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseDeleteTagTypeResponse parses an HTTP response from a DeleteTagTypeWithResponse call
func ParseDeleteTagTypeResponse(rsp *http.Response) (*DeleteTagTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetTagTypeResponse parses an HTTP response from a GetTagTypeWithResponse call
func ParseGetTagTypeResponse(rsp *http.Response) (*GetTagTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagTypeSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdateTagTypeResponse parses an HTTP response from a UpdateTagTypeWithResponse call
func ParseUpdateTagTypeResponse(rsp *http.Response) (*UpdateTagTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTagTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateTagResponse parses an HTTP response from a CreateTagWithResponse call
func ParseCreateTagResponse(rsp *http.Response) (*CreateTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TagWithVersionSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetTagsByTypeResponse parses an HTTP response from a GetTagsByTypeWithResponse call
func ParseGetTagsByTypeResponse(rsp *http.Response) (*GetTagsByTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsByTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteTagResponse parses an HTTP response from a DeleteTagWithResponse call
func ParseDeleteTagResponse(rsp *http.Response) (*DeleteTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTagResponse parses an HTTP response from a GetTagWithResponse call
func ParseGetTagResponse(rsp *http.Response) (*GetTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagWithVersionSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTelemetrySettingsResponse parses an HTTP response from a GetTelemetrySettingsWithResponse call
func ParseGetTelemetrySettingsResponse(rsp *http.Response) (*GetTelemetrySettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetrySettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetrySettingsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUiConfigResponse parses an HTTP response from a GetUiConfigWithResponse call
func ParseGetUiConfigResponse(rsp *http.Response) (*GetUiConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUiConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UiConfigSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetUiConfigResponse parses an HTTP response from a SetUiConfigWithResponse call
func ParseSetUiConfigResponse(rsp *http.Response) (*SetUiConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUiConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateUserResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetBaseUsersAndGroupsResponse parses an HTTP response from a GetBaseUsersAndGroupsWithResponse call
func ParseGetBaseUsersAndGroupsResponse(rsp *http.Response) (*GetBaseUsersAndGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBaseUsersAndGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersGroupsBaseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetAdminCountResponse parses an HTTP response from a GetAdminCountWithResponse call
func ParseGetAdminCountResponse(rsp *http.Response) (*GetAdminCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminCountSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseResetUserPasswordResponse parses an HTTP response from a ResetUserPasswordWithResponse call
func ParseResetUserPasswordResponse(rsp *http.Response) (*ResetUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResetPasswordSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSearchUsersResponse parses an HTTP response from a SearchUsersWithResponse call
func ParseSearchUsersResponse(rsp *http.Response) (*SearchUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseValidateUserPasswordResponse parses an HTTP response from a ValidateUserPasswordWithResponse call
func ParseValidateUserPasswordResponse(rsp *http.Response) (*ValidateUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateUserResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseChangeUserPasswordResponse parses an HTTP response from a ChangeUserPasswordWithResponse call
func ParseChangeUserPasswordResponse(rsp *http.Response) (*ChangeUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseChangeMyPasswordResponse parses an HTTP response from a ChangeMyPasswordWithResponse call
func ParseChangeMyPasswordResponse(rsp *http.Response) (*ChangeMyPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeMyPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProfileResponse parses an HTTP response from a GetProfileWithResponse call
func ParseGetProfileResponse(rsp *http.Response) (*GetProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetPatsResponse parses an HTTP response from a GetPatsWithResponse call
func ParseGetPatsResponse(rsp *http.Response) (*GetPatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreatePatResponse parses an HTTP response from a CreatePatWithResponse call
func ParseCreatePatResponse(rsp *http.Response) (*CreatePatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PatSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeletePatResponse parses an HTTP response from a DeletePatWithResponse call
func ParseDeletePatResponse(rsp *http.Response) (*DeletePatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAllClientFeaturesResponse parses an HTTP response from a GetAllClientFeaturesWithResponse call
func ParseGetAllClientFeaturesResponse(rsp *http.Response) (*GetAllClientFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllClientFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientFeaturesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientFeatureResponse parses an HTTP response from a GetClientFeatureWithResponse call
func ParseGetClientFeatureResponse(rsp *http.Response) (*GetClientFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientFeatureSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterClientMetricsResponse parses an HTTP response from a RegisterClientMetricsWithResponse call
func ParseRegisterClientMetricsResponse(rsp *http.Response) (*RegisterClientMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterClientMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRegisterClientApplicationResponse parses an HTTP response from a RegisterClientApplicationWithResponse call
func ParseRegisterClientApplicationResponse(rsp *http.Response) (*RegisterClientApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterClientApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFrontendFeaturesResponse parses an HTTP response from a GetFrontendFeaturesWithResponse call
func ParseGetFrontendFeaturesResponse(rsp *http.Response) (*GetFrontendFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFrontendFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProxyFeaturesSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRegisterFrontendMetricsResponse parses an HTTP response from a RegisterFrontendMetricsWithResponse call
func ParseRegisterFrontendMetricsResponse(rsp *http.Response) (*RegisterFrontendMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterFrontendMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRegisterFrontendClientResponse parses an HTTP response from a RegisterFrontendClientWithResponse call
func ParseRegisterFrontendClientResponse(rsp *http.Response) (*RegisterFrontendClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterFrontendClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseChangePasswordResponse parses an HTTP response from a ChangePasswordWithResponse call
func ParseChangePasswordResponse(rsp *http.Response) (*ChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseSendResetPasswordEmailResponse parses an HTTP response from a SendResetPasswordEmailWithResponse call
func ParseSendResetPasswordEmailResponse(rsp *http.Response) (*SendResetPasswordEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendResetPasswordEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseValidateTokenResponse parses an HTTP response from a ValidateTokenWithResponse call
func ParseValidateTokenResponse(rsp *http.Response) (*ValidateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenUserSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseValidatePasswordResponse parses an HTTP response from a ValidatePasswordWithResponse call
func ParseValidatePasswordResponse(rsp *http.Response) (*ValidatePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidatePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseBulkMetricsResponse parses an HTTP response from a BulkMetricsWithResponse call
func ParseBulkMetricsResponse(rsp *http.Response) (*BulkMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetValidTokensResponse parses an HTTP response from a GetValidTokensWithResponse call
func ParseGetValidTokensResponse(rsp *http.Response) (*GetValidTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidatedEdgeTokensSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON415 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthCheckSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest HealthCheckSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddPublicSignupTokenUserResponse parses an HTTP response from a AddPublicSignupTokenUserWithResponse call
func ParseAddPublicSignupTokenUserResponse(rsp *http.Response) (*AddPublicSignupTokenUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPublicSignupTokenUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseValidatePublicSignupTokenResponse parses an HTTP response from a ValidatePublicSignupTokenWithResponse call
func ParseValidatePublicSignupTokenResponse(rsp *http.Response) (*ValidatePublicSignupTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidatePublicSignupTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Id The ID of the error instance
			Id *string `json:"id,omitempty"`

			// Message A description of what went wrong.
			Message *string `json:"message,omitempty"`

			// Name The name of the error kind
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all addons and providers
	// (GET /api/admin/addons)
	GetAddons(c *gin.Context)
	// Create a new addon
	// (POST /api/admin/addons)
	CreateAddon(c *gin.Context)
	// Delete an addon
	// (DELETE /api/admin/addons/{id})
	DeleteAddon(c *gin.Context, id string)
	// Get a specific addon
	// (GET /api/admin/addons/{id})
	GetAddon(c *gin.Context, id string)
	// Update an addon
	// (PUT /api/admin/addons/{id})
	UpdateAddon(c *gin.Context, id string)
	// Get API tokens
	// (GET /api/admin/api-tokens)
	GetAllApiTokens(c *gin.Context)
	// Create API token
	// (POST /api/admin/api-tokens)
	CreateApiToken(c *gin.Context)
	// Get API tokens by name
	// (GET /api/admin/api-tokens/{name})
	GetApiTokensByName(c *gin.Context, name string)
	// Delete API token
	// (DELETE /api/admin/api-tokens/{token})
	DeleteApiToken(c *gin.Context, token string)
	// Update API token
	// (PUT /api/admin/api-tokens/{token})
	UpdateApiToken(c *gin.Context, token string)
	// Get archived features
	// (GET /api/admin/archive/features)
	GetArchivedFeatures(c *gin.Context)
	// Get archived features in project
	// (GET /api/admin/archive/features/{projectId})
	GetArchivedFeaturesByProjectId(c *gin.Context, projectId string)
	// Revives a feature
	// (POST /api/admin/archive/revive/{featureName})
	ReviveFeature(c *gin.Context, featureName string)
	// Archives a feature
	// (DELETE /api/admin/archive/{featureName})
	DeleteFeature(c *gin.Context, featureName string)
	// Last hour of usage and a list of applications that have reported seeing this feature toggle
	// (GET /api/admin/client-metrics/features/{name})
	GetFeatureUsageSummary(c *gin.Context, name string)
	// Get feature metrics
	// (GET /api/admin/client-metrics/features/{name}/raw)
	GetRawFeatureMetrics(c *gin.Context, name string)
	// Validate constraint
	// (POST /api/admin/constraints/validate)
	ValidateConstraint(c *gin.Context)
	// Gets configured context fields
	// (GET /api/admin/context)
	GetContextFields(c *gin.Context)
	// Create a context field
	// (POST /api/admin/context)
	CreateContextField(c *gin.Context)
	// Validate a context field
	// (POST /api/admin/context/validate)
	Validate(c *gin.Context)
	// Delete an existing context field
	// (DELETE /api/admin/context/{contextField})
	DeleteContextField(c *gin.Context, contextField string)
	// Gets context field
	// (GET /api/admin/context/{contextField})
	GetContextField(c *gin.Context, contextField string)
	// Update an existing context field
	// (PUT /api/admin/context/{contextField})
	UpdateContextField(c *gin.Context, contextField string)
	// Get strategies that use a context field
	// (GET /api/admin/context/{contextField}/strategies)
	GetStrategiesByContextField(c *gin.Context, contextField string)
	// Get all environments
	// (GET /api/admin/environments)
	GetAllEnvironments(c *gin.Context)
	// Get the environments available to a project
	// (GET /api/admin/environments/project/{projectId})
	GetProjectEnvironments(c *gin.Context, projectId string)
	// Update environment sort orders
	// (PUT /api/admin/environments/sort-order)
	UpdateSortOrder(c *gin.Context)
	// Get the environment with `name`
	// (GET /api/admin/environments/{name})
	GetEnvironment(c *gin.Context, name string)
	// Toggle the environment with `name` off
	// (POST /api/admin/environments/{name}/off)
	ToggleEnvironmentOff(c *gin.Context, name string)
	// Toggle the environment with `name` on
	// (POST /api/admin/environments/{name}/on)
	ToggleEnvironmentOn(c *gin.Context, name string)
	// Get the most recent events from the Unleash instance or all events related to a project.
	// (GET /api/admin/events)
	GetEvents(c *gin.Context, params GetEventsParams)
	// Search for events
	// (POST /api/admin/events/search)
	SearchEvents(c *gin.Context)
	// Get all events related to a specific feature toggle.
	// (GET /api/admin/events/{featureName})
	GetEventsForToggle(c *gin.Context, featureName string)
	// Get all feature types
	// (GET /api/admin/feature-types)
	GetAllFeatureTypes(c *gin.Context)
	// Update feature type lifetime
	// (PUT /api/admin/feature-types/{id}/lifetime)
	UpdateFeatureTypeLifetime(c *gin.Context, id string)
	// Get all feature toggles (deprecated)
	// (GET /api/admin/features)
	GetAllToggles(c *gin.Context)
	// Export feature toggles from an environment
	// (POST /api/admin/features-batch/export)
	ExportFeatures(c *gin.Context)
	// Import feature toggles
	// (POST /api/admin/features-batch/import)
	ImportToggles(c *gin.Context)
	// Validate feature import data
	// (POST /api/admin/features-batch/validate)
	ValidateImport(c *gin.Context)
	// Validate a feature toggle name.
	// (POST /api/admin/features/validate)
	ValidateFeature(c *gin.Context)
	// Get all tags for a feature.
	// (GET /api/admin/features/{featureName}/tags)
	ListTags(c *gin.Context, featureName string)
	// Adds a tag to a feature.
	// (POST /api/admin/features/{featureName}/tags)
	AddTag(c *gin.Context, featureName string)
	// Updates multiple tags for a feature.
	// (PUT /api/admin/features/{featureName}/tags)
	UpdateTags(c *gin.Context, featureName string)
	// Removes a tag from a feature.
	// (DELETE /api/admin/features/{featureName}/tags/{type}/{value})
	RemoveTag(c *gin.Context, featureName string, pType string, value string)
	// Send Unleash feedback
	// (POST /api/admin/feedback)
	CreateFeedback(c *gin.Context)
	// Update Unleash feedback
	// (PUT /api/admin/feedback/{id})
	UpdateFeedback(c *gin.Context, id string)
	// Instance usage statistics
	// (GET /api/admin/instance-admin/statistics)
	GetInstanceAdminStats(c *gin.Context)
	// Instance usage statistics
	// (GET /api/admin/instance-admin/statistics/csv)
	GetInstanceAdminStatsCsv(c *gin.Context)
	// Get public signup tokens
	// (GET /api/admin/invite-link/tokens)
	GetAllPublicSignupTokens(c *gin.Context)
	// Create a public signup token
	// (POST /api/admin/invite-link/tokens)
	CreatePublicSignupToken(c *gin.Context)
	// Retrieve a token
	// (GET /api/admin/invite-link/tokens/{token})
	GetPublicSignupToken(c *gin.Context, token string)
	// Update a public signup token
	// (PUT /api/admin/invite-link/tokens/{token})
	UpdatePublicSignupToken(c *gin.Context, token string)
	// Get maintenance mode status
	// (GET /api/admin/maintenance)
	GetMaintenance(c *gin.Context)
	// Enabled/disabled maintenance mode
	// (POST /api/admin/maintenance)
	ToggleMaintenance(c *gin.Context)
	// Get all applications
	// (GET /api/admin/metrics/applications)
	GetApplications(c *gin.Context)
	// Delete an application
	// (DELETE /api/admin/metrics/applications/{appName})
	DeleteApplication(c *gin.Context, appName string)
	// Get application data
	// (GET /api/admin/metrics/applications/{appName})
	GetApplication(c *gin.Context, appName string)
	// Create an application to connect reported metrics
	// (POST /api/admin/metrics/applications/{appName})
	CreateApplication(c *gin.Context, appName string)
	// Evaluate an Unleash context against a set of environments and projects.
	// (POST /api/admin/playground)
	GetPlayground(c *gin.Context)
	// Batch evaluate an Unleash context against a set of environments and projects.
	// (POST /api/admin/playground/advanced)
	GetAdvancedPlayground(c *gin.Context)
	// Get a list of all projects.
	// (GET /api/admin/projects)
	GetProjects(c *gin.Context)
	// Get an overview of a project. (deprecated)
	// (GET /api/admin/projects/{projectId})
	GetDeprecatedProjectOverview(c *gin.Context, projectId string)
	// Get api tokens for project.
	// (GET /api/admin/projects/{projectId}/api-tokens)
	GetProjectApiTokens(c *gin.Context, projectId string)
	// Create a project API token.
	// (POST /api/admin/projects/{projectId}/api-tokens)
	CreateProjectApiToken(c *gin.Context, projectId string)
	// Delete a project API token.
	// (DELETE /api/admin/projects/{projectId}/api-tokens/{token})
	DeleteProjectApiToken(c *gin.Context, projectId string, token string)
	// Archives a list of features
	// (POST /api/admin/projects/{projectId}/archive)
	ArchiveFeatures(c *gin.Context, projectId string)
	// Validates archive features
	// (POST /api/admin/projects/{projectId}/archive/validate)
	ValidateArchiveFeatures(c *gin.Context, projectId string)
	// Bulk disable a list of features
	// (POST /api/admin/projects/{projectId}/bulk_features/environments/{environment}/off)
	BulkToggleFeaturesEnvironmentOff(c *gin.Context, projectId string, environment string)
	// Bulk enable a list of features
	// (POST /api/admin/projects/{projectId}/bulk_features/environments/{environment}/on)
	BulkToggleFeaturesEnvironmentOn(c *gin.Context, projectId string, environment string)
	// Deletes a list of features
	// (POST /api/admin/projects/{projectId}/delete)
	DeleteFeatures(c *gin.Context, projectId string)
	// Check dependencies exist.
	// (GET /api/admin/projects/{projectId}/dependencies)
	CheckDependenciesExist(c *gin.Context, projectId string)
	// Get an overview project dora metrics.
	// (GET /api/admin/projects/{projectId}/dora)
	GetProjectDora(c *gin.Context, projectId string)
	// Add an environment to a project.
	// (POST /api/admin/projects/{projectId}/environments)
	AddEnvironmentToProject(c *gin.Context, projectId string)
	// Remove an environment from a project.
	// (DELETE /api/admin/projects/{projectId}/environments/{environment})
	RemoveEnvironmentFromProject(c *gin.Context, projectId string, environment string)
	// Set environment-default strategy
	// (POST /api/admin/projects/{projectId}/environments/{environment}/default-strategy)
	AddDefaultStrategyToProjectEnvironment(c *gin.Context, projectId string, environment string)
	// Remove project from favorites
	// (DELETE /api/admin/projects/{projectId}/favorites)
	RemoveFavoriteProject(c *gin.Context, projectId string)
	// Add project to favorites
	// (POST /api/admin/projects/{projectId}/favorites)
	AddFavoriteProject(c *gin.Context, projectId string)
	// Get all features in a project
	// (GET /api/admin/projects/{projectId}/features)
	GetFeatures(c *gin.Context, projectId string)
	// Add a new feature toggle
	// (POST /api/admin/projects/{projectId}/features)
	CreateFeature(c *gin.Context, projectId string)
	// Archive a feature toggle
	// (DELETE /api/admin/projects/{projectId}/features/{featureName})
	ArchiveFeature(c *gin.Context, projectId string, featureName string)
	// Get a feature
	// (GET /api/admin/projects/{projectId}/features/{featureName})
	GetFeature(c *gin.Context, projectId string, featureName string)
	// Modify a feature toggle
	// (PATCH /api/admin/projects/{projectId}/features/{featureName})
	PatchFeature(c *gin.Context, projectId string, featureName string)
	// Update a feature toggle
	// (PUT /api/admin/projects/{projectId}/features/{featureName})
	UpdateFeature(c *gin.Context, projectId string, featureName string)
	// Clone a feature toggle
	// (POST /api/admin/projects/{projectId}/features/{featureName}/clone)
	CloneFeature(c *gin.Context, projectId string, featureName string)
	// Deletes feature dependencies.
	// (DELETE /api/admin/projects/{projectId}/features/{featureName}/dependencies)
	DeleteFeatureDependencies(c *gin.Context, projectId string, featureName string)
	// Add a feature dependency.
	// (POST /api/admin/projects/{projectId}/features/{featureName}/dependencies)
	AddFeatureDependency(c *gin.Context, projectId string, featureName string)
	// Deletes a feature dependency.
	// (DELETE /api/admin/projects/{projectId}/features/{featureName}/dependencies/{parent})
	DeleteFeatureDependency(c *gin.Context, projectId string, featureName string, parent string)
	// Get a feature environment
	// (GET /api/admin/projects/{projectId}/features/{featureName}/environments/{environment})
	GetFeatureEnvironment(c *gin.Context, projectId string, featureName string, environment string)
	// Disable a feature toggle
	// (POST /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/off)
	ToggleFeatureEnvironmentOff(c *gin.Context, projectId string, featureName string, environment string)
	// Enable a feature toggle
	// (POST /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/on)
	ToggleFeatureEnvironmentOn(c *gin.Context, projectId string, featureName string, environment string)
	// Get feature toggle strategies
	// (GET /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies)
	GetFeatureStrategies(c *gin.Context, projectId string, featureName string, environment string)
	// Add a strategy to a feature toggle
	// (POST /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies)
	AddFeatureStrategy(c *gin.Context, projectId string, featureName string, environment string)
	// Set strategy sort order
	// (POST /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/set-sort-order)
	SetStrategySortOrder(c *gin.Context, projectId string, featureName string, environment string)
	// Delete a strategy from a feature toggle
	// (DELETE /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId})
	DeleteFeatureStrategy(c *gin.Context, projectId string, featureName string, environment string, strategyId string)
	// Get a strategy configuration
	// (GET /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId})
	GetFeatureStrategy(c *gin.Context, projectId string, featureName string, environment string, strategyId string)
	// Change specific properties of a strategy
	// (PATCH /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId})
	PatchFeatureStrategy(c *gin.Context, projectId string, featureName string, environment string, strategyId string)
	// Update a strategy
	// (PUT /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId})
	UpdateFeatureStrategy(c *gin.Context, projectId string, featureName string, environment string, strategyId string)
	// Get variants for a feature in an environment
	// (GET /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants)
	GetEnvironmentFeatureVariants(c *gin.Context, projectId string, featureName string, environment string)
	// Patch a feature's variants in an environment
	// (PATCH /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants)
	PatchEnvironmentsFeatureVariants(c *gin.Context, projectId string, featureName string, environment string)
	// Create (overwrite) variants for a feature in an environment
	// (PUT /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants)
	OverwriteEnvironmentFeatureVariants(c *gin.Context, projectId string, featureName string, environment string)
	// Remove feature from favorites
	// (DELETE /api/admin/projects/{projectId}/features/{featureName}/favorites)
	RemoveFavoriteFeature(c *gin.Context, projectId string, featureName string)
	// Add feature to favorites
	// (POST /api/admin/projects/{projectId}/features/{featureName}/favorites)
	AddFavoriteFeature(c *gin.Context, projectId string, featureName string)
	// List parent options.
	// (GET /api/admin/projects/{projectId}/features/{featureName}/parents)
	ListParentOptions(c *gin.Context, projectId string, featureName string)
	// Retrieve variants for a feature (deprecated)
	// (GET /api/admin/projects/{projectId}/features/{featureName}/variants)
	GetFeatureVariants(c *gin.Context, projectId string, featureName string)
	// Apply a patch to a feature's variants (in all environments).
	// (PATCH /api/admin/projects/{projectId}/features/{featureName}/variants)
	PatchFeatureVariants(c *gin.Context, projectId string, featureName string)
	// Create (overwrite) variants for a feature toggle in all environments
	// (PUT /api/admin/projects/{projectId}/features/{featureName}/variants)
	OverwriteFeatureVariants(c *gin.Context, projectId string, featureName string)
	// Create (overwrite) variants for a feature toggle in multiple environments
	// (PUT /api/admin/projects/{projectId}/features/{featureName}/variants-batch)
	OverwriteFeatureVariantsOnEnvironments(c *gin.Context, projectId string, featureName string)
	// Get a health report for a project.
	// (GET /api/admin/projects/{projectId}/health-report)
	GetProjectHealthReport(c *gin.Context, projectId string)
	// Get an overview of a project.
	// (GET /api/admin/projects/{projectId}/overview)
	GetProjectOverview(c *gin.Context, projectId string)
	// Revives a list of features
	// (POST /api/admin/projects/{projectId}/revive)
	ReviveFeatures(c *gin.Context, projectId string)
	// Mark features as stale / not stale
	// (POST /api/admin/projects/{projectId}/stale)
	StaleFeatures(c *gin.Context, projectId string)
	// Adds a tag to the specified features
	// (PUT /api/admin/projects/{projectId}/tags)
	AddTagToFeatures(c *gin.Context, projectId string)
	// Search and filter features
	// (GET /api/admin/search/features)
	SearchFeatures(c *gin.Context, params SearchFeaturesParams)
	// Get all segments
	// (GET /api/admin/segments)
	GetSegments(c *gin.Context)
	// Create a new segment
	// (POST /api/admin/segments)
	CreateSegment(c *gin.Context)
	// Update strategy segments
	// (POST /api/admin/segments/strategies)
	UpdateFeatureStrategySegments(c *gin.Context)
	// Get strategy segments
	// (GET /api/admin/segments/strategies/{strategyId})
	GetSegmentsByStrategyId(c *gin.Context, strategyId string)
	// Validates if a segment name exists
	// (POST /api/admin/segments/validate)
	ValidateSegment(c *gin.Context)
	// Deletes a segment by id
	// (DELETE /api/admin/segments/{id})
	RemoveSegment(c *gin.Context, id string)
	// Get a segment
	// (GET /api/admin/segments/{id})
	GetSegment(c *gin.Context, id string)
	// Update segment by id
	// (PUT /api/admin/segments/{id})
	UpdateSegment(c *gin.Context, id string)
	// Get strategies that reference segment
	// (GET /api/admin/segments/{id}/strategies)
	GetStrategiesBySegmentId(c *gin.Context, id string)
	// Update splash settings
	// (POST /api/admin/splash/{id})
	UpdateSplashSettings(c *gin.Context, id string)
	// Export state (deprecated)
	// (GET /api/admin/state/export)
	Export(c *gin.Context, params ExportParams)
	// Import state (deprecated)
	// (POST /api/admin/state/import)
	Import(c *gin.Context)
	// Get all strategies
	// (GET /api/admin/strategies)
	GetAllStrategies(c *gin.Context)
	// Create a strategy
	// (POST /api/admin/strategies)
	CreateStrategy(c *gin.Context)
	// Delete a strategy
	// (DELETE /api/admin/strategies/{name})
	RemoveStrategy(c *gin.Context, name string)
	// Get a strategy definition
	// (GET /api/admin/strategies/{name})
	GetStrategy(c *gin.Context, name string)
	// Update a strategy type
	// (PUT /api/admin/strategies/{name})
	UpdateStrategy(c *gin.Context, name string)
	// Deprecate a strategy
	// (POST /api/admin/strategies/{strategyName}/deprecate)
	DeprecateStrategy(c *gin.Context, strategyName string)
	// Reactivate a strategy
	// (POST /api/admin/strategies/{strategyName}/reactivate)
	ReactivateStrategy(c *gin.Context, strategyName string)
	// Get all tag types
	// (GET /api/admin/tag-types)
	GetTagTypes(c *gin.Context)
	// Create a tag type
	// (POST /api/admin/tag-types)
	CreateTagType(c *gin.Context)
	// Validate a tag type
	// (POST /api/admin/tag-types/validate)
	ValidateTagType(c *gin.Context)
	// Delete a tag type
	// (DELETE /api/admin/tag-types/{name})
	DeleteTagType(c *gin.Context, name string)
	// Get a tag type
	// (GET /api/admin/tag-types/{name})
	GetTagType(c *gin.Context, name string)
	// Update a tag type
	// (PUT /api/admin/tag-types/{name})
	UpdateTagType(c *gin.Context, name string)
	// List all tags.
	// (GET /api/admin/tags)
	GetTags(c *gin.Context)
	// Create a new tag.
	// (POST /api/admin/tags)
	CreateTag(c *gin.Context)
	// List all tags of a given type.
	// (GET /api/admin/tags/{type})
	GetTagsByType(c *gin.Context, pType string)
	// Delete a tag.
	// (DELETE /api/admin/tags/{type}/{value})
	DeleteTag(c *gin.Context, pType string, value string)
	// Get a tag by type and value.
	// (GET /api/admin/tags/{type}/{value})
	GetTag(c *gin.Context, pType string, value string)
	// Get telemetry settings
	// (GET /api/admin/telemetry/settings)
	GetTelemetrySettings(c *gin.Context)
	// Get UI configuration
	// (GET /api/admin/ui-config)
	GetUiConfig(c *gin.Context)
	// Set UI configuration
	// (POST /api/admin/ui-config)
	SetUiConfig(c *gin.Context)
	// Get your own user details
	// (GET /api/admin/user)
	GetMe(c *gin.Context)
	// Get all users and [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles)
	// (GET /api/admin/user-admin)
	GetUsers(c *gin.Context)
	// Create a new user
	// (POST /api/admin/user-admin)
	CreateUser(c *gin.Context)
	// Get basic user and group information
	// (GET /api/admin/user-admin/access)
	GetBaseUsersAndGroups(c *gin.Context)
	// Get total count of admin accounts
	// (GET /api/admin/user-admin/admin-count)
	GetAdminCount(c *gin.Context)
	// Reset user password
	// (POST /api/admin/user-admin/reset-password)
	ResetUserPassword(c *gin.Context)
	// Search users
	// (GET /api/admin/user-admin/search)
	SearchUsers(c *gin.Context, params SearchUsersParams)
	// Validate password for a user
	// (POST /api/admin/user-admin/validate-password)
	ValidateUserPassword(c *gin.Context)
	// Delete a user
	// (DELETE /api/admin/user-admin/{id})
	DeleteUser(c *gin.Context, id string)
	// Get user
	// (GET /api/admin/user-admin/{id})
	GetUser(c *gin.Context, id string)
	// Update a user
	// (PUT /api/admin/user-admin/{id})
	UpdateUser(c *gin.Context, id string)
	// Change password for a user
	// (POST /api/admin/user-admin/{id}/change-password)
	ChangeUserPassword(c *gin.Context, id string)
	// Change your own password
	// (POST /api/admin/user/change-password)
	ChangeMyPassword(c *gin.Context)
	// Get your own user profile
	// (GET /api/admin/user/profile)
	GetProfile(c *gin.Context)
	// Get all Personal Access Tokens for the current user.
	// (GET /api/admin/user/tokens)
	GetPats(c *gin.Context)
	// Create a new Personal Access Token.
	// (POST /api/admin/user/tokens)
	CreatePat(c *gin.Context)
	// Delete a Personal Access Token.
	// (DELETE /api/admin/user/tokens/{id})
	DeletePat(c *gin.Context, id string)
	// Get all toggles (SDK)
	// (GET /api/client/features)
	GetAllClientFeatures(c *gin.Context)
	// Get a single feature toggle
	// (GET /api/client/features/{featureName})
	GetClientFeature(c *gin.Context, featureName string)
	// Register client usage metrics
	// (POST /api/client/metrics)
	RegisterClientMetrics(c *gin.Context)
	// Register a client SDK
	// (POST /api/client/register)
	RegisterClientApplication(c *gin.Context)
	// Retrieve enabled feature toggles for the provided context.
	// (GET /api/frontend)
	GetFrontendFeatures(c *gin.Context)
	// Register client usage metrics
	// (POST /api/frontend/client/metrics)
	RegisterFrontendMetrics(c *gin.Context)
	// Register a client SDK
	// (POST /api/frontend/client/register)
	RegisterFrontendClient(c *gin.Context)
	// Changes a user password
	// (POST /auth/reset/password)
	ChangePassword(c *gin.Context)
	// Reset password
	// (POST /auth/reset/password-email)
	SendResetPasswordEmail(c *gin.Context)
	// Validates a token
	// (GET /auth/reset/validate)
	ValidateToken(c *gin.Context)
	// Validates password
	// (POST /auth/reset/validate-password)
	ValidatePassword(c *gin.Context)
	// Log in
	// (POST /auth/simple/login)
	Login(c *gin.Context)
	// Send metrics from Edge
	// (POST /edge/metrics)
	BulkMetrics(c *gin.Context)
	// Check which tokens are valid
	// (POST /edge/validate)
	GetValidTokens(c *gin.Context)
	// Get instance operational status
	// (GET /health)
	GetHealth(c *gin.Context)
	// Add a user via a signup token
	// (POST /invite/{token}/signup)
	AddPublicSignupTokenUser(c *gin.Context, token string)
	// Validate signup token
	// (GET /invite/{token}/validate)
	ValidatePublicSignupToken(c *gin.Context, token string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAddons operation middleware
func (siw *ServerInterfaceWrapper) GetAddons(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAddons(c)
}

// CreateAddon operation middleware
func (siw *ServerInterfaceWrapper) CreateAddon(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAddon(c)
}

// DeleteAddon operation middleware
func (siw *ServerInterfaceWrapper) DeleteAddon(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAddon(c, id)
}

// GetAddon operation middleware
func (siw *ServerInterfaceWrapper) GetAddon(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAddon(c, id)
}

// UpdateAddon operation middleware
func (siw *ServerInterfaceWrapper) UpdateAddon(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAddon(c, id)
}

// GetAllApiTokens operation middleware
func (siw *ServerInterfaceWrapper) GetAllApiTokens(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllApiTokens(c)
}

// CreateApiToken operation middleware
func (siw *ServerInterfaceWrapper) CreateApiToken(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateApiToken(c)
}

// GetApiTokensByName operation middleware
func (siw *ServerInterfaceWrapper) GetApiTokensByName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiTokensByName(c, name)
}

// DeleteApiToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiToken(c, token)
}

// UpdateApiToken operation middleware
func (siw *ServerInterfaceWrapper) UpdateApiToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateApiToken(c, token)
}

// GetArchivedFeatures operation middleware
func (siw *ServerInterfaceWrapper) GetArchivedFeatures(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArchivedFeatures(c)
}

// GetArchivedFeaturesByProjectId operation middleware
func (siw *ServerInterfaceWrapper) GetArchivedFeaturesByProjectId(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetArchivedFeaturesByProjectId(c, projectId)
}

// ReviveFeature operation middleware
func (siw *ServerInterfaceWrapper) ReviveFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReviveFeature(c, featureName)
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFeature(c, featureName)
}

// GetFeatureUsageSummary operation middleware
func (siw *ServerInterfaceWrapper) GetFeatureUsageSummary(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFeatureUsageSummary(c, name)
}

// GetRawFeatureMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetRawFeatureMetrics(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRawFeatureMetrics(c, name)
}

// ValidateConstraint operation middleware
func (siw *ServerInterfaceWrapper) ValidateConstraint(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateConstraint(c)
}

// GetContextFields operation middleware
func (siw *ServerInterfaceWrapper) GetContextFields(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetContextFields(c)
}

// CreateContextField operation middleware
func (siw *ServerInterfaceWrapper) CreateContextField(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateContextField(c)
}

// Validate operation middleware
func (siw *ServerInterfaceWrapper) Validate(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Validate(c)
}

// DeleteContextField operation middleware
func (siw *ServerInterfaceWrapper) DeleteContextField(c *gin.Context) {

	var err error

	// ------------- Path parameter "contextField" -------------
	var contextField string

	err = runtime.BindStyledParameterWithOptions("simple", "contextField", c.Param("contextField"), &contextField, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter contextField: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteContextField(c, contextField)
}

// GetContextField operation middleware
func (siw *ServerInterfaceWrapper) GetContextField(c *gin.Context) {

	var err error

	// ------------- Path parameter "contextField" -------------
	var contextField string

	err = runtime.BindStyledParameterWithOptions("simple", "contextField", c.Param("contextField"), &contextField, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter contextField: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetContextField(c, contextField)
}

// UpdateContextField operation middleware
func (siw *ServerInterfaceWrapper) UpdateContextField(c *gin.Context) {

	var err error

	// ------------- Path parameter "contextField" -------------
	var contextField string

	err = runtime.BindStyledParameterWithOptions("simple", "contextField", c.Param("contextField"), &contextField, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter contextField: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateContextField(c, contextField)
}

// GetStrategiesByContextField operation middleware
func (siw *ServerInterfaceWrapper) GetStrategiesByContextField(c *gin.Context) {

	var err error

	// ------------- Path parameter "contextField" -------------
	var contextField string

	err = runtime.BindStyledParameterWithOptions("simple", "contextField", c.Param("contextField"), &contextField, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter contextField: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStrategiesByContextField(c, contextField)
}

// GetAllEnvironments operation middleware
func (siw *ServerInterfaceWrapper) GetAllEnvironments(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllEnvironments(c)
}

// GetProjectEnvironments operation middleware
func (siw *ServerInterfaceWrapper) GetProjectEnvironments(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectEnvironments(c, projectId)
}

// UpdateSortOrder operation middleware
func (siw *ServerInterfaceWrapper) UpdateSortOrder(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSortOrder(c)
}

// GetEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironment(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnvironment(c, name)
}

// ToggleEnvironmentOff operation middleware
func (siw *ServerInterfaceWrapper) ToggleEnvironmentOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ToggleEnvironmentOff(c, name)
}

// ToggleEnvironmentOn operation middleware
func (siw *ServerInterfaceWrapper) ToggleEnvironmentOn(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ToggleEnvironmentOn(c, name)
}

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(c *gin.Context) {

	var err error

	c.Set(ApiKeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams

	// ------------- Optional query parameter "project" -------------

	err = runtime.BindQueryParameter("form", true, false, "project", c.Request.URL.Query(), &params.Project)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvents(c, params)
}

// SearchEvents operation middleware
func (siw *ServerInterfaceWrapper) SearchEvents(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchEvents(c)
}

// GetEventsForToggle operation middleware
func (siw *ServerInterfaceWrapper) GetEventsForToggle(c *gin.Context) {

	var err error

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventsForToggle(c, featureName)
}

// GetAllFeatureTypes operation middleware
func (siw *ServerInterfaceWrapper) GetAllFeatureTypes(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllFeatureTypes(c)
}

// UpdateFeatureTypeLifetime operation middleware
func (siw *ServerInterfaceWrapper) UpdateFeatureTypeLifetime(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateFeatureTypeLifetime(c, id)
}

// GetAllToggles operation middleware
func (siw *ServerInterfaceWrapper) GetAllToggles(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllToggles(c)
}

// ExportFeatures operation middleware
func (siw *ServerInterfaceWrapper) ExportFeatures(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExportFeatures(c)
}

// ImportToggles operation middleware
func (siw *ServerInterfaceWrapper) ImportToggles(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ImportToggles(c)
}

// ValidateImport operation middleware
func (siw *ServerInterfaceWrapper) ValidateImport(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateImport(c)
}

// ValidateFeature operation middleware
func (siw *ServerInterfaceWrapper) ValidateFeature(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateFeature(c)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(c *gin.Context) {

	var err error

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTags(c, featureName)
}

// AddTag operation middleware
func (siw *ServerInterfaceWrapper) AddTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddTag(c, featureName)
}

// UpdateTags operation middleware
func (siw *ServerInterfaceWrapper) UpdateTags(c *gin.Context) {

	var err error

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTags(c, featureName)
}

// RemoveTag operation middleware
func (siw *ServerInterfaceWrapper) RemoveTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithOptions("simple", "type", c.Param("type"), &pType, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "value" -------------
	var value string

	err = runtime.BindStyledParameterWithOptions("simple", "value", c.Param("value"), &value, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter value: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveTag(c, featureName, pType, value)
}

// CreateFeedback operation middleware
func (siw *ServerInterfaceWrapper) CreateFeedback(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateFeedback(c)
}

// UpdateFeedback operation middleware
func (siw *ServerInterfaceWrapper) UpdateFeedback(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateFeedback(c, id)
}

// GetInstanceAdminStats operation middleware
func (siw *ServerInterfaceWrapper) GetInstanceAdminStats(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetInstanceAdminStats(c)
}

// GetInstanceAdminStatsCsv operation middleware
func (siw *ServerInterfaceWrapper) GetInstanceAdminStatsCsv(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetInstanceAdminStatsCsv(c)
}

// GetAllPublicSignupTokens operation middleware
func (siw *ServerInterfaceWrapper) GetAllPublicSignupTokens(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllPublicSignupTokens(c)
}

// CreatePublicSignupToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePublicSignupToken(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePublicSignupToken(c)
}

// GetPublicSignupToken operation middleware
func (siw *ServerInterfaceWrapper) GetPublicSignupToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPublicSignupToken(c, token)
}

// UpdatePublicSignupToken operation middleware
func (siw *ServerInterfaceWrapper) UpdatePublicSignupToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePublicSignupToken(c, token)
}

// GetMaintenance operation middleware
func (siw *ServerInterfaceWrapper) GetMaintenance(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMaintenance(c)
}

// ToggleMaintenance operation middleware
func (siw *ServerInterfaceWrapper) ToggleMaintenance(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ToggleMaintenance(c)
}

// GetApplications operation middleware
func (siw *ServerInterfaceWrapper) GetApplications(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApplications(c)
}

// DeleteApplication operation middleware
func (siw *ServerInterfaceWrapper) DeleteApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "appName" -------------
	var appName string

	err = runtime.BindStyledParameterWithOptions("simple", "appName", c.Param("appName"), &appName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApplication(c, appName)
}

// GetApplication operation middleware
func (siw *ServerInterfaceWrapper) GetApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "appName" -------------
	var appName string

	err = runtime.BindStyledParameterWithOptions("simple", "appName", c.Param("appName"), &appName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApplication(c, appName)
}

// CreateApplication operation middleware
func (siw *ServerInterfaceWrapper) CreateApplication(c *gin.Context) {

	var err error

	// ------------- Path parameter "appName" -------------
	var appName string

	err = runtime.BindStyledParameterWithOptions("simple", "appName", c.Param("appName"), &appName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateApplication(c, appName)
}

// GetPlayground operation middleware
func (siw *ServerInterfaceWrapper) GetPlayground(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPlayground(c)
}

// GetAdvancedPlayground operation middleware
func (siw *ServerInterfaceWrapper) GetAdvancedPlayground(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdvancedPlayground(c)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjects(c)
}

// GetDeprecatedProjectOverview operation middleware
func (siw *ServerInterfaceWrapper) GetDeprecatedProjectOverview(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeprecatedProjectOverview(c, projectId)
}

// GetProjectApiTokens operation middleware
func (siw *ServerInterfaceWrapper) GetProjectApiTokens(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectApiTokens(c, projectId)
}

// CreateProjectApiToken operation middleware
func (siw *ServerInterfaceWrapper) CreateProjectApiToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProjectApiToken(c, projectId)
}

// DeleteProjectApiToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectApiToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProjectApiToken(c, projectId, token)
}

// ArchiveFeatures operation middleware
func (siw *ServerInterfaceWrapper) ArchiveFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ArchiveFeatures(c, projectId)
}

// ValidateArchiveFeatures operation middleware
func (siw *ServerInterfaceWrapper) ValidateArchiveFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateArchiveFeatures(c, projectId)
}

// BulkToggleFeaturesEnvironmentOff operation middleware
func (siw *ServerInterfaceWrapper) BulkToggleFeaturesEnvironmentOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkToggleFeaturesEnvironmentOff(c, projectId, environment)
}

// BulkToggleFeaturesEnvironmentOn operation middleware
func (siw *ServerInterfaceWrapper) BulkToggleFeaturesEnvironmentOn(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkToggleFeaturesEnvironmentOn(c, projectId, environment)
}

// DeleteFeatures operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFeatures(c, projectId)
}

// CheckDependenciesExist operation middleware
func (siw *ServerInterfaceWrapper) CheckDependenciesExist(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CheckDependenciesExist(c, projectId)
}

// GetProjectDora operation middleware
func (siw *ServerInterfaceWrapper) GetProjectDora(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectDora(c, projectId)
}

// AddEnvironmentToProject operation middleware
func (siw *ServerInterfaceWrapper) AddEnvironmentToProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddEnvironmentToProject(c, projectId)
}

// RemoveEnvironmentFromProject operation middleware
func (siw *ServerInterfaceWrapper) RemoveEnvironmentFromProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveEnvironmentFromProject(c, projectId, environment)
}

// AddDefaultStrategyToProjectEnvironment operation middleware
func (siw *ServerInterfaceWrapper) AddDefaultStrategyToProjectEnvironment(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddDefaultStrategyToProjectEnvironment(c, projectId, environment)
}

// RemoveFavoriteProject operation middleware
func (siw *ServerInterfaceWrapper) RemoveFavoriteProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveFavoriteProject(c, projectId)
}

// AddFavoriteProject operation middleware
func (siw *ServerInterfaceWrapper) AddFavoriteProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFavoriteProject(c, projectId)
}

// GetFeatures operation middleware
func (siw *ServerInterfaceWrapper) GetFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFeatures(c, projectId)
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateFeature(c, projectId)
}

// ArchiveFeature operation middleware
func (siw *ServerInterfaceWrapper) ArchiveFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ArchiveFeature(c, projectId, featureName)
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFeature(c, projectId, featureName)
}

// PatchFeature operation middleware
func (siw *ServerInterfaceWrapper) PatchFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchFeature(c, projectId, featureName)
}

// UpdateFeature operation middleware
func (siw *ServerInterfaceWrapper) UpdateFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateFeature(c, projectId, featureName)
}

// CloneFeature operation middleware
func (siw *ServerInterfaceWrapper) CloneFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CloneFeature(c, projectId, featureName)
}

// DeleteFeatureDependencies operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeatureDependencies(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFeatureDependencies(c, projectId, featureName)
}

// AddFeatureDependency operation middleware
func (siw *ServerInterfaceWrapper) AddFeatureDependency(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFeatureDependency(c, projectId, featureName)
}

// DeleteFeatureDependency operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeatureDependency(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "parent" -------------
	var parent string

	err = runtime.BindStyledParameterWithOptions("simple", "parent", c.Param("parent"), &parent, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter parent: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFeatureDependency(c, projectId, featureName, parent)
}

// GetFeatureEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetFeatureEnvironment(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFeatureEnvironment(c, projectId, featureName, environment)
}

// ToggleFeatureEnvironmentOff operation middleware
func (siw *ServerInterfaceWrapper) ToggleFeatureEnvironmentOff(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ToggleFeatureEnvironmentOff(c, projectId, featureName, environment)
}

// ToggleFeatureEnvironmentOn operation middleware
func (siw *ServerInterfaceWrapper) ToggleFeatureEnvironmentOn(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ToggleFeatureEnvironmentOn(c, projectId, featureName, environment)
}

// GetFeatureStrategies operation middleware
func (siw *ServerInterfaceWrapper) GetFeatureStrategies(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFeatureStrategies(c, projectId, featureName, environment)
}

// AddFeatureStrategy operation middleware
func (siw *ServerInterfaceWrapper) AddFeatureStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFeatureStrategy(c, projectId, featureName, environment)
}

// SetStrategySortOrder operation middleware
func (siw *ServerInterfaceWrapper) SetStrategySortOrder(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetStrategySortOrder(c, projectId, featureName, environment)
}

// DeleteFeatureStrategy operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeatureStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "strategyId" -------------
	var strategyId string

	err = runtime.BindStyledParameterWithOptions("simple", "strategyId", c.Param("strategyId"), &strategyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter strategyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFeatureStrategy(c, projectId, featureName, environment, strategyId)
}

// GetFeatureStrategy operation middleware
func (siw *ServerInterfaceWrapper) GetFeatureStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "strategyId" -------------
	var strategyId string

	err = runtime.BindStyledParameterWithOptions("simple", "strategyId", c.Param("strategyId"), &strategyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter strategyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFeatureStrategy(c, projectId, featureName, environment, strategyId)
}

// PatchFeatureStrategy operation middleware
func (siw *ServerInterfaceWrapper) PatchFeatureStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "strategyId" -------------
	var strategyId string

	err = runtime.BindStyledParameterWithOptions("simple", "strategyId", c.Param("strategyId"), &strategyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter strategyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchFeatureStrategy(c, projectId, featureName, environment, strategyId)
}

// UpdateFeatureStrategy operation middleware
func (siw *ServerInterfaceWrapper) UpdateFeatureStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "strategyId" -------------
	var strategyId string

	err = runtime.BindStyledParameterWithOptions("simple", "strategyId", c.Param("strategyId"), &strategyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter strategyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateFeatureStrategy(c, projectId, featureName, environment, strategyId)
}

// GetEnvironmentFeatureVariants operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironmentFeatureVariants(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEnvironmentFeatureVariants(c, projectId, featureName, environment)
}

// PatchEnvironmentsFeatureVariants operation middleware
func (siw *ServerInterfaceWrapper) PatchEnvironmentsFeatureVariants(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchEnvironmentsFeatureVariants(c, projectId, featureName, environment)
}

// OverwriteEnvironmentFeatureVariants operation middleware
func (siw *ServerInterfaceWrapper) OverwriteEnvironmentFeatureVariants(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "environment" -------------
	var environment string

	err = runtime.BindStyledParameterWithOptions("simple", "environment", c.Param("environment"), &environment, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environment: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OverwriteEnvironmentFeatureVariants(c, projectId, featureName, environment)
}

// RemoveFavoriteFeature operation middleware
func (siw *ServerInterfaceWrapper) RemoveFavoriteFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveFavoriteFeature(c, projectId, featureName)
}

// AddFavoriteFeature operation middleware
func (siw *ServerInterfaceWrapper) AddFavoriteFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFavoriteFeature(c, projectId, featureName)
}

// ListParentOptions operation middleware
func (siw *ServerInterfaceWrapper) ListParentOptions(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListParentOptions(c, projectId, featureName)
}

// GetFeatureVariants operation middleware
func (siw *ServerInterfaceWrapper) GetFeatureVariants(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFeatureVariants(c, projectId, featureName)
}

// PatchFeatureVariants operation middleware
func (siw *ServerInterfaceWrapper) PatchFeatureVariants(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchFeatureVariants(c, projectId, featureName)
}

// OverwriteFeatureVariants operation middleware
func (siw *ServerInterfaceWrapper) OverwriteFeatureVariants(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OverwriteFeatureVariants(c, projectId, featureName)
}

// OverwriteFeatureVariantsOnEnvironments operation middleware
func (siw *ServerInterfaceWrapper) OverwriteFeatureVariantsOnEnvironments(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.OverwriteFeatureVariantsOnEnvironments(c, projectId, featureName)
}

// GetProjectHealthReport operation middleware
func (siw *ServerInterfaceWrapper) GetProjectHealthReport(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectHealthReport(c, projectId)
}

// GetProjectOverview operation middleware
func (siw *ServerInterfaceWrapper) GetProjectOverview(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjectOverview(c, projectId)
}

// ReviveFeatures operation middleware
func (siw *ServerInterfaceWrapper) ReviveFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReviveFeatures(c, projectId)
}

// StaleFeatures operation middleware
func (siw *ServerInterfaceWrapper) StaleFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StaleFeatures(c, projectId)
}

// AddTagToFeatures operation middleware
func (siw *ServerInterfaceWrapper) AddTagToFeatures(c *gin.Context) {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddTagToFeatures(c, projectId)
}

// SearchFeatures operation middleware
func (siw *ServerInterfaceWrapper) SearchFeatures(c *gin.Context) {

	var err error

	c.Set(ApiKeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchFeaturesParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "project" -------------

	err = runtime.BindQueryParameter("form", true, false, "project", c.Request.URL.Query(), &params.Project)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter project: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", c.Request.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tag: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "segment" -------------

	err = runtime.BindQueryParameter("form", true, false, "segment", c.Request.URL.Query(), &params.Segment)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter segment: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortBy", c.Request.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortBy: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", c.Request.URL.Query(), &params.SortOrder)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sortOrder: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "favoritesFirst" -------------

	err = runtime.BindQueryParameter("form", true, false, "favoritesFirst", c.Request.URL.Query(), &params.FavoritesFirst)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter favoritesFirst: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "createdAt" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAt", c.Request.URL.Query(), &params.CreatedAt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter createdAt: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchFeatures(c, params)
}

// GetSegments operation middleware
func (siw *ServerInterfaceWrapper) GetSegments(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSegments(c)
}

// CreateSegment operation middleware
func (siw *ServerInterfaceWrapper) CreateSegment(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSegment(c)
}

// UpdateFeatureStrategySegments operation middleware
func (siw *ServerInterfaceWrapper) UpdateFeatureStrategySegments(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateFeatureStrategySegments(c)
}

// GetSegmentsByStrategyId operation middleware
func (siw *ServerInterfaceWrapper) GetSegmentsByStrategyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "strategyId" -------------
	var strategyId string

	err = runtime.BindStyledParameterWithOptions("simple", "strategyId", c.Param("strategyId"), &strategyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter strategyId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSegmentsByStrategyId(c, strategyId)
}

// ValidateSegment operation middleware
func (siw *ServerInterfaceWrapper) ValidateSegment(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateSegment(c)
}

// RemoveSegment operation middleware
func (siw *ServerInterfaceWrapper) RemoveSegment(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveSegment(c, id)
}

// GetSegment operation middleware
func (siw *ServerInterfaceWrapper) GetSegment(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSegment(c, id)
}

// UpdateSegment operation middleware
func (siw *ServerInterfaceWrapper) UpdateSegment(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSegment(c, id)
}

// GetStrategiesBySegmentId operation middleware
func (siw *ServerInterfaceWrapper) GetStrategiesBySegmentId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStrategiesBySegmentId(c, id)
}

// UpdateSplashSettings operation middleware
func (siw *ServerInterfaceWrapper) UpdateSplashSettings(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSplashSettings(c, id)
}

// Export operation middleware
func (siw *ServerInterfaceWrapper) Export(c *gin.Context) {

	var err error

	c.Set(ApiKeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExportParams

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", c.Request.URL.Query(), &params.Format)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "download" -------------

	err = runtime.BindQueryParameter("form", true, false, "download", c.Request.URL.Query(), &params.Download)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter download: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "strategies" -------------

	err = runtime.BindQueryParameter("form", true, false, "strategies", c.Request.URL.Query(), &params.Strategies)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter strategies: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "featureToggles" -------------

	err = runtime.BindQueryParameter("form", true, false, "featureToggles", c.Request.URL.Query(), &params.FeatureToggles)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureToggles: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "projects" -------------

	err = runtime.BindQueryParameter("form", true, false, "projects", c.Request.URL.Query(), &params.Projects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projects: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", c.Request.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tags: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "environments" -------------

	err = runtime.BindQueryParameter("form", true, false, "environments", c.Request.URL.Query(), &params.Environments)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter environments: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Export(c, params)
}

// Import operation middleware
func (siw *ServerInterfaceWrapper) Import(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Import(c)
}

// GetAllStrategies operation middleware
func (siw *ServerInterfaceWrapper) GetAllStrategies(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllStrategies(c)
}

// CreateStrategy operation middleware
func (siw *ServerInterfaceWrapper) CreateStrategy(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateStrategy(c)
}

// RemoveStrategy operation middleware
func (siw *ServerInterfaceWrapper) RemoveStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveStrategy(c, name)
}

// GetStrategy operation middleware
func (siw *ServerInterfaceWrapper) GetStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStrategy(c, name)
}

// UpdateStrategy operation middleware
func (siw *ServerInterfaceWrapper) UpdateStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateStrategy(c, name)
}

// DeprecateStrategy operation middleware
func (siw *ServerInterfaceWrapper) DeprecateStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "strategyName" -------------
	var strategyName string

	err = runtime.BindStyledParameterWithOptions("simple", "strategyName", c.Param("strategyName"), &strategyName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter strategyName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeprecateStrategy(c, strategyName)
}

// ReactivateStrategy operation middleware
func (siw *ServerInterfaceWrapper) ReactivateStrategy(c *gin.Context) {

	var err error

	// ------------- Path parameter "strategyName" -------------
	var strategyName string

	err = runtime.BindStyledParameterWithOptions("simple", "strategyName", c.Param("strategyName"), &strategyName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter strategyName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ReactivateStrategy(c, strategyName)
}

// GetTagTypes operation middleware
func (siw *ServerInterfaceWrapper) GetTagTypes(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTagTypes(c)
}

// CreateTagType operation middleware
func (siw *ServerInterfaceWrapper) CreateTagType(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTagType(c)
}

// ValidateTagType operation middleware
func (siw *ServerInterfaceWrapper) ValidateTagType(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateTagType(c)
}

// DeleteTagType operation middleware
func (siw *ServerInterfaceWrapper) DeleteTagType(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTagType(c, name)
}

// GetTagType operation middleware
func (siw *ServerInterfaceWrapper) GetTagType(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTagType(c, name)
}

// UpdateTagType operation middleware
func (siw *ServerInterfaceWrapper) UpdateTagType(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTagType(c, name)
}

// GetTags operation middleware
func (siw *ServerInterfaceWrapper) GetTags(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTags(c)
}

// CreateTag operation middleware
func (siw *ServerInterfaceWrapper) CreateTag(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTag(c)
}

// GetTagsByType operation middleware
func (siw *ServerInterfaceWrapper) GetTagsByType(c *gin.Context) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithOptions("simple", "type", c.Param("type"), &pType, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTagsByType(c, pType)
}

// DeleteTag operation middleware
func (siw *ServerInterfaceWrapper) DeleteTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithOptions("simple", "type", c.Param("type"), &pType, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "value" -------------
	var value string

	err = runtime.BindStyledParameterWithOptions("simple", "value", c.Param("value"), &value, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter value: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTag(c, pType, value)
}

// GetTag operation middleware
func (siw *ServerInterfaceWrapper) GetTag(c *gin.Context) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithOptions("simple", "type", c.Param("type"), &pType, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "value" -------------
	var value string

	err = runtime.BindStyledParameterWithOptions("simple", "value", c.Param("value"), &value, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter value: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTag(c, pType, value)
}

// GetTelemetrySettings operation middleware
func (siw *ServerInterfaceWrapper) GetTelemetrySettings(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTelemetrySettings(c)
}

// GetUiConfig operation middleware
func (siw *ServerInterfaceWrapper) GetUiConfig(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUiConfig(c)
}

// SetUiConfig operation middleware
func (siw *ServerInterfaceWrapper) SetUiConfig(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUiConfig(c)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMe(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GetBaseUsersAndGroups operation middleware
func (siw *ServerInterfaceWrapper) GetBaseUsersAndGroups(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBaseUsersAndGroups(c)
}

// GetAdminCount operation middleware
func (siw *ServerInterfaceWrapper) GetAdminCount(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAdminCount(c)
}

// ResetUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ResetUserPassword(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ResetUserPassword(c)
}

// SearchUsers operation middleware
func (siw *ServerInterfaceWrapper) SearchUsers(c *gin.Context) {

	var err error

	c.Set(ApiKeyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUsersParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SearchUsers(c, params)
}

// ValidateUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ValidateUserPassword(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateUserPassword(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUser(c, id)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUser(c, id)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUser(c, id)
}

// ChangeUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserPassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeUserPassword(c, id)
}

// ChangeMyPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeMyPassword(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeMyPassword(c)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfile(c)
}

// GetPats operation middleware
func (siw *ServerInterfaceWrapper) GetPats(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPats(c)
}

// CreatePat operation middleware
func (siw *ServerInterfaceWrapper) CreatePat(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreatePat(c)
}

// DeletePat operation middleware
func (siw *ServerInterfaceWrapper) DeletePat(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePat(c, id)
}

// GetAllClientFeatures operation middleware
func (siw *ServerInterfaceWrapper) GetAllClientFeatures(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllClientFeatures(c)
}

// GetClientFeature operation middleware
func (siw *ServerInterfaceWrapper) GetClientFeature(c *gin.Context) {

	var err error

	// ------------- Path parameter "featureName" -------------
	var featureName string

	err = runtime.BindStyledParameterWithOptions("simple", "featureName", c.Param("featureName"), &featureName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter featureName: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetClientFeature(c, featureName)
}

// RegisterClientMetrics operation middleware
func (siw *ServerInterfaceWrapper) RegisterClientMetrics(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterClientMetrics(c)
}

// RegisterClientApplication operation middleware
func (siw *ServerInterfaceWrapper) RegisterClientApplication(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterClientApplication(c)
}

// GetFrontendFeatures operation middleware
func (siw *ServerInterfaceWrapper) GetFrontendFeatures(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFrontendFeatures(c)
}

// RegisterFrontendMetrics operation middleware
func (siw *ServerInterfaceWrapper) RegisterFrontendMetrics(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterFrontendMetrics(c)
}

// RegisterFrontendClient operation middleware
func (siw *ServerInterfaceWrapper) RegisterFrontendClient(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterFrontendClient(c)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// SendResetPasswordEmail operation middleware
func (siw *ServerInterfaceWrapper) SendResetPasswordEmail(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendResetPasswordEmail(c)
}

// ValidateToken operation middleware
func (siw *ServerInterfaceWrapper) ValidateToken(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateToken(c)
}

// ValidatePassword operation middleware
func (siw *ServerInterfaceWrapper) ValidatePassword(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidatePassword(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// BulkMetrics operation middleware
func (siw *ServerInterfaceWrapper) BulkMetrics(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkMetrics(c)
}

// GetValidTokens operation middleware
func (siw *ServerInterfaceWrapper) GetValidTokens(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetValidTokens(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// AddPublicSignupTokenUser operation middleware
func (siw *ServerInterfaceWrapper) AddPublicSignupTokenUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddPublicSignupTokenUser(c, token)
}

// ValidatePublicSignupToken operation middleware
func (siw *ServerInterfaceWrapper) ValidatePublicSignupToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", c.Param("token"), &token, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidatePublicSignupToken(c, token)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/admin/addons", wrapper.GetAddons)
	router.POST(options.BaseURL+"/api/admin/addons", wrapper.CreateAddon)
	router.DELETE(options.BaseURL+"/api/admin/addons/:id", wrapper.DeleteAddon)
	router.GET(options.BaseURL+"/api/admin/addons/:id", wrapper.GetAddon)
	router.PUT(options.BaseURL+"/api/admin/addons/:id", wrapper.UpdateAddon)
	router.GET(options.BaseURL+"/api/admin/api-tokens", wrapper.GetAllApiTokens)
	router.POST(options.BaseURL+"/api/admin/api-tokens", wrapper.CreateApiToken)
	router.GET(options.BaseURL+"/api/admin/api-tokens/:name", wrapper.GetApiTokensByName)
	router.DELETE(options.BaseURL+"/api/admin/api-tokens/:token", wrapper.DeleteApiToken)
	router.PUT(options.BaseURL+"/api/admin/api-tokens/:token", wrapper.UpdateApiToken)
	router.GET(options.BaseURL+"/api/admin/archive/features", wrapper.GetArchivedFeatures)
	router.GET(options.BaseURL+"/api/admin/archive/features/:projectId", wrapper.GetArchivedFeaturesByProjectId)
	router.POST(options.BaseURL+"/api/admin/archive/revive/:featureName", wrapper.ReviveFeature)
	router.DELETE(options.BaseURL+"/api/admin/archive/:featureName", wrapper.DeleteFeature)
	router.GET(options.BaseURL+"/api/admin/client-metrics/features/:name", wrapper.GetFeatureUsageSummary)
	router.GET(options.BaseURL+"/api/admin/client-metrics/features/:name/raw", wrapper.GetRawFeatureMetrics)
	router.POST(options.BaseURL+"/api/admin/constraints/validate", wrapper.ValidateConstraint)
	router.GET(options.BaseURL+"/api/admin/context", wrapper.GetContextFields)
	router.POST(options.BaseURL+"/api/admin/context", wrapper.CreateContextField)
	router.POST(options.BaseURL+"/api/admin/context/validate", wrapper.Validate)
	router.DELETE(options.BaseURL+"/api/admin/context/:contextField", wrapper.DeleteContextField)
	router.GET(options.BaseURL+"/api/admin/context/:contextField", wrapper.GetContextField)
	router.PUT(options.BaseURL+"/api/admin/context/:contextField", wrapper.UpdateContextField)
	router.GET(options.BaseURL+"/api/admin/context/:contextField/strategies", wrapper.GetStrategiesByContextField)
	router.GET(options.BaseURL+"/api/admin/environments", wrapper.GetAllEnvironments)
	router.GET(options.BaseURL+"/api/admin/environments/project/:projectId", wrapper.GetProjectEnvironments)
	router.PUT(options.BaseURL+"/api/admin/environments/sort-order", wrapper.UpdateSortOrder)
	router.GET(options.BaseURL+"/api/admin/environments/:name", wrapper.GetEnvironment)
	router.POST(options.BaseURL+"/api/admin/environments/:name/off", wrapper.ToggleEnvironmentOff)
	router.POST(options.BaseURL+"/api/admin/environments/:name/on", wrapper.ToggleEnvironmentOn)
	router.GET(options.BaseURL+"/api/admin/events", wrapper.GetEvents)
	router.POST(options.BaseURL+"/api/admin/events/search", wrapper.SearchEvents)
	router.GET(options.BaseURL+"/api/admin/events/:featureName", wrapper.GetEventsForToggle)
	router.GET(options.BaseURL+"/api/admin/feature-types", wrapper.GetAllFeatureTypes)
	router.PUT(options.BaseURL+"/api/admin/feature-types/:id/lifetime", wrapper.UpdateFeatureTypeLifetime)
	router.GET(options.BaseURL+"/api/admin/features", wrapper.GetAllToggles)
	router.POST(options.BaseURL+"/api/admin/features-batch/export", wrapper.ExportFeatures)
	router.POST(options.BaseURL+"/api/admin/features-batch/import", wrapper.ImportToggles)
	router.POST(options.BaseURL+"/api/admin/features-batch/validate", wrapper.ValidateImport)
	router.POST(options.BaseURL+"/api/admin/features/validate", wrapper.ValidateFeature)
	router.GET(options.BaseURL+"/api/admin/features/:featureName/tags", wrapper.ListTags)
	router.POST(options.BaseURL+"/api/admin/features/:featureName/tags", wrapper.AddTag)
	router.PUT(options.BaseURL+"/api/admin/features/:featureName/tags", wrapper.UpdateTags)
	router.DELETE(options.BaseURL+"/api/admin/features/:featureName/tags/:type/:value", wrapper.RemoveTag)
	router.POST(options.BaseURL+"/api/admin/feedback", wrapper.CreateFeedback)
	router.PUT(options.BaseURL+"/api/admin/feedback/:id", wrapper.UpdateFeedback)
	router.GET(options.BaseURL+"/api/admin/instance-admin/statistics", wrapper.GetInstanceAdminStats)
	router.GET(options.BaseURL+"/api/admin/instance-admin/statistics/csv", wrapper.GetInstanceAdminStatsCsv)
	router.GET(options.BaseURL+"/api/admin/invite-link/tokens", wrapper.GetAllPublicSignupTokens)
	router.POST(options.BaseURL+"/api/admin/invite-link/tokens", wrapper.CreatePublicSignupToken)
	router.GET(options.BaseURL+"/api/admin/invite-link/tokens/:token", wrapper.GetPublicSignupToken)
	router.PUT(options.BaseURL+"/api/admin/invite-link/tokens/:token", wrapper.UpdatePublicSignupToken)
	router.GET(options.BaseURL+"/api/admin/maintenance", wrapper.GetMaintenance)
	router.POST(options.BaseURL+"/api/admin/maintenance", wrapper.ToggleMaintenance)
	router.GET(options.BaseURL+"/api/admin/metrics/applications", wrapper.GetApplications)
	router.DELETE(options.BaseURL+"/api/admin/metrics/applications/:appName", wrapper.DeleteApplication)
	router.GET(options.BaseURL+"/api/admin/metrics/applications/:appName", wrapper.GetApplication)
	router.POST(options.BaseURL+"/api/admin/metrics/applications/:appName", wrapper.CreateApplication)
	router.POST(options.BaseURL+"/api/admin/playground", wrapper.GetPlayground)
	router.POST(options.BaseURL+"/api/admin/playground/advanced", wrapper.GetAdvancedPlayground)
	router.GET(options.BaseURL+"/api/admin/projects", wrapper.GetProjects)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId", wrapper.GetDeprecatedProjectOverview)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/api-tokens", wrapper.GetProjectApiTokens)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/api-tokens", wrapper.CreateProjectApiToken)
	router.DELETE(options.BaseURL+"/api/admin/projects/:projectId/api-tokens/:token", wrapper.DeleteProjectApiToken)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/archive", wrapper.ArchiveFeatures)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/archive/validate", wrapper.ValidateArchiveFeatures)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/bulk_features/environments/:environment/off", wrapper.BulkToggleFeaturesEnvironmentOff)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/bulk_features/environments/:environment/on", wrapper.BulkToggleFeaturesEnvironmentOn)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/delete", wrapper.DeleteFeatures)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/dependencies", wrapper.CheckDependenciesExist)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/dora", wrapper.GetProjectDora)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/environments", wrapper.AddEnvironmentToProject)
	router.DELETE(options.BaseURL+"/api/admin/projects/:projectId/environments/:environment", wrapper.RemoveEnvironmentFromProject)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/environments/:environment/default-strategy", wrapper.AddDefaultStrategyToProjectEnvironment)
	router.DELETE(options.BaseURL+"/api/admin/projects/:projectId/favorites", wrapper.RemoveFavoriteProject)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/favorites", wrapper.AddFavoriteProject)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/features", wrapper.GetFeatures)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/features", wrapper.CreateFeature)
	router.DELETE(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName", wrapper.ArchiveFeature)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName", wrapper.GetFeature)
	router.PATCH(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName", wrapper.PatchFeature)
	router.PUT(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName", wrapper.UpdateFeature)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/clone", wrapper.CloneFeature)
	router.DELETE(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/dependencies", wrapper.DeleteFeatureDependencies)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/dependencies", wrapper.AddFeatureDependency)
	router.DELETE(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/dependencies/:parent", wrapper.DeleteFeatureDependency)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment", wrapper.GetFeatureEnvironment)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/off", wrapper.ToggleFeatureEnvironmentOff)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/on", wrapper.ToggleFeatureEnvironmentOn)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies", wrapper.GetFeatureStrategies)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies", wrapper.AddFeatureStrategy)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/set-sort-order", wrapper.SetStrategySortOrder)
	router.DELETE(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId", wrapper.DeleteFeatureStrategy)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId", wrapper.GetFeatureStrategy)
	router.PATCH(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId", wrapper.PatchFeatureStrategy)
	router.PUT(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/strategies/:strategyId", wrapper.UpdateFeatureStrategy)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/variants", wrapper.GetEnvironmentFeatureVariants)
	router.PATCH(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/variants", wrapper.PatchEnvironmentsFeatureVariants)
	router.PUT(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/environments/:environment/variants", wrapper.OverwriteEnvironmentFeatureVariants)
	router.DELETE(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/favorites", wrapper.RemoveFavoriteFeature)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/favorites", wrapper.AddFavoriteFeature)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/parents", wrapper.ListParentOptions)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/variants", wrapper.GetFeatureVariants)
	router.PATCH(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/variants", wrapper.PatchFeatureVariants)
	router.PUT(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/variants", wrapper.OverwriteFeatureVariants)
	router.PUT(options.BaseURL+"/api/admin/projects/:projectId/features/:featureName/variants-batch", wrapper.OverwriteFeatureVariantsOnEnvironments)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/health-report", wrapper.GetProjectHealthReport)
	router.GET(options.BaseURL+"/api/admin/projects/:projectId/overview", wrapper.GetProjectOverview)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/revive", wrapper.ReviveFeatures)
	router.POST(options.BaseURL+"/api/admin/projects/:projectId/stale", wrapper.StaleFeatures)
	router.PUT(options.BaseURL+"/api/admin/projects/:projectId/tags", wrapper.AddTagToFeatures)
	router.GET(options.BaseURL+"/api/admin/search/features", wrapper.SearchFeatures)
	router.GET(options.BaseURL+"/api/admin/segments", wrapper.GetSegments)
	router.POST(options.BaseURL+"/api/admin/segments", wrapper.CreateSegment)
	router.POST(options.BaseURL+"/api/admin/segments/strategies", wrapper.UpdateFeatureStrategySegments)
	router.GET(options.BaseURL+"/api/admin/segments/strategies/:strategyId", wrapper.GetSegmentsByStrategyId)
	router.POST(options.BaseURL+"/api/admin/segments/validate", wrapper.ValidateSegment)
	router.DELETE(options.BaseURL+"/api/admin/segments/:id", wrapper.RemoveSegment)
	router.GET(options.BaseURL+"/api/admin/segments/:id", wrapper.GetSegment)
	router.PUT(options.BaseURL+"/api/admin/segments/:id", wrapper.UpdateSegment)
	router.GET(options.BaseURL+"/api/admin/segments/:id/strategies", wrapper.GetStrategiesBySegmentId)
	router.POST(options.BaseURL+"/api/admin/splash/:id", wrapper.UpdateSplashSettings)
	router.GET(options.BaseURL+"/api/admin/state/export", wrapper.Export)
	router.POST(options.BaseURL+"/api/admin/state/import", wrapper.Import)
	router.GET(options.BaseURL+"/api/admin/strategies", wrapper.GetAllStrategies)
	router.POST(options.BaseURL+"/api/admin/strategies", wrapper.CreateStrategy)
	router.DELETE(options.BaseURL+"/api/admin/strategies/:name", wrapper.RemoveStrategy)
	router.GET(options.BaseURL+"/api/admin/strategies/:name", wrapper.GetStrategy)
	router.PUT(options.BaseURL+"/api/admin/strategies/:name", wrapper.UpdateStrategy)
	router.POST(options.BaseURL+"/api/admin/strategies/:strategyName/deprecate", wrapper.DeprecateStrategy)
	router.POST(options.BaseURL+"/api/admin/strategies/:strategyName/reactivate", wrapper.ReactivateStrategy)
	router.GET(options.BaseURL+"/api/admin/tag-types", wrapper.GetTagTypes)
	router.POST(options.BaseURL+"/api/admin/tag-types", wrapper.CreateTagType)
	router.POST(options.BaseURL+"/api/admin/tag-types/validate", wrapper.ValidateTagType)
	router.DELETE(options.BaseURL+"/api/admin/tag-types/:name", wrapper.DeleteTagType)
	router.GET(options.BaseURL+"/api/admin/tag-types/:name", wrapper.GetTagType)
	router.PUT(options.BaseURL+"/api/admin/tag-types/:name", wrapper.UpdateTagType)
	router.GET(options.BaseURL+"/api/admin/tags", wrapper.GetTags)
	router.POST(options.BaseURL+"/api/admin/tags", wrapper.CreateTag)
	router.GET(options.BaseURL+"/api/admin/tags/:type", wrapper.GetTagsByType)
	router.DELETE(options.BaseURL+"/api/admin/tags/:type/:value", wrapper.DeleteTag)
	router.GET(options.BaseURL+"/api/admin/tags/:type/:value", wrapper.GetTag)
	router.GET(options.BaseURL+"/api/admin/telemetry/settings", wrapper.GetTelemetrySettings)
	router.GET(options.BaseURL+"/api/admin/ui-config", wrapper.GetUiConfig)
	router.POST(options.BaseURL+"/api/admin/ui-config", wrapper.SetUiConfig)
	router.GET(options.BaseURL+"/api/admin/user", wrapper.GetMe)
	router.GET(options.BaseURL+"/api/admin/user-admin", wrapper.GetUsers)
	router.POST(options.BaseURL+"/api/admin/user-admin", wrapper.CreateUser)
	router.GET(options.BaseURL+"/api/admin/user-admin/access", wrapper.GetBaseUsersAndGroups)
	router.GET(options.BaseURL+"/api/admin/user-admin/admin-count", wrapper.GetAdminCount)
	router.POST(options.BaseURL+"/api/admin/user-admin/reset-password", wrapper.ResetUserPassword)
	router.GET(options.BaseURL+"/api/admin/user-admin/search", wrapper.SearchUsers)
	router.POST(options.BaseURL+"/api/admin/user-admin/validate-password", wrapper.ValidateUserPassword)
	router.DELETE(options.BaseURL+"/api/admin/user-admin/:id", wrapper.DeleteUser)
	router.GET(options.BaseURL+"/api/admin/user-admin/:id", wrapper.GetUser)
	router.PUT(options.BaseURL+"/api/admin/user-admin/:id", wrapper.UpdateUser)
	router.POST(options.BaseURL+"/api/admin/user-admin/:id/change-password", wrapper.ChangeUserPassword)
	router.POST(options.BaseURL+"/api/admin/user/change-password", wrapper.ChangeMyPassword)
	router.GET(options.BaseURL+"/api/admin/user/profile", wrapper.GetProfile)
	router.GET(options.BaseURL+"/api/admin/user/tokens", wrapper.GetPats)
	router.POST(options.BaseURL+"/api/admin/user/tokens", wrapper.CreatePat)
	router.DELETE(options.BaseURL+"/api/admin/user/tokens/:id", wrapper.DeletePat)
	router.GET(options.BaseURL+"/api/client/features", wrapper.GetAllClientFeatures)
	router.GET(options.BaseURL+"/api/client/features/:featureName", wrapper.GetClientFeature)
	router.POST(options.BaseURL+"/api/client/metrics", wrapper.RegisterClientMetrics)
	router.POST(options.BaseURL+"/api/client/register", wrapper.RegisterClientApplication)
	router.GET(options.BaseURL+"/api/frontend", wrapper.GetFrontendFeatures)
	router.POST(options.BaseURL+"/api/frontend/client/metrics", wrapper.RegisterFrontendMetrics)
	router.POST(options.BaseURL+"/api/frontend/client/register", wrapper.RegisterFrontendClient)
	router.POST(options.BaseURL+"/auth/reset/password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/auth/reset/password-email", wrapper.SendResetPasswordEmail)
	router.GET(options.BaseURL+"/auth/reset/validate", wrapper.ValidateToken)
	router.POST(options.BaseURL+"/auth/reset/validate-password", wrapper.ValidatePassword)
	router.POST(options.BaseURL+"/auth/simple/login", wrapper.Login)
	router.POST(options.BaseURL+"/edge/metrics", wrapper.BulkMetrics)
	router.POST(options.BaseURL+"/edge/validate", wrapper.GetValidTokens)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.POST(options.BaseURL+"/invite/:token/signup", wrapper.AddPublicSignupTokenUser)
	router.GET(options.BaseURL+"/invite/:token/validate", wrapper.ValidatePublicSignupToken)
}

type GetAddonsRequestObject struct {
}

type GetAddonsResponseObject interface {
	VisitGetAddonsResponse(w http.ResponseWriter) error
}

type GetAddons200JSONResponse AddonsSchema

func (response GetAddons200JSONResponse) VisitGetAddonsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAddons401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAddons401JSONResponse) VisitGetAddonsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateAddonRequestObject struct {
	Body *CreateAddonJSONRequestBody
}

type CreateAddonResponseObject interface {
	VisitCreateAddonResponse(w http.ResponseWriter) error
}

type CreateAddon200JSONResponse AddonSchema

func (response CreateAddon200JSONResponse) VisitCreateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAddon400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateAddon400JSONResponse) VisitCreateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAddon401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateAddon401JSONResponse) VisitCreateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateAddon403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateAddon403JSONResponse) VisitCreateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateAddon413JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateAddon413JSONResponse) VisitCreateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type CreateAddon415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateAddon415JSONResponse) VisitCreateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAddonRequestObject struct {
	Id string `json:"id"`
}

type DeleteAddonResponseObject interface {
	VisitDeleteAddonResponse(w http.ResponseWriter) error
}

type DeleteAddon200Response struct {
}

func (response DeleteAddon200Response) VisitDeleteAddonResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteAddon401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteAddon401JSONResponse) VisitDeleteAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAddon403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteAddon403JSONResponse) VisitDeleteAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAddon404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteAddon404JSONResponse) VisitDeleteAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAddonRequestObject struct {
	Id string `json:"id"`
}

type GetAddonResponseObject interface {
	VisitGetAddonResponse(w http.ResponseWriter) error
}

type GetAddon200JSONResponse AddonSchema

func (response GetAddon200JSONResponse) VisitGetAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAddon401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAddon401JSONResponse) VisitGetAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAddonRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateAddonJSONRequestBody
}

type UpdateAddonResponseObject interface {
	VisitUpdateAddonResponse(w http.ResponseWriter) error
}

type UpdateAddon200JSONResponse AddonSchema

func (response UpdateAddon200JSONResponse) VisitUpdateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAddon400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateAddon400JSONResponse) VisitUpdateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAddon401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateAddon401JSONResponse) VisitUpdateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAddon403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateAddon403JSONResponse) VisitUpdateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAddon404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateAddon404JSONResponse) VisitUpdateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAddon413JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateAddon413JSONResponse) VisitUpdateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAddon415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateAddon415JSONResponse) VisitUpdateAddonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetAllApiTokensRequestObject struct {
}

type GetAllApiTokensResponseObject interface {
	VisitGetAllApiTokensResponse(w http.ResponseWriter) error
}

type GetAllApiTokens200JSONResponse ApiTokensSchema

func (response GetAllApiTokens200JSONResponse) VisitGetAllApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllApiTokens401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAllApiTokens401JSONResponse) VisitGetAllApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllApiTokens403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAllApiTokens403JSONResponse) VisitGetAllApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateApiTokenRequestObject struct {
	Body *CreateApiTokenJSONRequestBody
}

type CreateApiTokenResponseObject interface {
	VisitCreateApiTokenResponse(w http.ResponseWriter) error
}

type CreateApiToken201ResponseHeaders struct {
	Location string
}

type CreateApiToken201JSONResponse struct {
	Body    ApiTokenSchema
	Headers CreateApiToken201ResponseHeaders
}

func (response CreateApiToken201JSONResponse) VisitCreateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateApiToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateApiToken401JSONResponse) VisitCreateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateApiToken403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateApiToken403JSONResponse) VisitCreateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateApiToken415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateApiToken415JSONResponse) VisitCreateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetApiTokensByNameRequestObject struct {
	Name string `json:"name"`
}

type GetApiTokensByNameResponseObject interface {
	VisitGetApiTokensByNameResponse(w http.ResponseWriter) error
}

type GetApiTokensByName200JSONResponse ApiTokensSchema

func (response GetApiTokensByName200JSONResponse) VisitGetApiTokensByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiTokensByName401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetApiTokensByName401JSONResponse) VisitGetApiTokensByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiTokensByName403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetApiTokensByName403JSONResponse) VisitGetApiTokensByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiTokenRequestObject struct {
	Token string `json:"token"`
}

type DeleteApiTokenResponseObject interface {
	VisitDeleteApiTokenResponse(w http.ResponseWriter) error
}

type DeleteApiToken200Response struct {
}

func (response DeleteApiToken200Response) VisitDeleteApiTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteApiToken401JSONResponse) VisitDeleteApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiToken403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteApiToken403JSONResponse) VisitDeleteApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApiTokenRequestObject struct {
	Token string `json:"token"`
	Body  *UpdateApiTokenJSONRequestBody
}

type UpdateApiTokenResponseObject interface {
	VisitUpdateApiTokenResponse(w http.ResponseWriter) error
}

type UpdateApiToken200Response struct {
}

func (response UpdateApiToken200Response) VisitUpdateApiTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateApiToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateApiToken401JSONResponse) VisitUpdateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApiToken403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateApiToken403JSONResponse) VisitUpdateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateApiToken415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateApiToken415JSONResponse) VisitUpdateApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetArchivedFeaturesRequestObject struct {
}

type GetArchivedFeaturesResponseObject interface {
	VisitGetArchivedFeaturesResponse(w http.ResponseWriter) error
}

type GetArchivedFeatures200JSONResponse FeaturesSchema

func (response GetArchivedFeatures200JSONResponse) VisitGetArchivedFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArchivedFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetArchivedFeatures401JSONResponse) VisitGetArchivedFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetArchivedFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetArchivedFeatures403JSONResponse) VisitGetArchivedFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetArchivedFeaturesByProjectIdRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetArchivedFeaturesByProjectIdResponseObject interface {
	VisitGetArchivedFeaturesByProjectIdResponse(w http.ResponseWriter) error
}

type GetArchivedFeaturesByProjectId200JSONResponse FeaturesSchema

func (response GetArchivedFeaturesByProjectId200JSONResponse) VisitGetArchivedFeaturesByProjectIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArchivedFeaturesByProjectId401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetArchivedFeaturesByProjectId401JSONResponse) VisitGetArchivedFeaturesByProjectIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetArchivedFeaturesByProjectId403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetArchivedFeaturesByProjectId403JSONResponse) VisitGetArchivedFeaturesByProjectIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReviveFeatureRequestObject struct {
	FeatureName string `json:"featureName"`
}

type ReviveFeatureResponseObject interface {
	VisitReviveFeatureResponse(w http.ResponseWriter) error
}

type ReviveFeature200Response struct {
}

func (response ReviveFeature200Response) VisitReviveFeatureResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReviveFeature400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReviveFeature400JSONResponse) VisitReviveFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReviveFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReviveFeature401JSONResponse) VisitReviveFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReviveFeature403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReviveFeature403JSONResponse) VisitReviveFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureRequestObject struct {
	FeatureName string `json:"featureName"`
}

type DeleteFeatureResponseObject interface {
	VisitDeleteFeatureResponse(w http.ResponseWriter) error
}

type DeleteFeature200Response struct {
}

func (response DeleteFeature200Response) VisitDeleteFeatureResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeature401JSONResponse) VisitDeleteFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeature403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeature403JSONResponse) VisitDeleteFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureUsageSummaryRequestObject struct {
	Name string `json:"name"`
}

type GetFeatureUsageSummaryResponseObject interface {
	VisitGetFeatureUsageSummaryResponse(w http.ResponseWriter) error
}

type GetFeatureUsageSummary200JSONResponse FeatureUsageSchema

func (response GetFeatureUsageSummary200JSONResponse) VisitGetFeatureUsageSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureUsageSummary401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureUsageSummary401JSONResponse) VisitGetFeatureUsageSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureUsageSummary403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureUsageSummary403JSONResponse) VisitGetFeatureUsageSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureUsageSummary404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureUsageSummary404JSONResponse) VisitGetFeatureUsageSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRawFeatureMetricsRequestObject struct {
	Name string `json:"name"`
}

type GetRawFeatureMetricsResponseObject interface {
	VisitGetRawFeatureMetricsResponse(w http.ResponseWriter) error
}

type GetRawFeatureMetrics200JSONResponse FeatureMetricsSchema

func (response GetRawFeatureMetrics200JSONResponse) VisitGetRawFeatureMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRawFeatureMetrics401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetRawFeatureMetrics401JSONResponse) VisitGetRawFeatureMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRawFeatureMetrics403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetRawFeatureMetrics403JSONResponse) VisitGetRawFeatureMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetRawFeatureMetrics404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetRawFeatureMetrics404JSONResponse) VisitGetRawFeatureMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ValidateConstraintRequestObject struct {
	Body *ValidateConstraintJSONRequestBody
}

type ValidateConstraintResponseObject interface {
	VisitValidateConstraintResponse(w http.ResponseWriter) error
}

type ValidateConstraint204Response struct {
}

func (response ValidateConstraint204Response) VisitValidateConstraintResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ValidateConstraint400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateConstraint400JSONResponse) VisitValidateConstraintResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidateConstraint401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateConstraint401JSONResponse) VisitValidateConstraintResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ValidateConstraint403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateConstraint403JSONResponse) VisitValidateConstraintResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ValidateConstraint415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateConstraint415JSONResponse) VisitValidateConstraintResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetContextFieldsRequestObject struct {
}

type GetContextFieldsResponseObject interface {
	VisitGetContextFieldsResponse(w http.ResponseWriter) error
}

type GetContextFields200JSONResponse ContextFieldsSchema

func (response GetContextFields200JSONResponse) VisitGetContextFieldsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateContextFieldRequestObject struct {
	Body *CreateContextFieldJSONRequestBody
}

type CreateContextFieldResponseObject interface {
	VisitCreateContextFieldResponse(w http.ResponseWriter) error
}

type CreateContextField201ResponseHeaders struct {
	Location string
}

type CreateContextField201JSONResponse struct {
	Body    ContextFieldSchema
	Headers CreateContextField201ResponseHeaders
}

func (response CreateContextField201JSONResponse) VisitCreateContextFieldResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type ValidateRequestObject struct {
	Body *ValidateJSONRequestBody
}

type ValidateResponseObject interface {
	VisitValidateResponse(w http.ResponseWriter) error
}

type Validate200Response struct {
}

func (response Validate200Response) VisitValidateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteContextFieldRequestObject struct {
	ContextField string `json:"contextField"`
}

type DeleteContextFieldResponseObject interface {
	VisitDeleteContextFieldResponse(w http.ResponseWriter) error
}

type DeleteContextField200Response struct {
}

func (response DeleteContextField200Response) VisitDeleteContextFieldResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetContextFieldRequestObject struct {
	ContextField string `json:"contextField"`
}

type GetContextFieldResponseObject interface {
	VisitGetContextFieldResponse(w http.ResponseWriter) error
}

type GetContextField200JSONResponse ContextFieldSchema

func (response GetContextField200JSONResponse) VisitGetContextFieldResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateContextFieldRequestObject struct {
	ContextField string `json:"contextField"`
	Body         *UpdateContextFieldJSONRequestBody
}

type UpdateContextFieldResponseObject interface {
	VisitUpdateContextFieldResponse(w http.ResponseWriter) error
}

type UpdateContextField200Response struct {
}

func (response UpdateContextField200Response) VisitUpdateContextFieldResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetStrategiesByContextFieldRequestObject struct {
	ContextField string `json:"contextField"`
}

type GetStrategiesByContextFieldResponseObject interface {
	VisitGetStrategiesByContextFieldResponse(w http.ResponseWriter) error
}

type GetStrategiesByContextField200JSONResponse ContextFieldStrategiesSchema

func (response GetStrategiesByContextField200JSONResponse) VisitGetStrategiesByContextFieldResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStrategiesByContextField401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetStrategiesByContextField401JSONResponse) VisitGetStrategiesByContextFieldResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllEnvironmentsRequestObject struct {
}

type GetAllEnvironmentsResponseObject interface {
	VisitGetAllEnvironmentsResponse(w http.ResponseWriter) error
}

type GetAllEnvironments200JSONResponse EnvironmentsSchema

func (response GetAllEnvironments200JSONResponse) VisitGetAllEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllEnvironments401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAllEnvironments401JSONResponse) VisitGetAllEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllEnvironments403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAllEnvironments403JSONResponse) VisitGetAllEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectEnvironmentsRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetProjectEnvironmentsResponseObject interface {
	VisitGetProjectEnvironmentsResponse(w http.ResponseWriter) error
}

type GetProjectEnvironments200JSONResponse EnvironmentsProjectSchema

func (response GetProjectEnvironments200JSONResponse) VisitGetProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectEnvironments401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectEnvironments401JSONResponse) VisitGetProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectEnvironments403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectEnvironments403JSONResponse) VisitGetProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectEnvironments404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectEnvironments404JSONResponse) VisitGetProjectEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSortOrderRequestObject struct {
	Body *UpdateSortOrderJSONRequestBody
}

type UpdateSortOrderResponseObject interface {
	VisitUpdateSortOrderResponse(w http.ResponseWriter) error
}

type UpdateSortOrder200Response struct {
}

func (response UpdateSortOrder200Response) VisitUpdateSortOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateSortOrder401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSortOrder401JSONResponse) VisitUpdateSortOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSortOrder403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSortOrder403JSONResponse) VisitUpdateSortOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSortOrder404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSortOrder404JSONResponse) VisitUpdateSortOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironmentRequestObject struct {
	Name string `json:"name"`
}

type GetEnvironmentResponseObject interface {
	VisitGetEnvironmentResponse(w http.ResponseWriter) error
}

type GetEnvironment200JSONResponse EnvironmentSchema

func (response GetEnvironment200JSONResponse) VisitGetEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironment401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetEnvironment401JSONResponse) VisitGetEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironment403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetEnvironment403JSONResponse) VisitGetEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironment404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetEnvironment404JSONResponse) VisitGetEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ToggleEnvironmentOffRequestObject struct {
	Name string `json:"name"`
}

type ToggleEnvironmentOffResponseObject interface {
	VisitToggleEnvironmentOffResponse(w http.ResponseWriter) error
}

type ToggleEnvironmentOff204Response struct {
}

func (response ToggleEnvironmentOff204Response) VisitToggleEnvironmentOffResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ToggleEnvironmentOff401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleEnvironmentOff401JSONResponse) VisitToggleEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ToggleEnvironmentOff403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleEnvironmentOff403JSONResponse) VisitToggleEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ToggleEnvironmentOff404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleEnvironmentOff404JSONResponse) VisitToggleEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ToggleEnvironmentOnRequestObject struct {
	Name string `json:"name"`
}

type ToggleEnvironmentOnResponseObject interface {
	VisitToggleEnvironmentOnResponse(w http.ResponseWriter) error
}

type ToggleEnvironmentOn204Response struct {
}

func (response ToggleEnvironmentOn204Response) VisitToggleEnvironmentOnResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ToggleEnvironmentOn401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleEnvironmentOn401JSONResponse) VisitToggleEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ToggleEnvironmentOn403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleEnvironmentOn403JSONResponse) VisitToggleEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ToggleEnvironmentOn404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleEnvironmentOn404JSONResponse) VisitToggleEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsRequestObject struct {
	Params GetEventsParams
}

type GetEventsResponseObject interface {
	VisitGetEventsResponse(w http.ResponseWriter) error
}

type GetEvents200JSONResponse EventsSchema

func (response GetEvents200JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetEvents401JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SearchEventsRequestObject struct {
	Body *SearchEventsJSONRequestBody
}

type SearchEventsResponseObject interface {
	VisitSearchEventsResponse(w http.ResponseWriter) error
}

type SearchEvents200JSONResponse EventsSchema

func (response SearchEvents200JSONResponse) VisitSearchEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForToggleRequestObject struct {
	FeatureName string `json:"featureName"`
}

type GetEventsForToggleResponseObject interface {
	VisitGetEventsForToggleResponse(w http.ResponseWriter) error
}

type GetEventsForToggle200JSONResponse FeatureEventsSchema

func (response GetEventsForToggle200JSONResponse) VisitGetEventsForToggleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsForToggle401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetEventsForToggle401JSONResponse) VisitGetEventsForToggleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllFeatureTypesRequestObject struct {
}

type GetAllFeatureTypesResponseObject interface {
	VisitGetAllFeatureTypesResponse(w http.ResponseWriter) error
}

type GetAllFeatureTypes200JSONResponse FeatureTypesSchema

func (response GetAllFeatureTypes200JSONResponse) VisitGetAllFeatureTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllFeatureTypes401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAllFeatureTypes401JSONResponse) VisitGetAllFeatureTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureTypeLifetimeRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateFeatureTypeLifetimeJSONRequestBody
}

type UpdateFeatureTypeLifetimeResponseObject interface {
	VisitUpdateFeatureTypeLifetimeResponse(w http.ResponseWriter) error
}

type UpdateFeatureTypeLifetime200JSONResponse FeatureTypeSchema

func (response UpdateFeatureTypeLifetime200JSONResponse) VisitUpdateFeatureTypeLifetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureTypeLifetime400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureTypeLifetime400JSONResponse) VisitUpdateFeatureTypeLifetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureTypeLifetime401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureTypeLifetime401JSONResponse) VisitUpdateFeatureTypeLifetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureTypeLifetime403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureTypeLifetime403JSONResponse) VisitUpdateFeatureTypeLifetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureTypeLifetime404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureTypeLifetime404JSONResponse) VisitUpdateFeatureTypeLifetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureTypeLifetime409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureTypeLifetime409JSONResponse) VisitUpdateFeatureTypeLifetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureTypeLifetime415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureTypeLifetime415JSONResponse) VisitUpdateFeatureTypeLifetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetAllTogglesRequestObject struct {
}

type GetAllTogglesResponseObject interface {
	VisitGetAllTogglesResponse(w http.ResponseWriter) error
}

type GetAllToggles200JSONResponse FeaturesSchema

func (response GetAllToggles200JSONResponse) VisitGetAllTogglesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllToggles401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAllToggles401JSONResponse) VisitGetAllTogglesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAllToggles403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAllToggles403JSONResponse) VisitGetAllTogglesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ExportFeaturesRequestObject struct {
	Body *ExportFeaturesJSONRequestBody
}

type ExportFeaturesResponseObject interface {
	VisitExportFeaturesResponse(w http.ResponseWriter) error
}

type ExportFeatures200JSONResponse ExportResultSchema

func (response ExportFeatures200JSONResponse) VisitExportFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExportFeatures404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ExportFeatures404JSONResponse) VisitExportFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ImportTogglesRequestObject struct {
	Body *ImportTogglesJSONRequestBody
}

type ImportTogglesResponseObject interface {
	VisitImportTogglesResponse(w http.ResponseWriter) error
}

type ImportToggles200Response struct {
}

func (response ImportToggles200Response) VisitImportTogglesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ImportToggles404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ImportToggles404JSONResponse) VisitImportTogglesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ValidateImportRequestObject struct {
	Body *ValidateImportJSONRequestBody
}

type ValidateImportResponseObject interface {
	VisitValidateImportResponse(w http.ResponseWriter) error
}

type ValidateImport200JSONResponse ImportTogglesValidateSchema

func (response ValidateImport200JSONResponse) VisitValidateImportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidateImport404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateImport404JSONResponse) VisitValidateImportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ValidateFeatureRequestObject struct {
	Body *ValidateFeatureJSONRequestBody
}

type ValidateFeatureResponseObject interface {
	VisitValidateFeatureResponse(w http.ResponseWriter) error
}

type ValidateFeature200Response struct {
}

func (response ValidateFeature200Response) VisitValidateFeatureResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidateFeature400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateFeature400JSONResponse) VisitValidateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidateFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateFeature401JSONResponse) VisitValidateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ValidateFeature409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateFeature409JSONResponse) VisitValidateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ValidateFeature415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateFeature415JSONResponse) VisitValidateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsRequestObject struct {
	FeatureName string `json:"featureName"`
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse TagsSchema

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTags401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ListTags401JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListTags403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ListTags403JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListTags404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ListTags404JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddTagRequestObject struct {
	FeatureName string `json:"featureName"`
	Body        *AddTagJSONRequestBody
}

type AddTagResponseObject interface {
	VisitAddTagResponse(w http.ResponseWriter) error
}

type AddTag201ResponseHeaders struct {
	Location string
}

type AddTag201JSONResponse struct {
	Body    TagSchema
	Headers AddTag201ResponseHeaders
}

func (response AddTag201JSONResponse) VisitAddTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type AddTag400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddTag400JSONResponse) VisitAddTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddTag401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddTag401JSONResponse) VisitAddTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddTag403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddTag403JSONResponse) VisitAddTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddTag404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddTag404JSONResponse) VisitAddTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagsRequestObject struct {
	FeatureName string `json:"featureName"`
	Body        *UpdateTagsJSONRequestBody
}

type UpdateTagsResponseObject interface {
	VisitUpdateTagsResponse(w http.ResponseWriter) error
}

type UpdateTags200ResponseHeaders struct {
	Location string
}

type UpdateTags200JSONResponse struct {
	Body    TagsSchema
	Headers UpdateTags200ResponseHeaders
}

func (response UpdateTags200JSONResponse) VisitUpdateTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTags400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateTags400JSONResponse) VisitUpdateTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTags401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateTags401JSONResponse) VisitUpdateTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTags403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateTags403JSONResponse) VisitUpdateTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTags404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateTags404JSONResponse) VisitUpdateTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RemoveTagRequestObject struct {
	FeatureName string `json:"featureName"`
	Type        string `json:"type"`
	Value       string `json:"value"`
}

type RemoveTagResponseObject interface {
	VisitRemoveTagResponse(w http.ResponseWriter) error
}

type RemoveTag200Response struct {
}

func (response RemoveTag200Response) VisitRemoveTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveTag401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveTag401JSONResponse) VisitRemoveTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveTag403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveTag403JSONResponse) VisitRemoveTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RemoveTag404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveTag404JSONResponse) VisitRemoveTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeedbackRequestObject struct {
	Body *CreateFeedbackJSONRequestBody
}

type CreateFeedbackResponseObject interface {
	VisitCreateFeedbackResponse(w http.ResponseWriter) error
}

type CreateFeedback200JSONResponse FeedbackResponseSchema

func (response CreateFeedback200JSONResponse) VisitCreateFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeedback400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateFeedback400JSONResponse) VisitCreateFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeedback401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateFeedback401JSONResponse) VisitCreateFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeedback415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateFeedback415JSONResponse) VisitCreateFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeedbackRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateFeedbackJSONRequestBody
}

type UpdateFeedbackResponseObject interface {
	VisitUpdateFeedbackResponse(w http.ResponseWriter) error
}

type UpdateFeedback200JSONResponse FeedbackResponseSchema

func (response UpdateFeedback200JSONResponse) VisitUpdateFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeedback400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeedback400JSONResponse) VisitUpdateFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeedback401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeedback401JSONResponse) VisitUpdateFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeedback415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeedback415JSONResponse) VisitUpdateFeedbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetInstanceAdminStatsRequestObject struct {
}

type GetInstanceAdminStatsResponseObject interface {
	VisitGetInstanceAdminStatsResponse(w http.ResponseWriter) error
}

type GetInstanceAdminStats200JSONResponse InstanceAdminStatsSchema

func (response GetInstanceAdminStats200JSONResponse) VisitGetInstanceAdminStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInstanceAdminStatsCsvRequestObject struct {
}

type GetInstanceAdminStatsCsvResponseObject interface {
	VisitGetInstanceAdminStatsCsvResponse(w http.ResponseWriter) error
}

type GetInstanceAdminStatsCsv200TextcsvResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetInstanceAdminStatsCsv200TextcsvResponse) VisitGetInstanceAdminStatsCsvResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/csv")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetAllPublicSignupTokensRequestObject struct {
}

type GetAllPublicSignupTokensResponseObject interface {
	VisitGetAllPublicSignupTokensResponse(w http.ResponseWriter) error
}

type GetAllPublicSignupTokens200JSONResponse PublicSignupTokensSchema

func (response GetAllPublicSignupTokens200JSONResponse) VisitGetAllPublicSignupTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublicSignupTokenRequestObject struct {
	Body *CreatePublicSignupTokenJSONRequestBody
}

type CreatePublicSignupTokenResponseObject interface {
	VisitCreatePublicSignupTokenResponse(w http.ResponseWriter) error
}

type CreatePublicSignupToken201ResponseHeaders struct {
	Location string
}

type CreatePublicSignupToken201JSONResponse struct {
	Body    PublicSignupTokenSchema
	Headers CreatePublicSignupToken201ResponseHeaders
}

func (response CreatePublicSignupToken201JSONResponse) VisitCreatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePublicSignupToken400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreatePublicSignupToken400JSONResponse) VisitCreatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublicSignupToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreatePublicSignupToken401JSONResponse) VisitCreatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublicSignupToken403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreatePublicSignupToken403JSONResponse) VisitCreatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetPublicSignupTokenRequestObject struct {
	Token string `json:"token"`
}

type GetPublicSignupTokenResponseObject interface {
	VisitGetPublicSignupTokenResponse(w http.ResponseWriter) error
}

type GetPublicSignupToken200JSONResponse PublicSignupTokenSchema

func (response GetPublicSignupToken200JSONResponse) VisitGetPublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPublicSignupToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetPublicSignupToken401JSONResponse) VisitGetPublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPublicSignupToken403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetPublicSignupToken403JSONResponse) VisitGetPublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePublicSignupTokenRequestObject struct {
	Token string `json:"token"`
	Body  *UpdatePublicSignupTokenJSONRequestBody
}

type UpdatePublicSignupTokenResponseObject interface {
	VisitUpdatePublicSignupTokenResponse(w http.ResponseWriter) error
}

type UpdatePublicSignupToken200JSONResponse PublicSignupTokenSchema

func (response UpdatePublicSignupToken200JSONResponse) VisitUpdatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePublicSignupToken400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdatePublicSignupToken400JSONResponse) VisitUpdatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePublicSignupToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdatePublicSignupToken401JSONResponse) VisitUpdatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePublicSignupToken403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdatePublicSignupToken403JSONResponse) VisitUpdatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetMaintenanceRequestObject struct {
}

type GetMaintenanceResponseObject interface {
	VisitGetMaintenanceResponse(w http.ResponseWriter) error
}

type GetMaintenance200JSONResponse MaintenanceSchema

func (response GetMaintenance200JSONResponse) VisitGetMaintenanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMaintenance401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetMaintenance401JSONResponse) VisitGetMaintenanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMaintenance403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetMaintenance403JSONResponse) VisitGetMaintenanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ToggleMaintenanceRequestObject struct {
	Body *ToggleMaintenanceJSONRequestBody
}

type ToggleMaintenanceResponseObject interface {
	VisitToggleMaintenanceResponse(w http.ResponseWriter) error
}

type ToggleMaintenance204Response struct {
}

func (response ToggleMaintenance204Response) VisitToggleMaintenanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ToggleMaintenance400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleMaintenance400JSONResponse) VisitToggleMaintenanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ToggleMaintenance401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleMaintenance401JSONResponse) VisitToggleMaintenanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ToggleMaintenance403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleMaintenance403JSONResponse) VisitToggleMaintenanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsRequestObject struct {
}

type GetApplicationsResponseObject interface {
	VisitGetApplicationsResponse(w http.ResponseWriter) error
}

type GetApplications200JSONResponse ApplicationsSchema

func (response GetApplications200JSONResponse) VisitGetApplicationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApplicationRequestObject struct {
	AppName string `json:"appName"`
}

type DeleteApplicationResponseObject interface {
	VisitDeleteApplicationResponse(w http.ResponseWriter) error
}

type DeleteApplication200Response struct {
}

func (response DeleteApplication200Response) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApplication401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteApplication401JSONResponse) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApplication403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteApplication403JSONResponse) VisitDeleteApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationRequestObject struct {
	AppName string `json:"appName"`
}

type GetApplicationResponseObject interface {
	VisitGetApplicationResponse(w http.ResponseWriter) error
}

type GetApplication200JSONResponse ApplicationSchema

func (response GetApplication200JSONResponse) VisitGetApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApplication404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetApplication404JSONResponse) VisitGetApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateApplicationRequestObject struct {
	AppName string `json:"appName"`
	Body    *CreateApplicationJSONRequestBody
}

type CreateApplicationResponseObject interface {
	VisitCreateApplicationResponse(w http.ResponseWriter) error
}

type CreateApplication202Response struct {
}

func (response CreateApplication202Response) VisitCreateApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type CreateApplication400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateApplication400JSONResponse) VisitCreateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateApplication401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateApplication401JSONResponse) VisitCreateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateApplication403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateApplication403JSONResponse) VisitCreateApplicationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetPlaygroundRequestObject struct {
	Body *GetPlaygroundJSONRequestBody
}

type GetPlaygroundResponseObject interface {
	VisitGetPlaygroundResponse(w http.ResponseWriter) error
}

type GetPlayground200JSONResponse PlaygroundResponseSchema

func (response GetPlayground200JSONResponse) VisitGetPlaygroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlayground400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetPlayground400JSONResponse) VisitGetPlaygroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPlayground401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetPlayground401JSONResponse) VisitGetPlaygroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAdvancedPlaygroundRequestObject struct {
	Body *GetAdvancedPlaygroundJSONRequestBody
}

type GetAdvancedPlaygroundResponseObject interface {
	VisitGetAdvancedPlaygroundResponse(w http.ResponseWriter) error
}

type GetAdvancedPlayground200JSONResponse AdvancedPlaygroundResponseSchema

func (response GetAdvancedPlayground200JSONResponse) VisitGetAdvancedPlaygroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAdvancedPlayground400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAdvancedPlayground400JSONResponse) VisitGetAdvancedPlaygroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAdvancedPlayground401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAdvancedPlayground401JSONResponse) VisitGetAdvancedPlaygroundResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsRequestObject struct {
}

type GetProjectsResponseObject interface {
	VisitGetProjectsResponse(w http.ResponseWriter) error
}

type GetProjects200JSONResponse ProjectsSchema

func (response GetProjects200JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjects401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjects401JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjects403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjects403JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeprecatedProjectOverviewRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetDeprecatedProjectOverviewResponseObject interface {
	VisitGetDeprecatedProjectOverviewResponse(w http.ResponseWriter) error
}

type GetDeprecatedProjectOverview200JSONResponse DeprecatedProjectOverviewSchema

func (response GetDeprecatedProjectOverview200JSONResponse) VisitGetDeprecatedProjectOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeprecatedProjectOverview401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetDeprecatedProjectOverview401JSONResponse) VisitGetDeprecatedProjectOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeprecatedProjectOverview403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetDeprecatedProjectOverview403JSONResponse) VisitGetDeprecatedProjectOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeprecatedProjectOverview404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetDeprecatedProjectOverview404JSONResponse) VisitGetDeprecatedProjectOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectApiTokensRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetProjectApiTokensResponseObject interface {
	VisitGetProjectApiTokensResponse(w http.ResponseWriter) error
}

type GetProjectApiTokens200JSONResponse ApiTokensSchema

func (response GetProjectApiTokens200JSONResponse) VisitGetProjectApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectApiTokens401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectApiTokens401JSONResponse) VisitGetProjectApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectApiTokens403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectApiTokens403JSONResponse) VisitGetProjectApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectApiTokens404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectApiTokens404JSONResponse) VisitGetProjectApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectApiTokenRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *CreateProjectApiTokenJSONRequestBody
}

type CreateProjectApiTokenResponseObject interface {
	VisitCreateProjectApiTokenResponse(w http.ResponseWriter) error
}

type CreateProjectApiToken201ResponseHeaders struct {
	Location string
}

type CreateProjectApiToken201JSONResponse struct {
	Body    ApiTokenSchema
	Headers CreateProjectApiToken201ResponseHeaders
}

func (response CreateProjectApiToken201JSONResponse) VisitCreateProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateProjectApiToken400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateProjectApiToken400JSONResponse) VisitCreateProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectApiToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateProjectApiToken401JSONResponse) VisitCreateProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectApiToken403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateProjectApiToken403JSONResponse) VisitCreateProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectApiToken404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateProjectApiToken404JSONResponse) VisitCreateProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectApiTokenRequestObject struct {
	ProjectId string `json:"projectId"`
	Token     string `json:"token"`
}

type DeleteProjectApiTokenResponseObject interface {
	VisitDeleteProjectApiTokenResponse(w http.ResponseWriter) error
}

type DeleteProjectApiToken200Response struct {
}

func (response DeleteProjectApiToken200Response) VisitDeleteProjectApiTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteProjectApiToken400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteProjectApiToken400JSONResponse) VisitDeleteProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectApiToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteProjectApiToken401JSONResponse) VisitDeleteProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectApiToken403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteProjectApiToken403JSONResponse) VisitDeleteProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectApiToken404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteProjectApiToken404JSONResponse) VisitDeleteProjectApiTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ArchiveFeaturesRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *ArchiveFeaturesJSONRequestBody
}

type ArchiveFeaturesResponseObject interface {
	VisitArchiveFeaturesResponse(w http.ResponseWriter) error
}

type ArchiveFeatures202Response struct {
}

func (response ArchiveFeatures202Response) VisitArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ArchiveFeatures400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ArchiveFeatures400JSONResponse) VisitArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ArchiveFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ArchiveFeatures401JSONResponse) VisitArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ArchiveFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ArchiveFeatures403JSONResponse) VisitArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ArchiveFeatures415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ArchiveFeatures415JSONResponse) VisitArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ValidateArchiveFeaturesRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *ValidateArchiveFeaturesJSONRequestBody
}

type ValidateArchiveFeaturesResponseObject interface {
	VisitValidateArchiveFeaturesResponse(w http.ResponseWriter) error
}

type ValidateArchiveFeatures200JSONResponse ValidateArchiveFeaturesSchema

func (response ValidateArchiveFeatures200JSONResponse) VisitValidateArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidateArchiveFeatures400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateArchiveFeatures400JSONResponse) VisitValidateArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidateArchiveFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateArchiveFeatures401JSONResponse) VisitValidateArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ValidateArchiveFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateArchiveFeatures403JSONResponse) VisitValidateArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ValidateArchiveFeatures415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateArchiveFeatures415JSONResponse) VisitValidateArchiveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOffRequestObject struct {
	ProjectId   string `json:"projectId"`
	Environment string `json:"environment"`
	Body        *BulkToggleFeaturesEnvironmentOffJSONRequestBody
}

type BulkToggleFeaturesEnvironmentOffResponseObject interface {
	VisitBulkToggleFeaturesEnvironmentOffResponse(w http.ResponseWriter) error
}

type BulkToggleFeaturesEnvironmentOff200Response struct {
}

func (response BulkToggleFeaturesEnvironmentOff200Response) VisitBulkToggleFeaturesEnvironmentOffResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type BulkToggleFeaturesEnvironmentOff400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOff400JSONResponse) VisitBulkToggleFeaturesEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOff401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOff401JSONResponse) VisitBulkToggleFeaturesEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOff403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOff403JSONResponse) VisitBulkToggleFeaturesEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOff404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOff404JSONResponse) VisitBulkToggleFeaturesEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOff413JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOff413JSONResponse) VisitBulkToggleFeaturesEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOff415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOff415JSONResponse) VisitBulkToggleFeaturesEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOnRequestObject struct {
	ProjectId   string `json:"projectId"`
	Environment string `json:"environment"`
	Body        *BulkToggleFeaturesEnvironmentOnJSONRequestBody
}

type BulkToggleFeaturesEnvironmentOnResponseObject interface {
	VisitBulkToggleFeaturesEnvironmentOnResponse(w http.ResponseWriter) error
}

type BulkToggleFeaturesEnvironmentOn200Response struct {
}

func (response BulkToggleFeaturesEnvironmentOn200Response) VisitBulkToggleFeaturesEnvironmentOnResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type BulkToggleFeaturesEnvironmentOn400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOn400JSONResponse) VisitBulkToggleFeaturesEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOn401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOn401JSONResponse) VisitBulkToggleFeaturesEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOn403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOn403JSONResponse) VisitBulkToggleFeaturesEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOn404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOn404JSONResponse) VisitBulkToggleFeaturesEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOn413JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOn413JSONResponse) VisitBulkToggleFeaturesEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type BulkToggleFeaturesEnvironmentOn415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkToggleFeaturesEnvironmentOn415JSONResponse) VisitBulkToggleFeaturesEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeaturesRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *DeleteFeaturesJSONRequestBody
}

type DeleteFeaturesResponseObject interface {
	VisitDeleteFeaturesResponse(w http.ResponseWriter) error
}

type DeleteFeatures200Response struct {
}

func (response DeleteFeatures200Response) VisitDeleteFeaturesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFeatures400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatures400JSONResponse) VisitDeleteFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatures401JSONResponse) VisitDeleteFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatures403JSONResponse) VisitDeleteFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CheckDependenciesExistRequestObject struct {
	ProjectId string `json:"projectId"`
}

type CheckDependenciesExistResponseObject interface {
	VisitCheckDependenciesExistResponse(w http.ResponseWriter) error
}

type CheckDependenciesExist200JSONResponse DependenciesExistSchema

func (response CheckDependenciesExist200JSONResponse) VisitCheckDependenciesExistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CheckDependenciesExist401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CheckDependenciesExist401JSONResponse) VisitCheckDependenciesExistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CheckDependenciesExist403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CheckDependenciesExist403JSONResponse) VisitCheckDependenciesExistResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectDoraRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetProjectDoraResponseObject interface {
	VisitGetProjectDoraResponse(w http.ResponseWriter) error
}

type GetProjectDora200JSONResponse ProjectDoraMetricsSchema

func (response GetProjectDora200JSONResponse) VisitGetProjectDoraResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectDora401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectDora401JSONResponse) VisitGetProjectDoraResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectDora403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectDora403JSONResponse) VisitGetProjectDoraResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectDora404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectDora404JSONResponse) VisitGetProjectDoraResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddEnvironmentToProjectRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *AddEnvironmentToProjectJSONRequestBody
}

type AddEnvironmentToProjectResponseObject interface {
	VisitAddEnvironmentToProjectResponse(w http.ResponseWriter) error
}

type AddEnvironmentToProject200Response struct {
}

func (response AddEnvironmentToProject200Response) VisitAddEnvironmentToProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AddEnvironmentToProject401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddEnvironmentToProject401JSONResponse) VisitAddEnvironmentToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddEnvironmentToProject403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddEnvironmentToProject403JSONResponse) VisitAddEnvironmentToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddEnvironmentToProject409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddEnvironmentToProject409JSONResponse) VisitAddEnvironmentToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RemoveEnvironmentFromProjectRequestObject struct {
	ProjectId   string `json:"projectId"`
	Environment string `json:"environment"`
}

type RemoveEnvironmentFromProjectResponseObject interface {
	VisitRemoveEnvironmentFromProjectResponse(w http.ResponseWriter) error
}

type RemoveEnvironmentFromProject200Response struct {
}

func (response RemoveEnvironmentFromProject200Response) VisitRemoveEnvironmentFromProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveEnvironmentFromProject400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveEnvironmentFromProject400JSONResponse) VisitRemoveEnvironmentFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RemoveEnvironmentFromProject401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveEnvironmentFromProject401JSONResponse) VisitRemoveEnvironmentFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveEnvironmentFromProject403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveEnvironmentFromProject403JSONResponse) VisitRemoveEnvironmentFromProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddDefaultStrategyToProjectEnvironmentRequestObject struct {
	ProjectId   string `json:"projectId"`
	Environment string `json:"environment"`
	Body        *AddDefaultStrategyToProjectEnvironmentJSONRequestBody
}

type AddDefaultStrategyToProjectEnvironmentResponseObject interface {
	VisitAddDefaultStrategyToProjectEnvironmentResponse(w http.ResponseWriter) error
}

type AddDefaultStrategyToProjectEnvironment200JSONResponse CreateFeatureStrategySchema

func (response AddDefaultStrategyToProjectEnvironment200JSONResponse) VisitAddDefaultStrategyToProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddDefaultStrategyToProjectEnvironment400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddDefaultStrategyToProjectEnvironment400JSONResponse) VisitAddDefaultStrategyToProjectEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFavoriteProjectRequestObject struct {
	ProjectId string `json:"projectId"`
}

type RemoveFavoriteProjectResponseObject interface {
	VisitRemoveFavoriteProjectResponse(w http.ResponseWriter) error
}

type RemoveFavoriteProject200Response struct {
}

func (response RemoveFavoriteProject200Response) VisitRemoveFavoriteProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveFavoriteProject401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveFavoriteProject401JSONResponse) VisitRemoveFavoriteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFavoriteProject404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveFavoriteProject404JSONResponse) VisitRemoveFavoriteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddFavoriteProjectRequestObject struct {
	ProjectId string `json:"projectId"`
}

type AddFavoriteProjectResponseObject interface {
	VisitAddFavoriteProjectResponse(w http.ResponseWriter) error
}

type AddFavoriteProject200Response struct {
}

func (response AddFavoriteProject200Response) VisitAddFavoriteProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AddFavoriteProject401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFavoriteProject401JSONResponse) VisitAddFavoriteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddFavoriteProject404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFavoriteProject404JSONResponse) VisitAddFavoriteProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFeaturesRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetFeaturesResponseObject interface {
	VisitGetFeaturesResponse(w http.ResponseWriter) error
}

type GetFeatures200JSONResponse FeaturesSchema

func (response GetFeatures200JSONResponse) VisitGetFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatures400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatures400JSONResponse) VisitGetFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatures401JSONResponse) VisitGetFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatures403JSONResponse) VisitGetFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeatureRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *CreateFeatureJSONRequestBody
}

type CreateFeatureResponseObject interface {
	VisitCreateFeatureResponse(w http.ResponseWriter) error
}

type CreateFeature200JSONResponse FeatureSchema

func (response CreateFeature200JSONResponse) VisitCreateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateFeature401JSONResponse) VisitCreateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeature403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateFeature403JSONResponse) VisitCreateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeature404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateFeature404JSONResponse) VisitCreateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateFeature415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateFeature415JSONResponse) VisitCreateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ArchiveFeatureRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
}

type ArchiveFeatureResponseObject interface {
	VisitArchiveFeatureResponse(w http.ResponseWriter) error
}

type ArchiveFeature202Response struct {
}

func (response ArchiveFeature202Response) VisitArchiveFeatureResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ArchiveFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ArchiveFeature401JSONResponse) VisitArchiveFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ArchiveFeature403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ArchiveFeature403JSONResponse) VisitArchiveFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ArchiveFeature404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ArchiveFeature404JSONResponse) VisitArchiveFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
}

type GetFeatureResponseObject interface {
	VisitGetFeatureResponse(w http.ResponseWriter) error
}

type GetFeature200JSONResponse FeatureSchema

func (response GetFeature200JSONResponse) VisitGetFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeature401JSONResponse) VisitGetFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFeature403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeature403JSONResponse) VisitGetFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFeature404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeature404JSONResponse) VisitGetFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Body        *PatchFeatureJSONRequestBody
}

type PatchFeatureResponseObject interface {
	VisitPatchFeatureResponse(w http.ResponseWriter) error
}

type PatchFeature200JSONResponse FeatureSchema

func (response PatchFeature200JSONResponse) VisitPatchFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeature401JSONResponse) VisitPatchFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeature403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeature403JSONResponse) VisitPatchFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeature404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeature404JSONResponse) VisitPatchFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeature415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeature415JSONResponse) VisitPatchFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Body        *UpdateFeatureJSONRequestBody
}

type UpdateFeatureResponseObject interface {
	VisitUpdateFeatureResponse(w http.ResponseWriter) error
}

type UpdateFeature200JSONResponse FeatureSchema

func (response UpdateFeature200JSONResponse) VisitUpdateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeature401JSONResponse) VisitUpdateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeature403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeature403JSONResponse) VisitUpdateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeature404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeature404JSONResponse) VisitUpdateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeature415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeature415JSONResponse) VisitUpdateFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type CloneFeatureRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Body        *CloneFeatureJSONRequestBody
}

type CloneFeatureResponseObject interface {
	VisitCloneFeatureResponse(w http.ResponseWriter) error
}

type CloneFeature200JSONResponse FeatureSchema

func (response CloneFeature200JSONResponse) VisitCloneFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CloneFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CloneFeature401JSONResponse) VisitCloneFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CloneFeature403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CloneFeature403JSONResponse) VisitCloneFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CloneFeature404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CloneFeature404JSONResponse) VisitCloneFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CloneFeature415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CloneFeature415JSONResponse) VisitCloneFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureDependenciesRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
}

type DeleteFeatureDependenciesResponseObject interface {
	VisitDeleteFeatureDependenciesResponse(w http.ResponseWriter) error
}

type DeleteFeatureDependencies200Response struct {
}

func (response DeleteFeatureDependencies200Response) VisitDeleteFeatureDependenciesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFeatureDependencies401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureDependencies401JSONResponse) VisitDeleteFeatureDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureDependencies403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureDependencies403JSONResponse) VisitDeleteFeatureDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureDependencies404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureDependencies404JSONResponse) VisitDeleteFeatureDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddFeatureDependencyRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Body        *AddFeatureDependencyJSONRequestBody
}

type AddFeatureDependencyResponseObject interface {
	VisitAddFeatureDependencyResponse(w http.ResponseWriter) error
}

type AddFeatureDependency200Response struct {
}

func (response AddFeatureDependency200Response) VisitAddFeatureDependencyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AddFeatureDependency401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFeatureDependency401JSONResponse) VisitAddFeatureDependencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddFeatureDependency403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFeatureDependency403JSONResponse) VisitAddFeatureDependencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddFeatureDependency404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFeatureDependency404JSONResponse) VisitAddFeatureDependencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureDependencyRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Parent      string `json:"parent"`
}

type DeleteFeatureDependencyResponseObject interface {
	VisitDeleteFeatureDependencyResponse(w http.ResponseWriter) error
}

type DeleteFeatureDependency200Response struct {
}

func (response DeleteFeatureDependency200Response) VisitDeleteFeatureDependencyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFeatureDependency401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureDependency401JSONResponse) VisitDeleteFeatureDependencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureDependency403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureDependency403JSONResponse) VisitDeleteFeatureDependencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureDependency404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureDependency404JSONResponse) VisitDeleteFeatureDependencyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureEnvironmentRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
}

type GetFeatureEnvironmentResponseObject interface {
	VisitGetFeatureEnvironmentResponse(w http.ResponseWriter) error
}

type GetFeatureEnvironment200JSONResponse FeatureEnvironmentSchema

func (response GetFeatureEnvironment200JSONResponse) VisitGetFeatureEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureEnvironment401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureEnvironment401JSONResponse) VisitGetFeatureEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureEnvironment403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureEnvironment403JSONResponse) VisitGetFeatureEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureEnvironment404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureEnvironment404JSONResponse) VisitGetFeatureEnvironmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOffRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
}

type ToggleFeatureEnvironmentOffResponseObject interface {
	VisitToggleFeatureEnvironmentOffResponse(w http.ResponseWriter) error
}

type ToggleFeatureEnvironmentOff200JSONResponse FeatureSchema

func (response ToggleFeatureEnvironmentOff200JSONResponse) VisitToggleFeatureEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOff400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleFeatureEnvironmentOff400JSONResponse) VisitToggleFeatureEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOff401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleFeatureEnvironmentOff401JSONResponse) VisitToggleFeatureEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOff403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleFeatureEnvironmentOff403JSONResponse) VisitToggleFeatureEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOff404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleFeatureEnvironmentOff404JSONResponse) VisitToggleFeatureEnvironmentOffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOnRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
}

type ToggleFeatureEnvironmentOnResponseObject interface {
	VisitToggleFeatureEnvironmentOnResponse(w http.ResponseWriter) error
}

type ToggleFeatureEnvironmentOn200JSONResponse FeatureSchema

func (response ToggleFeatureEnvironmentOn200JSONResponse) VisitToggleFeatureEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOn400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleFeatureEnvironmentOn400JSONResponse) VisitToggleFeatureEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOn401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleFeatureEnvironmentOn401JSONResponse) VisitToggleFeatureEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOn403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleFeatureEnvironmentOn403JSONResponse) VisitToggleFeatureEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ToggleFeatureEnvironmentOn404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ToggleFeatureEnvironmentOn404JSONResponse) VisitToggleFeatureEnvironmentOnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureStrategiesRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
}

type GetFeatureStrategiesResponseObject interface {
	VisitGetFeatureStrategiesResponse(w http.ResponseWriter) error
}

type GetFeatureStrategies200JSONResponse FeatureStrategiesSchema

func (response GetFeatureStrategies200JSONResponse) VisitGetFeatureStrategiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureStrategies401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureStrategies401JSONResponse) VisitGetFeatureStrategiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureStrategies403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureStrategies403JSONResponse) VisitGetFeatureStrategiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureStrategies404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureStrategies404JSONResponse) VisitGetFeatureStrategiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddFeatureStrategyRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
	Body        *AddFeatureStrategyJSONRequestBody
}

type AddFeatureStrategyResponseObject interface {
	VisitAddFeatureStrategyResponse(w http.ResponseWriter) error
}

type AddFeatureStrategy200JSONResponse FeatureStrategySchema

func (response AddFeatureStrategy200JSONResponse) VisitAddFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddFeatureStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFeatureStrategy401JSONResponse) VisitAddFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddFeatureStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFeatureStrategy403JSONResponse) VisitAddFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddFeatureStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFeatureStrategy404JSONResponse) VisitAddFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SetStrategySortOrderRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
	Body        *SetStrategySortOrderJSONRequestBody
}

type SetStrategySortOrderResponseObject interface {
	VisitSetStrategySortOrderResponse(w http.ResponseWriter) error
}

type SetStrategySortOrder200Response struct {
}

func (response SetStrategySortOrder200Response) VisitSetStrategySortOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetStrategySortOrder400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SetStrategySortOrder400JSONResponse) VisitSetStrategySortOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetStrategySortOrder401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SetStrategySortOrder401JSONResponse) VisitSetStrategySortOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SetStrategySortOrder403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SetStrategySortOrder403JSONResponse) VisitSetStrategySortOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureStrategyRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
	StrategyId  string `json:"strategyId"`
}

type DeleteFeatureStrategyResponseObject interface {
	VisitDeleteFeatureStrategyResponse(w http.ResponseWriter) error
}

type DeleteFeatureStrategy200Response struct {
}

func (response DeleteFeatureStrategy200Response) VisitDeleteFeatureStrategyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteFeatureStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureStrategy401JSONResponse) VisitDeleteFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureStrategy403JSONResponse) VisitDeleteFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFeatureStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteFeatureStrategy404JSONResponse) VisitDeleteFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureStrategyRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
	StrategyId  string `json:"strategyId"`
}

type GetFeatureStrategyResponseObject interface {
	VisitGetFeatureStrategyResponse(w http.ResponseWriter) error
}

type GetFeatureStrategy200JSONResponse FeatureStrategySchema

func (response GetFeatureStrategy200JSONResponse) VisitGetFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureStrategy401JSONResponse) VisitGetFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureStrategy403JSONResponse) VisitGetFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureStrategy404JSONResponse) VisitGetFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureStrategyRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
	StrategyId  string `json:"strategyId"`
	Body        *PatchFeatureStrategyJSONRequestBody
}

type PatchFeatureStrategyResponseObject interface {
	VisitPatchFeatureStrategyResponse(w http.ResponseWriter) error
}

type PatchFeatureStrategy200JSONResponse FeatureStrategySchema

func (response PatchFeatureStrategy200JSONResponse) VisitPatchFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureStrategy400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureStrategy400JSONResponse) VisitPatchFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureStrategy401JSONResponse) VisitPatchFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureStrategy403JSONResponse) VisitPatchFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureStrategy404JSONResponse) VisitPatchFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureStrategy415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureStrategy415JSONResponse) VisitPatchFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategyRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
	StrategyId  string `json:"strategyId"`
	Body        *UpdateFeatureStrategyJSONRequestBody
}

type UpdateFeatureStrategyResponseObject interface {
	VisitUpdateFeatureStrategyResponse(w http.ResponseWriter) error
}

type UpdateFeatureStrategy200JSONResponse FeatureStrategySchema

func (response UpdateFeatureStrategy200JSONResponse) VisitUpdateFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategy400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategy400JSONResponse) VisitUpdateFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategy401JSONResponse) VisitUpdateFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategy403JSONResponse) VisitUpdateFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategy404JSONResponse) VisitUpdateFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategy415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategy415JSONResponse) VisitUpdateFeatureStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironmentFeatureVariantsRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
}

type GetEnvironmentFeatureVariantsResponseObject interface {
	VisitGetEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error
}

type GetEnvironmentFeatureVariants200JSONResponse FeatureVariantsSchema

func (response GetEnvironmentFeatureVariants200JSONResponse) VisitGetEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironmentFeatureVariants401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetEnvironmentFeatureVariants401JSONResponse) VisitGetEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironmentFeatureVariants403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetEnvironmentFeatureVariants403JSONResponse) VisitGetEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetEnvironmentFeatureVariants404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetEnvironmentFeatureVariants404JSONResponse) VisitGetEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchEnvironmentsFeatureVariantsRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
	Body        *PatchEnvironmentsFeatureVariantsJSONRequestBody
}

type PatchEnvironmentsFeatureVariantsResponseObject interface {
	VisitPatchEnvironmentsFeatureVariantsResponse(w http.ResponseWriter) error
}

type PatchEnvironmentsFeatureVariants200JSONResponse FeatureVariantsSchema

func (response PatchEnvironmentsFeatureVariants200JSONResponse) VisitPatchEnvironmentsFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchEnvironmentsFeatureVariants400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchEnvironmentsFeatureVariants400JSONResponse) VisitPatchEnvironmentsFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchEnvironmentsFeatureVariants401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchEnvironmentsFeatureVariants401JSONResponse) VisitPatchEnvironmentsFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchEnvironmentsFeatureVariants403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchEnvironmentsFeatureVariants403JSONResponse) VisitPatchEnvironmentsFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchEnvironmentsFeatureVariants404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchEnvironmentsFeatureVariants404JSONResponse) VisitPatchEnvironmentsFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteEnvironmentFeatureVariantsRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Environment string `json:"environment"`
	Body        *OverwriteEnvironmentFeatureVariantsJSONRequestBody
}

type OverwriteEnvironmentFeatureVariantsResponseObject interface {
	VisitOverwriteEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error
}

type OverwriteEnvironmentFeatureVariants200JSONResponse FeatureVariantsSchema

func (response OverwriteEnvironmentFeatureVariants200JSONResponse) VisitOverwriteEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteEnvironmentFeatureVariants400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteEnvironmentFeatureVariants400JSONResponse) VisitOverwriteEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteEnvironmentFeatureVariants401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteEnvironmentFeatureVariants401JSONResponse) VisitOverwriteEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteEnvironmentFeatureVariants403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteEnvironmentFeatureVariants403JSONResponse) VisitOverwriteEnvironmentFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFavoriteFeatureRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
}

type RemoveFavoriteFeatureResponseObject interface {
	VisitRemoveFavoriteFeatureResponse(w http.ResponseWriter) error
}

type RemoveFavoriteFeature200Response struct {
}

func (response RemoveFavoriteFeature200Response) VisitRemoveFavoriteFeatureResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveFavoriteFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveFavoriteFeature401JSONResponse) VisitRemoveFavoriteFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveFavoriteFeature404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveFavoriteFeature404JSONResponse) VisitRemoveFavoriteFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddFavoriteFeatureRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
}

type AddFavoriteFeatureResponseObject interface {
	VisitAddFavoriteFeatureResponse(w http.ResponseWriter) error
}

type AddFavoriteFeature200Response struct {
}

func (response AddFavoriteFeature200Response) VisitAddFavoriteFeatureResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AddFavoriteFeature401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFavoriteFeature401JSONResponse) VisitAddFavoriteFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddFavoriteFeature404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddFavoriteFeature404JSONResponse) VisitAddFavoriteFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListParentOptionsRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
}

type ListParentOptionsResponseObject interface {
	VisitListParentOptionsResponse(w http.ResponseWriter) error
}

type ListParentOptions200JSONResponse ParentFeatureOptionsSchema

func (response ListParentOptions200JSONResponse) VisitListParentOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListParentOptions401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ListParentOptions401JSONResponse) VisitListParentOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListParentOptions403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ListParentOptions403JSONResponse) VisitListParentOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ListParentOptions404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ListParentOptions404JSONResponse) VisitListParentOptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureVariantsRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
}

type GetFeatureVariantsResponseObject interface {
	VisitGetFeatureVariantsResponse(w http.ResponseWriter) error
}

type GetFeatureVariants200JSONResponse FeatureVariantsSchema

func (response GetFeatureVariants200JSONResponse) VisitGetFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureVariants401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureVariants401JSONResponse) VisitGetFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureVariants403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureVariants403JSONResponse) VisitGetFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetFeatureVariants404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFeatureVariants404JSONResponse) VisitGetFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureVariantsRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Body        *PatchFeatureVariantsJSONRequestBody
}

type PatchFeatureVariantsResponseObject interface {
	VisitPatchFeatureVariantsResponse(w http.ResponseWriter) error
}

type PatchFeatureVariants200JSONResponse FeatureVariantsSchema

func (response PatchFeatureVariants200JSONResponse) VisitPatchFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureVariants400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureVariants400JSONResponse) VisitPatchFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureVariants401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureVariants401JSONResponse) VisitPatchFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureVariants403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureVariants403JSONResponse) VisitPatchFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchFeatureVariants404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response PatchFeatureVariants404JSONResponse) VisitPatchFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariantsRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Body        *OverwriteFeatureVariantsJSONRequestBody
}

type OverwriteFeatureVariantsResponseObject interface {
	VisitOverwriteFeatureVariantsResponse(w http.ResponseWriter) error
}

type OverwriteFeatureVariants200JSONResponse FeatureVariantsSchema

func (response OverwriteFeatureVariants200JSONResponse) VisitOverwriteFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariants400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteFeatureVariants400JSONResponse) VisitOverwriteFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariants401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteFeatureVariants401JSONResponse) VisitOverwriteFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariants403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteFeatureVariants403JSONResponse) VisitOverwriteFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariants404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteFeatureVariants404JSONResponse) VisitOverwriteFeatureVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariantsOnEnvironmentsRequestObject struct {
	ProjectId   string `json:"projectId"`
	FeatureName string `json:"featureName"`
	Body        *OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody
}

type OverwriteFeatureVariantsOnEnvironmentsResponseObject interface {
	VisitOverwriteFeatureVariantsOnEnvironmentsResponse(w http.ResponseWriter) error
}

type OverwriteFeatureVariantsOnEnvironments200JSONResponse FeatureVariantsSchema

func (response OverwriteFeatureVariantsOnEnvironments200JSONResponse) VisitOverwriteFeatureVariantsOnEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariantsOnEnvironments400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteFeatureVariantsOnEnvironments400JSONResponse) VisitOverwriteFeatureVariantsOnEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariantsOnEnvironments401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteFeatureVariantsOnEnvironments401JSONResponse) VisitOverwriteFeatureVariantsOnEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type OverwriteFeatureVariantsOnEnvironments403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response OverwriteFeatureVariantsOnEnvironments403JSONResponse) VisitOverwriteFeatureVariantsOnEnvironmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectHealthReportRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetProjectHealthReportResponseObject interface {
	VisitGetProjectHealthReportResponse(w http.ResponseWriter) error
}

type GetProjectHealthReport200JSONResponse HealthReportSchema

func (response GetProjectHealthReport200JSONResponse) VisitGetProjectHealthReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectHealthReport401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectHealthReport401JSONResponse) VisitGetProjectHealthReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectHealthReport403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectHealthReport403JSONResponse) VisitGetProjectHealthReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectHealthReport404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectHealthReport404JSONResponse) VisitGetProjectHealthReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectOverviewRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetProjectOverviewResponseObject interface {
	VisitGetProjectOverviewResponse(w http.ResponseWriter) error
}

type GetProjectOverview200JSONResponse ProjectOverviewSchema

func (response GetProjectOverview200JSONResponse) VisitGetProjectOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectOverview401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectOverview401JSONResponse) VisitGetProjectOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectOverview403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectOverview403JSONResponse) VisitGetProjectOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectOverview404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProjectOverview404JSONResponse) VisitGetProjectOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReviveFeaturesRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *ReviveFeaturesJSONRequestBody
}

type ReviveFeaturesResponseObject interface {
	VisitReviveFeaturesResponse(w http.ResponseWriter) error
}

type ReviveFeatures200Response struct {
}

func (response ReviveFeatures200Response) VisitReviveFeaturesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReviveFeatures400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReviveFeatures400JSONResponse) VisitReviveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReviveFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReviveFeatures401JSONResponse) VisitReviveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReviveFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReviveFeatures403JSONResponse) VisitReviveFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StaleFeaturesRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *StaleFeaturesJSONRequestBody
}

type StaleFeaturesResponseObject interface {
	VisitStaleFeaturesResponse(w http.ResponseWriter) error
}

type StaleFeatures202Response struct {
}

func (response StaleFeatures202Response) VisitStaleFeaturesResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type StaleFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response StaleFeatures401JSONResponse) VisitStaleFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type StaleFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response StaleFeatures403JSONResponse) VisitStaleFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type StaleFeatures415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response StaleFeatures415JSONResponse) VisitStaleFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type AddTagToFeaturesRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *AddTagToFeaturesJSONRequestBody
}

type AddTagToFeaturesResponseObject interface {
	VisitAddTagToFeaturesResponse(w http.ResponseWriter) error
}

type AddTagToFeatures200Response struct {
}

func (response AddTagToFeatures200Response) VisitAddTagToFeaturesResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AddTagToFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddTagToFeatures401JSONResponse) VisitAddTagToFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddTagToFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddTagToFeatures403JSONResponse) VisitAddTagToFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddTagToFeatures404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddTagToFeatures404JSONResponse) VisitAddTagToFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddTagToFeatures415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddTagToFeatures415JSONResponse) VisitAddTagToFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type SearchFeaturesRequestObject struct {
	Params SearchFeaturesParams
}

type SearchFeaturesResponseObject interface {
	VisitSearchFeaturesResponse(w http.ResponseWriter) error
}

type SearchFeatures200JSONResponse SearchFeaturesSchema

func (response SearchFeatures200JSONResponse) VisitSearchFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SearchFeatures401JSONResponse) VisitSearchFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SearchFeatures403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SearchFeatures403JSONResponse) VisitSearchFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type SearchFeatures404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SearchFeatures404JSONResponse) VisitSearchFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSegmentsRequestObject struct {
}

type GetSegmentsResponseObject interface {
	VisitGetSegmentsResponse(w http.ResponseWriter) error
}

type GetSegments200JSONResponse SegmentsSchema

func (response GetSegments200JSONResponse) VisitGetSegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSegmentRequestObject struct {
	Body *CreateSegmentJSONRequestBody
}

type CreateSegmentResponseObject interface {
	VisitCreateSegmentResponse(w http.ResponseWriter) error
}

type CreateSegment201ResponseHeaders struct {
	Location string
}

type CreateSegment201JSONResponse struct {
	Body    AdminSegmentSchema
	Headers CreateSegment201ResponseHeaders
}

func (response CreateSegment201JSONResponse) VisitCreateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateSegment400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateSegment400JSONResponse) VisitCreateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSegment401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateSegment401JSONResponse) VisitCreateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateSegment403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateSegment403JSONResponse) VisitCreateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateSegment409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateSegment409JSONResponse) VisitCreateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateSegment415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateSegment415JSONResponse) VisitCreateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategySegmentsRequestObject struct {
	Body *UpdateFeatureStrategySegmentsJSONRequestBody
}

type UpdateFeatureStrategySegmentsResponseObject interface {
	VisitUpdateFeatureStrategySegmentsResponse(w http.ResponseWriter) error
}

type UpdateFeatureStrategySegments201ResponseHeaders struct {
	Location string
}

type UpdateFeatureStrategySegments201JSONResponse struct {
	Body    UpdateFeatureStrategySegmentsSchema
	Headers UpdateFeatureStrategySegments201ResponseHeaders
}

func (response UpdateFeatureStrategySegments201JSONResponse) VisitUpdateFeatureStrategySegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateFeatureStrategySegments400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategySegments400JSONResponse) VisitUpdateFeatureStrategySegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategySegments401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategySegments401JSONResponse) VisitUpdateFeatureStrategySegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategySegments403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategySegments403JSONResponse) VisitUpdateFeatureStrategySegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFeatureStrategySegments415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateFeatureStrategySegments415JSONResponse) VisitUpdateFeatureStrategySegmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetSegmentsByStrategyIdRequestObject struct {
	StrategyId string `json:"strategyId"`
}

type GetSegmentsByStrategyIdResponseObject interface {
	VisitGetSegmentsByStrategyIdResponse(w http.ResponseWriter) error
}

type GetSegmentsByStrategyId200JSONResponse SegmentsSchema

func (response GetSegmentsByStrategyId200JSONResponse) VisitGetSegmentsByStrategyIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidateSegmentRequestObject struct {
	Body *ValidateSegmentJSONRequestBody
}

type ValidateSegmentResponseObject interface {
	VisitValidateSegmentResponse(w http.ResponseWriter) error
}

type ValidateSegment204Response struct {
}

func (response ValidateSegment204Response) VisitValidateSegmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ValidateSegment400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateSegment400JSONResponse) VisitValidateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidateSegment401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateSegment401JSONResponse) VisitValidateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ValidateSegment409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateSegment409JSONResponse) VisitValidateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ValidateSegment415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateSegment415JSONResponse) VisitValidateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type RemoveSegmentRequestObject struct {
	Id string `json:"id"`
}

type RemoveSegmentResponseObject interface {
	VisitRemoveSegmentResponse(w http.ResponseWriter) error
}

type RemoveSegment204Response struct {
}

func (response RemoveSegment204Response) VisitRemoveSegmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveSegment401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveSegment401JSONResponse) VisitRemoveSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveSegment403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveSegment403JSONResponse) VisitRemoveSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RemoveSegment409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveSegment409JSONResponse) VisitRemoveSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetSegmentRequestObject struct {
	Id string `json:"id"`
}

type GetSegmentResponseObject interface {
	VisitGetSegmentResponse(w http.ResponseWriter) error
}

type GetSegment200JSONResponse AdminSegmentSchema

func (response GetSegment200JSONResponse) VisitGetSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSegment404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetSegment404JSONResponse) VisitGetSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSegmentRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateSegmentJSONRequestBody
}

type UpdateSegmentResponseObject interface {
	VisitUpdateSegmentResponse(w http.ResponseWriter) error
}

type UpdateSegment204Response struct {
}

func (response UpdateSegment204Response) VisitUpdateSegmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateSegment400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSegment400JSONResponse) VisitUpdateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSegment401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSegment401JSONResponse) VisitUpdateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSegment403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSegment403JSONResponse) VisitUpdateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSegment409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSegment409JSONResponse) VisitUpdateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSegment415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSegment415JSONResponse) VisitUpdateSegmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetStrategiesBySegmentIdRequestObject struct {
	Id string `json:"id"`
}

type GetStrategiesBySegmentIdResponseObject interface {
	VisitGetStrategiesBySegmentIdResponse(w http.ResponseWriter) error
}

type GetStrategiesBySegmentId200JSONResponse SegmentStrategiesSchema

func (response GetStrategiesBySegmentId200JSONResponse) VisitGetStrategiesBySegmentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSplashSettingsRequestObject struct {
	Id string `json:"id"`
}

type UpdateSplashSettingsResponseObject interface {
	VisitUpdateSplashSettingsResponse(w http.ResponseWriter) error
}

type UpdateSplashSettings200JSONResponse SplashResponseSchema

func (response UpdateSplashSettings200JSONResponse) VisitUpdateSplashSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSplashSettings400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSplashSettings400JSONResponse) VisitUpdateSplashSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSplashSettings401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSplashSettings401JSONResponse) VisitUpdateSplashSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSplashSettings403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSplashSettings403JSONResponse) VisitUpdateSplashSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSplashSettings415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateSplashSettings415JSONResponse) VisitUpdateSplashSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ExportRequestObject struct {
	Params ExportParams
}

type ExportResponseObject interface {
	VisitExportResponse(w http.ResponseWriter) error
}

type Export200JSONResponse StateSchema

func (response Export200JSONResponse) VisitExportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ImportRequestObject struct {
	Body *ImportJSONRequestBody
}

type ImportResponseObject interface {
	VisitImportResponse(w http.ResponseWriter) error
}

type Import202Response struct {
}

func (response Import202Response) VisitImportResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type GetAllStrategiesRequestObject struct {
}

type GetAllStrategiesResponseObject interface {
	VisitGetAllStrategiesResponse(w http.ResponseWriter) error
}

type GetAllStrategies200JSONResponse StrategiesSchema

func (response GetAllStrategies200JSONResponse) VisitGetAllStrategiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllStrategies401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAllStrategies401JSONResponse) VisitGetAllStrategiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateStrategyRequestObject struct {
	Body *CreateStrategyJSONRequestBody
}

type CreateStrategyResponseObject interface {
	VisitCreateStrategyResponse(w http.ResponseWriter) error
}

type CreateStrategy201ResponseHeaders struct {
	Location string
}

type CreateStrategy201JSONResponse struct {
	Body    StrategySchema
	Headers CreateStrategy201ResponseHeaders
}

func (response CreateStrategy201JSONResponse) VisitCreateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateStrategy401JSONResponse) VisitCreateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateStrategy403JSONResponse) VisitCreateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateStrategy409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateStrategy409JSONResponse) VisitCreateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateStrategy415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateStrategy415JSONResponse) VisitCreateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type RemoveStrategyRequestObject struct {
	Name string `json:"name"`
}

type RemoveStrategyResponseObject interface {
	VisitRemoveStrategyResponse(w http.ResponseWriter) error
}

type RemoveStrategy200Response struct {
}

func (response RemoveStrategy200Response) VisitRemoveStrategyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RemoveStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveStrategy401JSONResponse) VisitRemoveStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RemoveStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveStrategy403JSONResponse) VisitRemoveStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RemoveStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RemoveStrategy404JSONResponse) VisitRemoveStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetStrategyRequestObject struct {
	Name string `json:"name"`
}

type GetStrategyResponseObject interface {
	VisitGetStrategyResponse(w http.ResponseWriter) error
}

type GetStrategy200JSONResponse StrategySchema

func (response GetStrategy200JSONResponse) VisitGetStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetStrategy401JSONResponse) VisitGetStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetStrategy404JSONResponse) VisitGetStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateStrategyRequestObject struct {
	Name string `json:"name"`
	Body *UpdateStrategyJSONRequestBody
}

type UpdateStrategyResponseObject interface {
	VisitUpdateStrategyResponse(w http.ResponseWriter) error
}

type UpdateStrategy200Response struct {
}

func (response UpdateStrategy200Response) VisitUpdateStrategyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateStrategy401JSONResponse) VisitUpdateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateStrategy403JSONResponse) VisitUpdateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateStrategy404JSONResponse) VisitUpdateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateStrategy415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateStrategy415JSONResponse) VisitUpdateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type DeprecateStrategyRequestObject struct {
	StrategyName string `json:"strategyName"`
}

type DeprecateStrategyResponseObject interface {
	VisitDeprecateStrategyResponse(w http.ResponseWriter) error
}

type DeprecateStrategy200Response struct {
}

func (response DeprecateStrategy200Response) VisitDeprecateStrategyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeprecateStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeprecateStrategy401JSONResponse) VisitDeprecateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeprecateStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeprecateStrategy403JSONResponse) VisitDeprecateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeprecateStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeprecateStrategy404JSONResponse) VisitDeprecateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReactivateStrategyRequestObject struct {
	StrategyName string `json:"strategyName"`
}

type ReactivateStrategyResponseObject interface {
	VisitReactivateStrategyResponse(w http.ResponseWriter) error
}

type ReactivateStrategy200Response struct {
}

func (response ReactivateStrategy200Response) VisitReactivateStrategyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReactivateStrategy401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReactivateStrategy401JSONResponse) VisitReactivateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReactivateStrategy403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReactivateStrategy403JSONResponse) VisitReactivateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ReactivateStrategy404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ReactivateStrategy404JSONResponse) VisitReactivateStrategyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTagTypesRequestObject struct {
}

type GetTagTypesResponseObject interface {
	VisitGetTagTypesResponse(w http.ResponseWriter) error
}

type GetTagTypes200JSONResponse TagTypesSchema

func (response GetTagTypes200JSONResponse) VisitGetTagTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTagTypes401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTagTypes401JSONResponse) VisitGetTagTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTagTypes403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTagTypes403JSONResponse) VisitGetTagTypesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagTypeRequestObject struct {
	Body *CreateTagTypeJSONRequestBody
}

type CreateTagTypeResponseObject interface {
	VisitCreateTagTypeResponse(w http.ResponseWriter) error
}

type CreateTagType201ResponseHeaders struct {
	Location string
}

type CreateTagType201JSONResponse struct {
	Body    TagTypeSchema
	Headers CreateTagType201ResponseHeaders
}

func (response CreateTagType201JSONResponse) VisitCreateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTagType400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTagType400JSONResponse) VisitCreateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagType401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTagType401JSONResponse) VisitCreateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagType403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTagType403JSONResponse) VisitCreateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagType409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTagType409JSONResponse) VisitCreateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagType415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTagType415JSONResponse) VisitCreateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ValidateTagTypeRequestObject struct {
	Body *ValidateTagTypeJSONRequestBody
}

type ValidateTagTypeResponseObject interface {
	VisitValidateTagTypeResponse(w http.ResponseWriter) error
}

type ValidateTagType200JSONResponse ValidateTagTypeSchema

func (response ValidateTagType200JSONResponse) VisitValidateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidateTagType400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateTagType400JSONResponse) VisitValidateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidateTagType401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateTagType401JSONResponse) VisitValidateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ValidateTagType403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateTagType403JSONResponse) VisitValidateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ValidateTagType409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateTagType409JSONResponse) VisitValidateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ValidateTagType415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateTagType415JSONResponse) VisitValidateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagTypeRequestObject struct {
	Name string `json:"name"`
}

type DeleteTagTypeResponseObject interface {
	VisitDeleteTagTypeResponse(w http.ResponseWriter) error
}

type DeleteTagType200Response struct {
}

func (response DeleteTagType200Response) VisitDeleteTagTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteTagType401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteTagType401JSONResponse) VisitDeleteTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagType403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteTagType403JSONResponse) VisitDeleteTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTagTypeRequestObject struct {
	Name string `json:"name"`
}

type GetTagTypeResponseObject interface {
	VisitGetTagTypeResponse(w http.ResponseWriter) error
}

type GetTagType200JSONResponse TagTypeSchema

func (response GetTagType200JSONResponse) VisitGetTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTagType401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTagType401JSONResponse) VisitGetTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTagType403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTagType403JSONResponse) VisitGetTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagTypeRequestObject struct {
	Name string `json:"name"`
	Body *UpdateTagTypeJSONRequestBody
}

type UpdateTagTypeResponseObject interface {
	VisitUpdateTagTypeResponse(w http.ResponseWriter) error
}

type UpdateTagType200Response struct {
}

func (response UpdateTagType200Response) VisitUpdateTagTypeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateTagType400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateTagType400JSONResponse) VisitUpdateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagType401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateTagType401JSONResponse) VisitUpdateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagType403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateTagType403JSONResponse) VisitUpdateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTagType415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateTagType415JSONResponse) VisitUpdateTagTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsRequestObject struct {
}

type GetTagsResponseObject interface {
	VisitGetTagsResponse(w http.ResponseWriter) error
}

type GetTags200JSONResponse TagsSchema

func (response GetTags200JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTags401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTags401JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTags403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTags403JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateTagRequestObject struct {
	Body *CreateTagJSONRequestBody
}

type CreateTagResponseObject interface {
	VisitCreateTagResponse(w http.ResponseWriter) error
}

type CreateTag201ResponseHeaders struct {
	Location string
}

type CreateTag201JSONResponse struct {
	Body    TagWithVersionSchema
	Headers CreateTag201ResponseHeaders
}

func (response CreateTag201JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTag400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTag400JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTag401JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTag403JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTag409JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateTag415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateTag415JSONResponse) VisitCreateTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsByTypeRequestObject struct {
	Type string `json:"type"`
}

type GetTagsByTypeResponseObject interface {
	VisitGetTagsByTypeResponse(w http.ResponseWriter) error
}

type GetTagsByType200JSONResponse TagsSchema

func (response GetTagsByType200JSONResponse) VisitGetTagsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsByType401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTagsByType401JSONResponse) VisitGetTagsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsByType403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTagsByType403JSONResponse) VisitGetTagsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagRequestObject struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type DeleteTagResponseObject interface {
	VisitDeleteTagResponse(w http.ResponseWriter) error
}

type DeleteTag200Response struct {
}

func (response DeleteTag200Response) VisitDeleteTagResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetTagRequestObject struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type GetTagResponseObject interface {
	VisitGetTagResponse(w http.ResponseWriter) error
}

type GetTag200JSONResponse TagWithVersionSchema

func (response GetTag200JSONResponse) VisitGetTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTag401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTag401JSONResponse) VisitGetTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTag403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTag403JSONResponse) VisitGetTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTag404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetTag404JSONResponse) VisitGetTagResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTelemetrySettingsRequestObject struct {
}

type GetTelemetrySettingsResponseObject interface {
	VisitGetTelemetrySettingsResponse(w http.ResponseWriter) error
}

type GetTelemetrySettings200JSONResponse TelemetrySettingsSchema

func (response GetTelemetrySettings200JSONResponse) VisitGetTelemetrySettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUiConfigRequestObject struct {
}

type GetUiConfigResponseObject interface {
	VisitGetUiConfigResponse(w http.ResponseWriter) error
}

type GetUiConfig200JSONResponse UiConfigSchema

func (response GetUiConfig200JSONResponse) VisitGetUiConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetUiConfigRequestObject struct {
	Body *SetUiConfigJSONRequestBody
}

type SetUiConfigResponseObject interface {
	VisitSetUiConfigResponse(w http.ResponseWriter) error
}

type SetUiConfig200Response struct {
}

func (response SetUiConfig200Response) VisitSetUiConfigResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetMeRequestObject struct {
}

type GetMeResponseObject interface {
	VisitGetMeResponse(w http.ResponseWriter) error
}

type GetMe200JSONResponse MeSchema

func (response GetMe200JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMe401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetMe401JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse UsersSchema

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetUsers403JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201ResponseHeaders struct {
	Location string
}

type CreateUser201JSONResponse struct {
	Body    CreateUserResponseSchema
	Headers CreateUser201ResponseHeaders
}

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateUser400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateUser401JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreateUser403JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetBaseUsersAndGroupsRequestObject struct {
}

type GetBaseUsersAndGroupsResponseObject interface {
	VisitGetBaseUsersAndGroupsResponse(w http.ResponseWriter) error
}

type GetBaseUsersAndGroups200JSONResponse UsersGroupsBaseSchema

func (response GetBaseUsersAndGroups200JSONResponse) VisitGetBaseUsersAndGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBaseUsersAndGroups401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetBaseUsersAndGroups401JSONResponse) VisitGetBaseUsersAndGroupsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAdminCountRequestObject struct {
}

type GetAdminCountResponseObject interface {
	VisitGetAdminCountResponse(w http.ResponseWriter) error
}

type GetAdminCount200JSONResponse AdminCountSchema

func (response GetAdminCount200JSONResponse) VisitGetAdminCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAdminCount401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAdminCount401JSONResponse) VisitGetAdminCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAdminCount403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetAdminCount403JSONResponse) VisitGetAdminCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ResetUserPasswordRequestObject struct {
	Body *ResetUserPasswordJSONRequestBody
}

type ResetUserPasswordResponseObject interface {
	VisitResetUserPasswordResponse(w http.ResponseWriter) error
}

type ResetUserPassword200JSONResponse ResetPasswordSchema

func (response ResetUserPassword200JSONResponse) VisitResetUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ResetUserPassword400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ResetUserPassword400JSONResponse) VisitResetUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ResetUserPassword401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ResetUserPassword401JSONResponse) VisitResetUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ResetUserPassword403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ResetUserPassword403JSONResponse) VisitResetUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ResetUserPassword404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ResetUserPassword404JSONResponse) VisitResetUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SearchUsersRequestObject struct {
	Params SearchUsersParams
}

type SearchUsersResponseObject interface {
	VisitSearchUsersResponse(w http.ResponseWriter) error
}

type SearchUsers200JSONResponse UsersSchema

func (response SearchUsers200JSONResponse) VisitSearchUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchUsers401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SearchUsers401JSONResponse) VisitSearchUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ValidateUserPasswordRequestObject struct {
	Body *ValidateUserPasswordJSONRequestBody
}

type ValidateUserPasswordResponseObject interface {
	VisitValidateUserPasswordResponse(w http.ResponseWriter) error
}

type ValidateUserPassword200Response struct {
}

func (response ValidateUserPassword200Response) VisitValidateUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidateUserPassword400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateUserPassword400JSONResponse) VisitValidateUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidateUserPassword401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateUserPassword401JSONResponse) VisitValidateUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ValidateUserPassword415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateUserPassword415JSONResponse) VisitValidateUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	Id string `json:"id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200Response struct {
}

func (response DeleteUser200Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteUser401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteUser401JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteUser403JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
	Id string `json:"id"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse UserSchema

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetUser400JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUser401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetUser401JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUser404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetUser404JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse CreateUserResponseSchema

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateUser400JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateUser401JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateUser403JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserPasswordRequestObject struct {
	Id   string `json:"id"`
	Body *ChangeUserPasswordJSONRequestBody
}

type ChangeUserPasswordResponseObject interface {
	VisitChangeUserPasswordResponse(w http.ResponseWriter) error
}

type ChangeUserPassword200Response struct {
}

func (response ChangeUserPassword200Response) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ChangeUserPassword400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ChangeUserPassword400JSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserPassword401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ChangeUserPassword401JSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ChangeUserPassword403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ChangeUserPassword403JSONResponse) VisitChangeUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ChangeMyPasswordRequestObject struct {
	Body *ChangeMyPasswordJSONRequestBody
}

type ChangeMyPasswordResponseObject interface {
	VisitChangeMyPasswordResponse(w http.ResponseWriter) error
}

type ChangeMyPassword200Response struct {
}

func (response ChangeMyPassword200Response) VisitChangeMyPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ChangeMyPassword400Response struct {
}

func (response ChangeMyPassword400Response) VisitChangeMyPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ChangeMyPassword401Response struct {
}

func (response ChangeMyPassword401Response) VisitChangeMyPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(w http.ResponseWriter) error
}

type GetProfile200JSONResponse ProfileSchema

func (response GetProfile200JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfile401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetProfile401JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPatsRequestObject struct {
}

type GetPatsResponseObject interface {
	VisitGetPatsResponse(w http.ResponseWriter) error
}

type GetPats200JSONResponse PatsSchema

func (response GetPats200JSONResponse) VisitGetPatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPats401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetPats401JSONResponse) VisitGetPatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPats403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetPats403JSONResponse) VisitGetPatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetPats404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetPats404JSONResponse) VisitGetPatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreatePatRequestObject struct {
	Body *CreatePatJSONRequestBody
}

type CreatePatResponseObject interface {
	VisitCreatePatResponse(w http.ResponseWriter) error
}

type CreatePat201ResponseHeaders struct {
	Location string
}

type CreatePat201JSONResponse struct {
	Body    PatSchema
	Headers CreatePat201ResponseHeaders
}

func (response CreatePat201JSONResponse) VisitCreatePatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreatePat401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreatePat401JSONResponse) VisitCreatePatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePat403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreatePat403JSONResponse) VisitCreatePatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreatePat404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response CreatePat404JSONResponse) VisitCreatePatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeletePatRequestObject struct {
	Id string `json:"id"`
}

type DeletePatResponseObject interface {
	VisitDeletePatResponse(w http.ResponseWriter) error
}

type DeletePat200Response struct {
}

func (response DeletePat200Response) VisitDeletePatResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeletePat401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeletePat401JSONResponse) VisitDeletePatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePat403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeletePat403JSONResponse) VisitDeletePatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeletePat404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response DeletePat404JSONResponse) VisitDeletePatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAllClientFeaturesRequestObject struct {
}

type GetAllClientFeaturesResponseObject interface {
	VisitGetAllClientFeaturesResponse(w http.ResponseWriter) error
}

type GetAllClientFeatures200JSONResponse ClientFeaturesSchema

func (response GetAllClientFeatures200JSONResponse) VisitGetAllClientFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClientFeatureRequestObject struct {
	FeatureName string `json:"featureName"`
}

type GetClientFeatureResponseObject interface {
	VisitGetClientFeatureResponse(w http.ResponseWriter) error
}

type GetClientFeature200JSONResponse ClientFeatureSchema

func (response GetClientFeature200JSONResponse) VisitGetClientFeatureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterClientMetricsRequestObject struct {
	Body *RegisterClientMetricsJSONRequestBody
}

type RegisterClientMetricsResponseObject interface {
	VisitRegisterClientMetricsResponse(w http.ResponseWriter) error
}

type RegisterClientMetrics202Response struct {
}

func (response RegisterClientMetrics202Response) VisitRegisterClientMetricsResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type RegisterClientMetrics204Response struct {
}

func (response RegisterClientMetrics204Response) VisitRegisterClientMetricsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RegisterClientMetrics400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RegisterClientMetrics400JSONResponse) VisitRegisterClientMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RegisterClientApplicationRequestObject struct {
	Body *RegisterClientApplicationJSONRequestBody
}

type RegisterClientApplicationResponseObject interface {
	VisitRegisterClientApplicationResponse(w http.ResponseWriter) error
}

type RegisterClientApplication202Response struct {
}

func (response RegisterClientApplication202Response) VisitRegisterClientApplicationResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type GetFrontendFeaturesRequestObject struct {
}

type GetFrontendFeaturesResponseObject interface {
	VisitGetFrontendFeaturesResponse(w http.ResponseWriter) error
}

type GetFrontendFeatures200JSONResponse ProxyFeaturesSchema

func (response GetFrontendFeatures200JSONResponse) VisitGetFrontendFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFrontendFeatures401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFrontendFeatures401JSONResponse) VisitGetFrontendFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFrontendFeatures404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetFrontendFeatures404JSONResponse) VisitGetFrontendFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RegisterFrontendMetricsRequestObject struct {
	Body *RegisterFrontendMetricsJSONRequestBody
}

type RegisterFrontendMetricsResponseObject interface {
	VisitRegisterFrontendMetricsResponse(w http.ResponseWriter) error
}

type RegisterFrontendMetrics200Response struct {
}

func (response RegisterFrontendMetrics200Response) VisitRegisterFrontendMetricsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RegisterFrontendMetrics204Response struct {
}

func (response RegisterFrontendMetrics204Response) VisitRegisterFrontendMetricsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RegisterFrontendMetrics400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RegisterFrontendMetrics400JSONResponse) VisitRegisterFrontendMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RegisterFrontendMetrics401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RegisterFrontendMetrics401JSONResponse) VisitRegisterFrontendMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RegisterFrontendMetrics404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RegisterFrontendMetrics404JSONResponse) VisitRegisterFrontendMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RegisterFrontendClientRequestObject struct {
	Body *RegisterFrontendClientJSONRequestBody
}

type RegisterFrontendClientResponseObject interface {
	VisitRegisterFrontendClientResponse(w http.ResponseWriter) error
}

type RegisterFrontendClient200Response struct {
}

func (response RegisterFrontendClient200Response) VisitRegisterFrontendClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RegisterFrontendClient400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RegisterFrontendClient400JSONResponse) VisitRegisterFrontendClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RegisterFrontendClient401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RegisterFrontendClient401JSONResponse) VisitRegisterFrontendClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RegisterFrontendClient404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response RegisterFrontendClient404JSONResponse) VisitRegisterFrontendClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ChangePasswordRequestObject struct {
	Body *ChangePasswordJSONRequestBody
}

type ChangePasswordResponseObject interface {
	VisitChangePasswordResponse(w http.ResponseWriter) error
}

type ChangePassword200Response struct {
}

func (response ChangePassword200Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ChangePassword401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ChangePassword401JSONResponse) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ChangePassword403JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ChangePassword403JSONResponse) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ChangePassword415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ChangePassword415JSONResponse) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type SendResetPasswordEmailRequestObject struct {
	Body *SendResetPasswordEmailJSONRequestBody
}

type SendResetPasswordEmailResponseObject interface {
	VisitSendResetPasswordEmailResponse(w http.ResponseWriter) error
}

type SendResetPasswordEmail200Response struct {
}

func (response SendResetPasswordEmail200Response) VisitSendResetPasswordEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SendResetPasswordEmail401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SendResetPasswordEmail401JSONResponse) VisitSendResetPasswordEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SendResetPasswordEmail404JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SendResetPasswordEmail404JSONResponse) VisitSendResetPasswordEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type SendResetPasswordEmail415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response SendResetPasswordEmail415JSONResponse) VisitSendResetPasswordEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ValidateTokenRequestObject struct {
}

type ValidateTokenResponseObject interface {
	VisitValidateTokenResponse(w http.ResponseWriter) error
}

type ValidateToken200JSONResponse TokenUserSchema

func (response ValidateToken200JSONResponse) VisitValidateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidateToken401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateToken401JSONResponse) VisitValidateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ValidateToken415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidateToken415JSONResponse) VisitValidateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePasswordRequestObject struct {
	Body *ValidatePasswordJSONRequestBody
}

type ValidatePasswordResponseObject interface {
	VisitValidatePasswordResponse(w http.ResponseWriter) error
}

type ValidatePassword200Response struct {
}

func (response ValidatePassword200Response) VisitValidatePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidatePassword400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidatePassword400JSONResponse) VisitValidatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePassword415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidatePassword415JSONResponse) VisitValidatePasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse UserSchema

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login401JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response Login401JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type BulkMetricsRequestObject struct {
	Body *BulkMetricsJSONRequestBody
}

type BulkMetricsResponseObject interface {
	VisitBulkMetricsResponse(w http.ResponseWriter) error
}

type BulkMetrics202Response struct {
}

func (response BulkMetrics202Response) VisitBulkMetricsResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type BulkMetrics400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkMetrics400JSONResponse) VisitBulkMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BulkMetrics413JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkMetrics413JSONResponse) VisitBulkMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type BulkMetrics415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response BulkMetrics415JSONResponse) VisitBulkMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetValidTokensRequestObject struct {
	Body *GetValidTokensJSONRequestBody
}

type GetValidTokensResponseObject interface {
	VisitGetValidTokensResponse(w http.ResponseWriter) error
}

type GetValidTokens200JSONResponse ValidatedEdgeTokensSchema

func (response GetValidTokens200JSONResponse) VisitGetValidTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetValidTokens400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetValidTokens400JSONResponse) VisitGetValidTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetValidTokens413JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetValidTokens413JSONResponse) VisitGetValidTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(413)

	return json.NewEncoder(w).Encode(response)
}

type GetValidTokens415JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response GetValidTokens415JSONResponse) VisitGetValidTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(415)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthCheckSchema

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth500JSONResponse HealthCheckSchema

func (response GetHealth500JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddPublicSignupTokenUserRequestObject struct {
	Token string `json:"token"`
	Body  *AddPublicSignupTokenUserJSONRequestBody
}

type AddPublicSignupTokenUserResponseObject interface {
	VisitAddPublicSignupTokenUserResponse(w http.ResponseWriter) error
}

type AddPublicSignupTokenUser200JSONResponse UserSchema

func (response AddPublicSignupTokenUser200JSONResponse) VisitAddPublicSignupTokenUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddPublicSignupTokenUser400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddPublicSignupTokenUser400JSONResponse) VisitAddPublicSignupTokenUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddPublicSignupTokenUser409JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response AddPublicSignupTokenUser409JSONResponse) VisitAddPublicSignupTokenUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePublicSignupTokenRequestObject struct {
	Token string `json:"token"`
}

type ValidatePublicSignupTokenResponseObject interface {
	VisitValidatePublicSignupTokenResponse(w http.ResponseWriter) error
}

type ValidatePublicSignupToken200Response struct {
}

func (response ValidatePublicSignupToken200Response) VisitValidatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidatePublicSignupToken400JSONResponse struct {
	// Id The ID of the error instance
	Id *string `json:"id,omitempty"`

	// Message A description of what went wrong.
	Message *string `json:"message,omitempty"`

	// Name The name of the error kind
	Name *string `json:"name,omitempty"`
}

func (response ValidatePublicSignupToken400JSONResponse) VisitValidatePublicSignupTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all addons and providers
	// (GET /api/admin/addons)
	GetAddons(ctx context.Context, request GetAddonsRequestObject) (GetAddonsResponseObject, error)
	// Create a new addon
	// (POST /api/admin/addons)
	CreateAddon(ctx context.Context, request CreateAddonRequestObject) (CreateAddonResponseObject, error)
	// Delete an addon
	// (DELETE /api/admin/addons/{id})
	DeleteAddon(ctx context.Context, request DeleteAddonRequestObject) (DeleteAddonResponseObject, error)
	// Get a specific addon
	// (GET /api/admin/addons/{id})
	GetAddon(ctx context.Context, request GetAddonRequestObject) (GetAddonResponseObject, error)
	// Update an addon
	// (PUT /api/admin/addons/{id})
	UpdateAddon(ctx context.Context, request UpdateAddonRequestObject) (UpdateAddonResponseObject, error)
	// Get API tokens
	// (GET /api/admin/api-tokens)
	GetAllApiTokens(ctx context.Context, request GetAllApiTokensRequestObject) (GetAllApiTokensResponseObject, error)
	// Create API token
	// (POST /api/admin/api-tokens)
	CreateApiToken(ctx context.Context, request CreateApiTokenRequestObject) (CreateApiTokenResponseObject, error)
	// Get API tokens by name
	// (GET /api/admin/api-tokens/{name})
	GetApiTokensByName(ctx context.Context, request GetApiTokensByNameRequestObject) (GetApiTokensByNameResponseObject, error)
	// Delete API token
	// (DELETE /api/admin/api-tokens/{token})
	DeleteApiToken(ctx context.Context, request DeleteApiTokenRequestObject) (DeleteApiTokenResponseObject, error)
	// Update API token
	// (PUT /api/admin/api-tokens/{token})
	UpdateApiToken(ctx context.Context, request UpdateApiTokenRequestObject) (UpdateApiTokenResponseObject, error)
	// Get archived features
	// (GET /api/admin/archive/features)
	GetArchivedFeatures(ctx context.Context, request GetArchivedFeaturesRequestObject) (GetArchivedFeaturesResponseObject, error)
	// Get archived features in project
	// (GET /api/admin/archive/features/{projectId})
	GetArchivedFeaturesByProjectId(ctx context.Context, request GetArchivedFeaturesByProjectIdRequestObject) (GetArchivedFeaturesByProjectIdResponseObject, error)
	// Revives a feature
	// (POST /api/admin/archive/revive/{featureName})
	ReviveFeature(ctx context.Context, request ReviveFeatureRequestObject) (ReviveFeatureResponseObject, error)
	// Archives a feature
	// (DELETE /api/admin/archive/{featureName})
	DeleteFeature(ctx context.Context, request DeleteFeatureRequestObject) (DeleteFeatureResponseObject, error)
	// Last hour of usage and a list of applications that have reported seeing this feature toggle
	// (GET /api/admin/client-metrics/features/{name})
	GetFeatureUsageSummary(ctx context.Context, request GetFeatureUsageSummaryRequestObject) (GetFeatureUsageSummaryResponseObject, error)
	// Get feature metrics
	// (GET /api/admin/client-metrics/features/{name}/raw)
	GetRawFeatureMetrics(ctx context.Context, request GetRawFeatureMetricsRequestObject) (GetRawFeatureMetricsResponseObject, error)
	// Validate constraint
	// (POST /api/admin/constraints/validate)
	ValidateConstraint(ctx context.Context, request ValidateConstraintRequestObject) (ValidateConstraintResponseObject, error)
	// Gets configured context fields
	// (GET /api/admin/context)
	GetContextFields(ctx context.Context, request GetContextFieldsRequestObject) (GetContextFieldsResponseObject, error)
	// Create a context field
	// (POST /api/admin/context)
	CreateContextField(ctx context.Context, request CreateContextFieldRequestObject) (CreateContextFieldResponseObject, error)
	// Validate a context field
	// (POST /api/admin/context/validate)
	Validate(ctx context.Context, request ValidateRequestObject) (ValidateResponseObject, error)
	// Delete an existing context field
	// (DELETE /api/admin/context/{contextField})
	DeleteContextField(ctx context.Context, request DeleteContextFieldRequestObject) (DeleteContextFieldResponseObject, error)
	// Gets context field
	// (GET /api/admin/context/{contextField})
	GetContextField(ctx context.Context, request GetContextFieldRequestObject) (GetContextFieldResponseObject, error)
	// Update an existing context field
	// (PUT /api/admin/context/{contextField})
	UpdateContextField(ctx context.Context, request UpdateContextFieldRequestObject) (UpdateContextFieldResponseObject, error)
	// Get strategies that use a context field
	// (GET /api/admin/context/{contextField}/strategies)
	GetStrategiesByContextField(ctx context.Context, request GetStrategiesByContextFieldRequestObject) (GetStrategiesByContextFieldResponseObject, error)
	// Get all environments
	// (GET /api/admin/environments)
	GetAllEnvironments(ctx context.Context, request GetAllEnvironmentsRequestObject) (GetAllEnvironmentsResponseObject, error)
	// Get the environments available to a project
	// (GET /api/admin/environments/project/{projectId})
	GetProjectEnvironments(ctx context.Context, request GetProjectEnvironmentsRequestObject) (GetProjectEnvironmentsResponseObject, error)
	// Update environment sort orders
	// (PUT /api/admin/environments/sort-order)
	UpdateSortOrder(ctx context.Context, request UpdateSortOrderRequestObject) (UpdateSortOrderResponseObject, error)
	// Get the environment with `name`
	// (GET /api/admin/environments/{name})
	GetEnvironment(ctx context.Context, request GetEnvironmentRequestObject) (GetEnvironmentResponseObject, error)
	// Toggle the environment with `name` off
	// (POST /api/admin/environments/{name}/off)
	ToggleEnvironmentOff(ctx context.Context, request ToggleEnvironmentOffRequestObject) (ToggleEnvironmentOffResponseObject, error)
	// Toggle the environment with `name` on
	// (POST /api/admin/environments/{name}/on)
	ToggleEnvironmentOn(ctx context.Context, request ToggleEnvironmentOnRequestObject) (ToggleEnvironmentOnResponseObject, error)
	// Get the most recent events from the Unleash instance or all events related to a project.
	// (GET /api/admin/events)
	GetEvents(ctx context.Context, request GetEventsRequestObject) (GetEventsResponseObject, error)
	// Search for events
	// (POST /api/admin/events/search)
	SearchEvents(ctx context.Context, request SearchEventsRequestObject) (SearchEventsResponseObject, error)
	// Get all events related to a specific feature toggle.
	// (GET /api/admin/events/{featureName})
	GetEventsForToggle(ctx context.Context, request GetEventsForToggleRequestObject) (GetEventsForToggleResponseObject, error)
	// Get all feature types
	// (GET /api/admin/feature-types)
	GetAllFeatureTypes(ctx context.Context, request GetAllFeatureTypesRequestObject) (GetAllFeatureTypesResponseObject, error)
	// Update feature type lifetime
	// (PUT /api/admin/feature-types/{id}/lifetime)
	UpdateFeatureTypeLifetime(ctx context.Context, request UpdateFeatureTypeLifetimeRequestObject) (UpdateFeatureTypeLifetimeResponseObject, error)
	// Get all feature toggles (deprecated)
	// (GET /api/admin/features)
	GetAllToggles(ctx context.Context, request GetAllTogglesRequestObject) (GetAllTogglesResponseObject, error)
	// Export feature toggles from an environment
	// (POST /api/admin/features-batch/export)
	ExportFeatures(ctx context.Context, request ExportFeaturesRequestObject) (ExportFeaturesResponseObject, error)
	// Import feature toggles
	// (POST /api/admin/features-batch/import)
	ImportToggles(ctx context.Context, request ImportTogglesRequestObject) (ImportTogglesResponseObject, error)
	// Validate feature import data
	// (POST /api/admin/features-batch/validate)
	ValidateImport(ctx context.Context, request ValidateImportRequestObject) (ValidateImportResponseObject, error)
	// Validate a feature toggle name.
	// (POST /api/admin/features/validate)
	ValidateFeature(ctx context.Context, request ValidateFeatureRequestObject) (ValidateFeatureResponseObject, error)
	// Get all tags for a feature.
	// (GET /api/admin/features/{featureName}/tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
	// Adds a tag to a feature.
	// (POST /api/admin/features/{featureName}/tags)
	AddTag(ctx context.Context, request AddTagRequestObject) (AddTagResponseObject, error)
	// Updates multiple tags for a feature.
	// (PUT /api/admin/features/{featureName}/tags)
	UpdateTags(ctx context.Context, request UpdateTagsRequestObject) (UpdateTagsResponseObject, error)
	// Removes a tag from a feature.
	// (DELETE /api/admin/features/{featureName}/tags/{type}/{value})
	RemoveTag(ctx context.Context, request RemoveTagRequestObject) (RemoveTagResponseObject, error)
	// Send Unleash feedback
	// (POST /api/admin/feedback)
	CreateFeedback(ctx context.Context, request CreateFeedbackRequestObject) (CreateFeedbackResponseObject, error)
	// Update Unleash feedback
	// (PUT /api/admin/feedback/{id})
	UpdateFeedback(ctx context.Context, request UpdateFeedbackRequestObject) (UpdateFeedbackResponseObject, error)
	// Instance usage statistics
	// (GET /api/admin/instance-admin/statistics)
	GetInstanceAdminStats(ctx context.Context, request GetInstanceAdminStatsRequestObject) (GetInstanceAdminStatsResponseObject, error)
	// Instance usage statistics
	// (GET /api/admin/instance-admin/statistics/csv)
	GetInstanceAdminStatsCsv(ctx context.Context, request GetInstanceAdminStatsCsvRequestObject) (GetInstanceAdminStatsCsvResponseObject, error)
	// Get public signup tokens
	// (GET /api/admin/invite-link/tokens)
	GetAllPublicSignupTokens(ctx context.Context, request GetAllPublicSignupTokensRequestObject) (GetAllPublicSignupTokensResponseObject, error)
	// Create a public signup token
	// (POST /api/admin/invite-link/tokens)
	CreatePublicSignupToken(ctx context.Context, request CreatePublicSignupTokenRequestObject) (CreatePublicSignupTokenResponseObject, error)
	// Retrieve a token
	// (GET /api/admin/invite-link/tokens/{token})
	GetPublicSignupToken(ctx context.Context, request GetPublicSignupTokenRequestObject) (GetPublicSignupTokenResponseObject, error)
	// Update a public signup token
	// (PUT /api/admin/invite-link/tokens/{token})
	UpdatePublicSignupToken(ctx context.Context, request UpdatePublicSignupTokenRequestObject) (UpdatePublicSignupTokenResponseObject, error)
	// Get maintenance mode status
	// (GET /api/admin/maintenance)
	GetMaintenance(ctx context.Context, request GetMaintenanceRequestObject) (GetMaintenanceResponseObject, error)
	// Enabled/disabled maintenance mode
	// (POST /api/admin/maintenance)
	ToggleMaintenance(ctx context.Context, request ToggleMaintenanceRequestObject) (ToggleMaintenanceResponseObject, error)
	// Get all applications
	// (GET /api/admin/metrics/applications)
	GetApplications(ctx context.Context, request GetApplicationsRequestObject) (GetApplicationsResponseObject, error)
	// Delete an application
	// (DELETE /api/admin/metrics/applications/{appName})
	DeleteApplication(ctx context.Context, request DeleteApplicationRequestObject) (DeleteApplicationResponseObject, error)
	// Get application data
	// (GET /api/admin/metrics/applications/{appName})
	GetApplication(ctx context.Context, request GetApplicationRequestObject) (GetApplicationResponseObject, error)
	// Create an application to connect reported metrics
	// (POST /api/admin/metrics/applications/{appName})
	CreateApplication(ctx context.Context, request CreateApplicationRequestObject) (CreateApplicationResponseObject, error)
	// Evaluate an Unleash context against a set of environments and projects.
	// (POST /api/admin/playground)
	GetPlayground(ctx context.Context, request GetPlaygroundRequestObject) (GetPlaygroundResponseObject, error)
	// Batch evaluate an Unleash context against a set of environments and projects.
	// (POST /api/admin/playground/advanced)
	GetAdvancedPlayground(ctx context.Context, request GetAdvancedPlaygroundRequestObject) (GetAdvancedPlaygroundResponseObject, error)
	// Get a list of all projects.
	// (GET /api/admin/projects)
	GetProjects(ctx context.Context, request GetProjectsRequestObject) (GetProjectsResponseObject, error)
	// Get an overview of a project. (deprecated)
	// (GET /api/admin/projects/{projectId})
	GetDeprecatedProjectOverview(ctx context.Context, request GetDeprecatedProjectOverviewRequestObject) (GetDeprecatedProjectOverviewResponseObject, error)
	// Get api tokens for project.
	// (GET /api/admin/projects/{projectId}/api-tokens)
	GetProjectApiTokens(ctx context.Context, request GetProjectApiTokensRequestObject) (GetProjectApiTokensResponseObject, error)
	// Create a project API token.
	// (POST /api/admin/projects/{projectId}/api-tokens)
	CreateProjectApiToken(ctx context.Context, request CreateProjectApiTokenRequestObject) (CreateProjectApiTokenResponseObject, error)
	// Delete a project API token.
	// (DELETE /api/admin/projects/{projectId}/api-tokens/{token})
	DeleteProjectApiToken(ctx context.Context, request DeleteProjectApiTokenRequestObject) (DeleteProjectApiTokenResponseObject, error)
	// Archives a list of features
	// (POST /api/admin/projects/{projectId}/archive)
	ArchiveFeatures(ctx context.Context, request ArchiveFeaturesRequestObject) (ArchiveFeaturesResponseObject, error)
	// Validates archive features
	// (POST /api/admin/projects/{projectId}/archive/validate)
	ValidateArchiveFeatures(ctx context.Context, request ValidateArchiveFeaturesRequestObject) (ValidateArchiveFeaturesResponseObject, error)
	// Bulk disable a list of features
	// (POST /api/admin/projects/{projectId}/bulk_features/environments/{environment}/off)
	BulkToggleFeaturesEnvironmentOff(ctx context.Context, request BulkToggleFeaturesEnvironmentOffRequestObject) (BulkToggleFeaturesEnvironmentOffResponseObject, error)
	// Bulk enable a list of features
	// (POST /api/admin/projects/{projectId}/bulk_features/environments/{environment}/on)
	BulkToggleFeaturesEnvironmentOn(ctx context.Context, request BulkToggleFeaturesEnvironmentOnRequestObject) (BulkToggleFeaturesEnvironmentOnResponseObject, error)
	// Deletes a list of features
	// (POST /api/admin/projects/{projectId}/delete)
	DeleteFeatures(ctx context.Context, request DeleteFeaturesRequestObject) (DeleteFeaturesResponseObject, error)
	// Check dependencies exist.
	// (GET /api/admin/projects/{projectId}/dependencies)
	CheckDependenciesExist(ctx context.Context, request CheckDependenciesExistRequestObject) (CheckDependenciesExistResponseObject, error)
	// Get an overview project dora metrics.
	// (GET /api/admin/projects/{projectId}/dora)
	GetProjectDora(ctx context.Context, request GetProjectDoraRequestObject) (GetProjectDoraResponseObject, error)
	// Add an environment to a project.
	// (POST /api/admin/projects/{projectId}/environments)
	AddEnvironmentToProject(ctx context.Context, request AddEnvironmentToProjectRequestObject) (AddEnvironmentToProjectResponseObject, error)
	// Remove an environment from a project.
	// (DELETE /api/admin/projects/{projectId}/environments/{environment})
	RemoveEnvironmentFromProject(ctx context.Context, request RemoveEnvironmentFromProjectRequestObject) (RemoveEnvironmentFromProjectResponseObject, error)
	// Set environment-default strategy
	// (POST /api/admin/projects/{projectId}/environments/{environment}/default-strategy)
	AddDefaultStrategyToProjectEnvironment(ctx context.Context, request AddDefaultStrategyToProjectEnvironmentRequestObject) (AddDefaultStrategyToProjectEnvironmentResponseObject, error)
	// Remove project from favorites
	// (DELETE /api/admin/projects/{projectId}/favorites)
	RemoveFavoriteProject(ctx context.Context, request RemoveFavoriteProjectRequestObject) (RemoveFavoriteProjectResponseObject, error)
	// Add project to favorites
	// (POST /api/admin/projects/{projectId}/favorites)
	AddFavoriteProject(ctx context.Context, request AddFavoriteProjectRequestObject) (AddFavoriteProjectResponseObject, error)
	// Get all features in a project
	// (GET /api/admin/projects/{projectId}/features)
	GetFeatures(ctx context.Context, request GetFeaturesRequestObject) (GetFeaturesResponseObject, error)
	// Add a new feature toggle
	// (POST /api/admin/projects/{projectId}/features)
	CreateFeature(ctx context.Context, request CreateFeatureRequestObject) (CreateFeatureResponseObject, error)
	// Archive a feature toggle
	// (DELETE /api/admin/projects/{projectId}/features/{featureName})
	ArchiveFeature(ctx context.Context, request ArchiveFeatureRequestObject) (ArchiveFeatureResponseObject, error)
	// Get a feature
	// (GET /api/admin/projects/{projectId}/features/{featureName})
	GetFeature(ctx context.Context, request GetFeatureRequestObject) (GetFeatureResponseObject, error)
	// Modify a feature toggle
	// (PATCH /api/admin/projects/{projectId}/features/{featureName})
	PatchFeature(ctx context.Context, request PatchFeatureRequestObject) (PatchFeatureResponseObject, error)
	// Update a feature toggle
	// (PUT /api/admin/projects/{projectId}/features/{featureName})
	UpdateFeature(ctx context.Context, request UpdateFeatureRequestObject) (UpdateFeatureResponseObject, error)
	// Clone a feature toggle
	// (POST /api/admin/projects/{projectId}/features/{featureName}/clone)
	CloneFeature(ctx context.Context, request CloneFeatureRequestObject) (CloneFeatureResponseObject, error)
	// Deletes feature dependencies.
	// (DELETE /api/admin/projects/{projectId}/features/{featureName}/dependencies)
	DeleteFeatureDependencies(ctx context.Context, request DeleteFeatureDependenciesRequestObject) (DeleteFeatureDependenciesResponseObject, error)
	// Add a feature dependency.
	// (POST /api/admin/projects/{projectId}/features/{featureName}/dependencies)
	AddFeatureDependency(ctx context.Context, request AddFeatureDependencyRequestObject) (AddFeatureDependencyResponseObject, error)
	// Deletes a feature dependency.
	// (DELETE /api/admin/projects/{projectId}/features/{featureName}/dependencies/{parent})
	DeleteFeatureDependency(ctx context.Context, request DeleteFeatureDependencyRequestObject) (DeleteFeatureDependencyResponseObject, error)
	// Get a feature environment
	// (GET /api/admin/projects/{projectId}/features/{featureName}/environments/{environment})
	GetFeatureEnvironment(ctx context.Context, request GetFeatureEnvironmentRequestObject) (GetFeatureEnvironmentResponseObject, error)
	// Disable a feature toggle
	// (POST /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/off)
	ToggleFeatureEnvironmentOff(ctx context.Context, request ToggleFeatureEnvironmentOffRequestObject) (ToggleFeatureEnvironmentOffResponseObject, error)
	// Enable a feature toggle
	// (POST /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/on)
	ToggleFeatureEnvironmentOn(ctx context.Context, request ToggleFeatureEnvironmentOnRequestObject) (ToggleFeatureEnvironmentOnResponseObject, error)
	// Get feature toggle strategies
	// (GET /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies)
	GetFeatureStrategies(ctx context.Context, request GetFeatureStrategiesRequestObject) (GetFeatureStrategiesResponseObject, error)
	// Add a strategy to a feature toggle
	// (POST /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies)
	AddFeatureStrategy(ctx context.Context, request AddFeatureStrategyRequestObject) (AddFeatureStrategyResponseObject, error)
	// Set strategy sort order
	// (POST /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/set-sort-order)
	SetStrategySortOrder(ctx context.Context, request SetStrategySortOrderRequestObject) (SetStrategySortOrderResponseObject, error)
	// Delete a strategy from a feature toggle
	// (DELETE /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId})
	DeleteFeatureStrategy(ctx context.Context, request DeleteFeatureStrategyRequestObject) (DeleteFeatureStrategyResponseObject, error)
	// Get a strategy configuration
	// (GET /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId})
	GetFeatureStrategy(ctx context.Context, request GetFeatureStrategyRequestObject) (GetFeatureStrategyResponseObject, error)
	// Change specific properties of a strategy
	// (PATCH /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId})
	PatchFeatureStrategy(ctx context.Context, request PatchFeatureStrategyRequestObject) (PatchFeatureStrategyResponseObject, error)
	// Update a strategy
	// (PUT /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId})
	UpdateFeatureStrategy(ctx context.Context, request UpdateFeatureStrategyRequestObject) (UpdateFeatureStrategyResponseObject, error)
	// Get variants for a feature in an environment
	// (GET /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants)
	GetEnvironmentFeatureVariants(ctx context.Context, request GetEnvironmentFeatureVariantsRequestObject) (GetEnvironmentFeatureVariantsResponseObject, error)
	// Patch a feature's variants in an environment
	// (PATCH /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants)
	PatchEnvironmentsFeatureVariants(ctx context.Context, request PatchEnvironmentsFeatureVariantsRequestObject) (PatchEnvironmentsFeatureVariantsResponseObject, error)
	// Create (overwrite) variants for a feature in an environment
	// (PUT /api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants)
	OverwriteEnvironmentFeatureVariants(ctx context.Context, request OverwriteEnvironmentFeatureVariantsRequestObject) (OverwriteEnvironmentFeatureVariantsResponseObject, error)
	// Remove feature from favorites
	// (DELETE /api/admin/projects/{projectId}/features/{featureName}/favorites)
	RemoveFavoriteFeature(ctx context.Context, request RemoveFavoriteFeatureRequestObject) (RemoveFavoriteFeatureResponseObject, error)
	// Add feature to favorites
	// (POST /api/admin/projects/{projectId}/features/{featureName}/favorites)
	AddFavoriteFeature(ctx context.Context, request AddFavoriteFeatureRequestObject) (AddFavoriteFeatureResponseObject, error)
	// List parent options.
	// (GET /api/admin/projects/{projectId}/features/{featureName}/parents)
	ListParentOptions(ctx context.Context, request ListParentOptionsRequestObject) (ListParentOptionsResponseObject, error)
	// Retrieve variants for a feature (deprecated)
	// (GET /api/admin/projects/{projectId}/features/{featureName}/variants)
	GetFeatureVariants(ctx context.Context, request GetFeatureVariantsRequestObject) (GetFeatureVariantsResponseObject, error)
	// Apply a patch to a feature's variants (in all environments).
	// (PATCH /api/admin/projects/{projectId}/features/{featureName}/variants)
	PatchFeatureVariants(ctx context.Context, request PatchFeatureVariantsRequestObject) (PatchFeatureVariantsResponseObject, error)
	// Create (overwrite) variants for a feature toggle in all environments
	// (PUT /api/admin/projects/{projectId}/features/{featureName}/variants)
	OverwriteFeatureVariants(ctx context.Context, request OverwriteFeatureVariantsRequestObject) (OverwriteFeatureVariantsResponseObject, error)
	// Create (overwrite) variants for a feature toggle in multiple environments
	// (PUT /api/admin/projects/{projectId}/features/{featureName}/variants-batch)
	OverwriteFeatureVariantsOnEnvironments(ctx context.Context, request OverwriteFeatureVariantsOnEnvironmentsRequestObject) (OverwriteFeatureVariantsOnEnvironmentsResponseObject, error)
	// Get a health report for a project.
	// (GET /api/admin/projects/{projectId}/health-report)
	GetProjectHealthReport(ctx context.Context, request GetProjectHealthReportRequestObject) (GetProjectHealthReportResponseObject, error)
	// Get an overview of a project.
	// (GET /api/admin/projects/{projectId}/overview)
	GetProjectOverview(ctx context.Context, request GetProjectOverviewRequestObject) (GetProjectOverviewResponseObject, error)
	// Revives a list of features
	// (POST /api/admin/projects/{projectId}/revive)
	ReviveFeatures(ctx context.Context, request ReviveFeaturesRequestObject) (ReviveFeaturesResponseObject, error)
	// Mark features as stale / not stale
	// (POST /api/admin/projects/{projectId}/stale)
	StaleFeatures(ctx context.Context, request StaleFeaturesRequestObject) (StaleFeaturesResponseObject, error)
	// Adds a tag to the specified features
	// (PUT /api/admin/projects/{projectId}/tags)
	AddTagToFeatures(ctx context.Context, request AddTagToFeaturesRequestObject) (AddTagToFeaturesResponseObject, error)
	// Search and filter features
	// (GET /api/admin/search/features)
	SearchFeatures(ctx context.Context, request SearchFeaturesRequestObject) (SearchFeaturesResponseObject, error)
	// Get all segments
	// (GET /api/admin/segments)
	GetSegments(ctx context.Context, request GetSegmentsRequestObject) (GetSegmentsResponseObject, error)
	// Create a new segment
	// (POST /api/admin/segments)
	CreateSegment(ctx context.Context, request CreateSegmentRequestObject) (CreateSegmentResponseObject, error)
	// Update strategy segments
	// (POST /api/admin/segments/strategies)
	UpdateFeatureStrategySegments(ctx context.Context, request UpdateFeatureStrategySegmentsRequestObject) (UpdateFeatureStrategySegmentsResponseObject, error)
	// Get strategy segments
	// (GET /api/admin/segments/strategies/{strategyId})
	GetSegmentsByStrategyId(ctx context.Context, request GetSegmentsByStrategyIdRequestObject) (GetSegmentsByStrategyIdResponseObject, error)
	// Validates if a segment name exists
	// (POST /api/admin/segments/validate)
	ValidateSegment(ctx context.Context, request ValidateSegmentRequestObject) (ValidateSegmentResponseObject, error)
	// Deletes a segment by id
	// (DELETE /api/admin/segments/{id})
	RemoveSegment(ctx context.Context, request RemoveSegmentRequestObject) (RemoveSegmentResponseObject, error)
	// Get a segment
	// (GET /api/admin/segments/{id})
	GetSegment(ctx context.Context, request GetSegmentRequestObject) (GetSegmentResponseObject, error)
	// Update segment by id
	// (PUT /api/admin/segments/{id})
	UpdateSegment(ctx context.Context, request UpdateSegmentRequestObject) (UpdateSegmentResponseObject, error)
	// Get strategies that reference segment
	// (GET /api/admin/segments/{id}/strategies)
	GetStrategiesBySegmentId(ctx context.Context, request GetStrategiesBySegmentIdRequestObject) (GetStrategiesBySegmentIdResponseObject, error)
	// Update splash settings
	// (POST /api/admin/splash/{id})
	UpdateSplashSettings(ctx context.Context, request UpdateSplashSettingsRequestObject) (UpdateSplashSettingsResponseObject, error)
	// Export state (deprecated)
	// (GET /api/admin/state/export)
	Export(ctx context.Context, request ExportRequestObject) (ExportResponseObject, error)
	// Import state (deprecated)
	// (POST /api/admin/state/import)
	Import(ctx context.Context, request ImportRequestObject) (ImportResponseObject, error)
	// Get all strategies
	// (GET /api/admin/strategies)
	GetAllStrategies(ctx context.Context, request GetAllStrategiesRequestObject) (GetAllStrategiesResponseObject, error)
	// Create a strategy
	// (POST /api/admin/strategies)
	CreateStrategy(ctx context.Context, request CreateStrategyRequestObject) (CreateStrategyResponseObject, error)
	// Delete a strategy
	// (DELETE /api/admin/strategies/{name})
	RemoveStrategy(ctx context.Context, request RemoveStrategyRequestObject) (RemoveStrategyResponseObject, error)
	// Get a strategy definition
	// (GET /api/admin/strategies/{name})
	GetStrategy(ctx context.Context, request GetStrategyRequestObject) (GetStrategyResponseObject, error)
	// Update a strategy type
	// (PUT /api/admin/strategies/{name})
	UpdateStrategy(ctx context.Context, request UpdateStrategyRequestObject) (UpdateStrategyResponseObject, error)
	// Deprecate a strategy
	// (POST /api/admin/strategies/{strategyName}/deprecate)
	DeprecateStrategy(ctx context.Context, request DeprecateStrategyRequestObject) (DeprecateStrategyResponseObject, error)
	// Reactivate a strategy
	// (POST /api/admin/strategies/{strategyName}/reactivate)
	ReactivateStrategy(ctx context.Context, request ReactivateStrategyRequestObject) (ReactivateStrategyResponseObject, error)
	// Get all tag types
	// (GET /api/admin/tag-types)
	GetTagTypes(ctx context.Context, request GetTagTypesRequestObject) (GetTagTypesResponseObject, error)
	// Create a tag type
	// (POST /api/admin/tag-types)
	CreateTagType(ctx context.Context, request CreateTagTypeRequestObject) (CreateTagTypeResponseObject, error)
	// Validate a tag type
	// (POST /api/admin/tag-types/validate)
	ValidateTagType(ctx context.Context, request ValidateTagTypeRequestObject) (ValidateTagTypeResponseObject, error)
	// Delete a tag type
	// (DELETE /api/admin/tag-types/{name})
	DeleteTagType(ctx context.Context, request DeleteTagTypeRequestObject) (DeleteTagTypeResponseObject, error)
	// Get a tag type
	// (GET /api/admin/tag-types/{name})
	GetTagType(ctx context.Context, request GetTagTypeRequestObject) (GetTagTypeResponseObject, error)
	// Update a tag type
	// (PUT /api/admin/tag-types/{name})
	UpdateTagType(ctx context.Context, request UpdateTagTypeRequestObject) (UpdateTagTypeResponseObject, error)
	// List all tags.
	// (GET /api/admin/tags)
	GetTags(ctx context.Context, request GetTagsRequestObject) (GetTagsResponseObject, error)
	// Create a new tag.
	// (POST /api/admin/tags)
	CreateTag(ctx context.Context, request CreateTagRequestObject) (CreateTagResponseObject, error)
	// List all tags of a given type.
	// (GET /api/admin/tags/{type})
	GetTagsByType(ctx context.Context, request GetTagsByTypeRequestObject) (GetTagsByTypeResponseObject, error)
	// Delete a tag.
	// (DELETE /api/admin/tags/{type}/{value})
	DeleteTag(ctx context.Context, request DeleteTagRequestObject) (DeleteTagResponseObject, error)
	// Get a tag by type and value.
	// (GET /api/admin/tags/{type}/{value})
	GetTag(ctx context.Context, request GetTagRequestObject) (GetTagResponseObject, error)
	// Get telemetry settings
	// (GET /api/admin/telemetry/settings)
	GetTelemetrySettings(ctx context.Context, request GetTelemetrySettingsRequestObject) (GetTelemetrySettingsResponseObject, error)
	// Get UI configuration
	// (GET /api/admin/ui-config)
	GetUiConfig(ctx context.Context, request GetUiConfigRequestObject) (GetUiConfigResponseObject, error)
	// Set UI configuration
	// (POST /api/admin/ui-config)
	SetUiConfig(ctx context.Context, request SetUiConfigRequestObject) (SetUiConfigResponseObject, error)
	// Get your own user details
	// (GET /api/admin/user)
	GetMe(ctx context.Context, request GetMeRequestObject) (GetMeResponseObject, error)
	// Get all users and [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles)
	// (GET /api/admin/user-admin)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Create a new user
	// (POST /api/admin/user-admin)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Get basic user and group information
	// (GET /api/admin/user-admin/access)
	GetBaseUsersAndGroups(ctx context.Context, request GetBaseUsersAndGroupsRequestObject) (GetBaseUsersAndGroupsResponseObject, error)
	// Get total count of admin accounts
	// (GET /api/admin/user-admin/admin-count)
	GetAdminCount(ctx context.Context, request GetAdminCountRequestObject) (GetAdminCountResponseObject, error)
	// Reset user password
	// (POST /api/admin/user-admin/reset-password)
	ResetUserPassword(ctx context.Context, request ResetUserPasswordRequestObject) (ResetUserPasswordResponseObject, error)
	// Search users
	// (GET /api/admin/user-admin/search)
	SearchUsers(ctx context.Context, request SearchUsersRequestObject) (SearchUsersResponseObject, error)
	// Validate password for a user
	// (POST /api/admin/user-admin/validate-password)
	ValidateUserPassword(ctx context.Context, request ValidateUserPasswordRequestObject) (ValidateUserPasswordResponseObject, error)
	// Delete a user
	// (DELETE /api/admin/user-admin/{id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get user
	// (GET /api/admin/user-admin/{id})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Update a user
	// (PUT /api/admin/user-admin/{id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Change password for a user
	// (POST /api/admin/user-admin/{id}/change-password)
	ChangeUserPassword(ctx context.Context, request ChangeUserPasswordRequestObject) (ChangeUserPasswordResponseObject, error)
	// Change your own password
	// (POST /api/admin/user/change-password)
	ChangeMyPassword(ctx context.Context, request ChangeMyPasswordRequestObject) (ChangeMyPasswordResponseObject, error)
	// Get your own user profile
	// (GET /api/admin/user/profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Get all Personal Access Tokens for the current user.
	// (GET /api/admin/user/tokens)
	GetPats(ctx context.Context, request GetPatsRequestObject) (GetPatsResponseObject, error)
	// Create a new Personal Access Token.
	// (POST /api/admin/user/tokens)
	CreatePat(ctx context.Context, request CreatePatRequestObject) (CreatePatResponseObject, error)
	// Delete a Personal Access Token.
	// (DELETE /api/admin/user/tokens/{id})
	DeletePat(ctx context.Context, request DeletePatRequestObject) (DeletePatResponseObject, error)
	// Get all toggles (SDK)
	// (GET /api/client/features)
	GetAllClientFeatures(ctx context.Context, request GetAllClientFeaturesRequestObject) (GetAllClientFeaturesResponseObject, error)
	// Get a single feature toggle
	// (GET /api/client/features/{featureName})
	GetClientFeature(ctx context.Context, request GetClientFeatureRequestObject) (GetClientFeatureResponseObject, error)
	// Register client usage metrics
	// (POST /api/client/metrics)
	RegisterClientMetrics(ctx context.Context, request RegisterClientMetricsRequestObject) (RegisterClientMetricsResponseObject, error)
	// Register a client SDK
	// (POST /api/client/register)
	RegisterClientApplication(ctx context.Context, request RegisterClientApplicationRequestObject) (RegisterClientApplicationResponseObject, error)
	// Retrieve enabled feature toggles for the provided context.
	// (GET /api/frontend)
	GetFrontendFeatures(ctx context.Context, request GetFrontendFeaturesRequestObject) (GetFrontendFeaturesResponseObject, error)
	// Register client usage metrics
	// (POST /api/frontend/client/metrics)
	RegisterFrontendMetrics(ctx context.Context, request RegisterFrontendMetricsRequestObject) (RegisterFrontendMetricsResponseObject, error)
	// Register a client SDK
	// (POST /api/frontend/client/register)
	RegisterFrontendClient(ctx context.Context, request RegisterFrontendClientRequestObject) (RegisterFrontendClientResponseObject, error)
	// Changes a user password
	// (POST /auth/reset/password)
	ChangePassword(ctx context.Context, request ChangePasswordRequestObject) (ChangePasswordResponseObject, error)
	// Reset password
	// (POST /auth/reset/password-email)
	SendResetPasswordEmail(ctx context.Context, request SendResetPasswordEmailRequestObject) (SendResetPasswordEmailResponseObject, error)
	// Validates a token
	// (GET /auth/reset/validate)
	ValidateToken(ctx context.Context, request ValidateTokenRequestObject) (ValidateTokenResponseObject, error)
	// Validates password
	// (POST /auth/reset/validate-password)
	ValidatePassword(ctx context.Context, request ValidatePasswordRequestObject) (ValidatePasswordResponseObject, error)
	// Log in
	// (POST /auth/simple/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Send metrics from Edge
	// (POST /edge/metrics)
	BulkMetrics(ctx context.Context, request BulkMetricsRequestObject) (BulkMetricsResponseObject, error)
	// Check which tokens are valid
	// (POST /edge/validate)
	GetValidTokens(ctx context.Context, request GetValidTokensRequestObject) (GetValidTokensResponseObject, error)
	// Get instance operational status
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Add a user via a signup token
	// (POST /invite/{token}/signup)
	AddPublicSignupTokenUser(ctx context.Context, request AddPublicSignupTokenUserRequestObject) (AddPublicSignupTokenUserResponseObject, error)
	// Validate signup token
	// (GET /invite/{token}/validate)
	ValidatePublicSignupToken(ctx context.Context, request ValidatePublicSignupTokenRequestObject) (ValidatePublicSignupTokenResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAddons operation middleware
func (sh *strictHandler) GetAddons(ctx *gin.Context) {
	var request GetAddonsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAddons(ctx, request.(GetAddonsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAddons")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAddonsResponseObject); ok {
		if err := validResponse.VisitGetAddonsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAddon operation middleware
func (sh *strictHandler) CreateAddon(ctx *gin.Context) {
	var request CreateAddonRequestObject

	var body CreateAddonJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAddon(ctx, request.(CreateAddonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAddon")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAddonResponseObject); ok {
		if err := validResponse.VisitCreateAddonResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAddon operation middleware
func (sh *strictHandler) DeleteAddon(ctx *gin.Context, id string) {
	var request DeleteAddonRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAddon(ctx, request.(DeleteAddonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAddon")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAddonResponseObject); ok {
		if err := validResponse.VisitDeleteAddonResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAddon operation middleware
func (sh *strictHandler) GetAddon(ctx *gin.Context, id string) {
	var request GetAddonRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAddon(ctx, request.(GetAddonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAddon")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAddonResponseObject); ok {
		if err := validResponse.VisitGetAddonResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAddon operation middleware
func (sh *strictHandler) UpdateAddon(ctx *gin.Context, id string) {
	var request UpdateAddonRequestObject

	request.Id = id

	var body UpdateAddonJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAddon(ctx, request.(UpdateAddonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAddon")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateAddonResponseObject); ok {
		if err := validResponse.VisitUpdateAddonResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllApiTokens operation middleware
func (sh *strictHandler) GetAllApiTokens(ctx *gin.Context) {
	var request GetAllApiTokensRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllApiTokens(ctx, request.(GetAllApiTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllApiTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllApiTokensResponseObject); ok {
		if err := validResponse.VisitGetAllApiTokensResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateApiToken operation middleware
func (sh *strictHandler) CreateApiToken(ctx *gin.Context) {
	var request CreateApiTokenRequestObject

	var body CreateApiTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateApiToken(ctx, request.(CreateApiTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateApiToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateApiTokenResponseObject); ok {
		if err := validResponse.VisitCreateApiTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiTokensByName operation middleware
func (sh *strictHandler) GetApiTokensByName(ctx *gin.Context, name string) {
	var request GetApiTokensByNameRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiTokensByName(ctx, request.(GetApiTokensByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiTokensByName")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiTokensByNameResponseObject); ok {
		if err := validResponse.VisitGetApiTokensByNameResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiToken operation middleware
func (sh *strictHandler) DeleteApiToken(ctx *gin.Context, token string) {
	var request DeleteApiTokenRequestObject

	request.Token = token

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiToken(ctx, request.(DeleteApiTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiTokenResponseObject); ok {
		if err := validResponse.VisitDeleteApiTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateApiToken operation middleware
func (sh *strictHandler) UpdateApiToken(ctx *gin.Context, token string) {
	var request UpdateApiTokenRequestObject

	request.Token = token

	var body UpdateApiTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateApiToken(ctx, request.(UpdateApiTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateApiToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateApiTokenResponseObject); ok {
		if err := validResponse.VisitUpdateApiTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArchivedFeatures operation middleware
func (sh *strictHandler) GetArchivedFeatures(ctx *gin.Context) {
	var request GetArchivedFeaturesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArchivedFeatures(ctx, request.(GetArchivedFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArchivedFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArchivedFeaturesResponseObject); ok {
		if err := validResponse.VisitGetArchivedFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetArchivedFeaturesByProjectId operation middleware
func (sh *strictHandler) GetArchivedFeaturesByProjectId(ctx *gin.Context, projectId string) {
	var request GetArchivedFeaturesByProjectIdRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArchivedFeaturesByProjectId(ctx, request.(GetArchivedFeaturesByProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArchivedFeaturesByProjectId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetArchivedFeaturesByProjectIdResponseObject); ok {
		if err := validResponse.VisitGetArchivedFeaturesByProjectIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReviveFeature operation middleware
func (sh *strictHandler) ReviveFeature(ctx *gin.Context, featureName string) {
	var request ReviveFeatureRequestObject

	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReviveFeature(ctx, request.(ReviveFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReviveFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReviveFeatureResponseObject); ok {
		if err := validResponse.VisitReviveFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFeature operation middleware
func (sh *strictHandler) DeleteFeature(ctx *gin.Context, featureName string) {
	var request DeleteFeatureRequestObject

	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFeature(ctx, request.(DeleteFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteFeatureResponseObject); ok {
		if err := validResponse.VisitDeleteFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFeatureUsageSummary operation middleware
func (sh *strictHandler) GetFeatureUsageSummary(ctx *gin.Context, name string) {
	var request GetFeatureUsageSummaryRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeatureUsageSummary(ctx, request.(GetFeatureUsageSummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeatureUsageSummary")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFeatureUsageSummaryResponseObject); ok {
		if err := validResponse.VisitGetFeatureUsageSummaryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRawFeatureMetrics operation middleware
func (sh *strictHandler) GetRawFeatureMetrics(ctx *gin.Context, name string) {
	var request GetRawFeatureMetricsRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRawFeatureMetrics(ctx, request.(GetRawFeatureMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRawFeatureMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRawFeatureMetricsResponseObject); ok {
		if err := validResponse.VisitGetRawFeatureMetricsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateConstraint operation middleware
func (sh *strictHandler) ValidateConstraint(ctx *gin.Context) {
	var request ValidateConstraintRequestObject

	var body ValidateConstraintJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateConstraint(ctx, request.(ValidateConstraintRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateConstraint")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateConstraintResponseObject); ok {
		if err := validResponse.VisitValidateConstraintResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetContextFields operation middleware
func (sh *strictHandler) GetContextFields(ctx *gin.Context) {
	var request GetContextFieldsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContextFields(ctx, request.(GetContextFieldsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContextFields")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetContextFieldsResponseObject); ok {
		if err := validResponse.VisitGetContextFieldsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateContextField operation middleware
func (sh *strictHandler) CreateContextField(ctx *gin.Context) {
	var request CreateContextFieldRequestObject

	var body CreateContextFieldJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateContextField(ctx, request.(CreateContextFieldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateContextField")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateContextFieldResponseObject); ok {
		if err := validResponse.VisitCreateContextFieldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Validate operation middleware
func (sh *strictHandler) Validate(ctx *gin.Context) {
	var request ValidateRequestObject

	var body ValidateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Validate(ctx, request.(ValidateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Validate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateResponseObject); ok {
		if err := validResponse.VisitValidateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteContextField operation middleware
func (sh *strictHandler) DeleteContextField(ctx *gin.Context, contextField string) {
	var request DeleteContextFieldRequestObject

	request.ContextField = contextField

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteContextField(ctx, request.(DeleteContextFieldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteContextField")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteContextFieldResponseObject); ok {
		if err := validResponse.VisitDeleteContextFieldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetContextField operation middleware
func (sh *strictHandler) GetContextField(ctx *gin.Context, contextField string) {
	var request GetContextFieldRequestObject

	request.ContextField = contextField

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContextField(ctx, request.(GetContextFieldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContextField")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetContextFieldResponseObject); ok {
		if err := validResponse.VisitGetContextFieldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateContextField operation middleware
func (sh *strictHandler) UpdateContextField(ctx *gin.Context, contextField string) {
	var request UpdateContextFieldRequestObject

	request.ContextField = contextField

	var body UpdateContextFieldJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateContextField(ctx, request.(UpdateContextFieldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateContextField")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateContextFieldResponseObject); ok {
		if err := validResponse.VisitUpdateContextFieldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStrategiesByContextField operation middleware
func (sh *strictHandler) GetStrategiesByContextField(ctx *gin.Context, contextField string) {
	var request GetStrategiesByContextFieldRequestObject

	request.ContextField = contextField

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStrategiesByContextField(ctx, request.(GetStrategiesByContextFieldRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStrategiesByContextField")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStrategiesByContextFieldResponseObject); ok {
		if err := validResponse.VisitGetStrategiesByContextFieldResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllEnvironments operation middleware
func (sh *strictHandler) GetAllEnvironments(ctx *gin.Context) {
	var request GetAllEnvironmentsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllEnvironments(ctx, request.(GetAllEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllEnvironments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllEnvironmentsResponseObject); ok {
		if err := validResponse.VisitGetAllEnvironmentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectEnvironments operation middleware
func (sh *strictHandler) GetProjectEnvironments(ctx *gin.Context, projectId string) {
	var request GetProjectEnvironmentsRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectEnvironments(ctx, request.(GetProjectEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectEnvironments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectEnvironmentsResponseObject); ok {
		if err := validResponse.VisitGetProjectEnvironmentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSortOrder operation middleware
func (sh *strictHandler) UpdateSortOrder(ctx *gin.Context) {
	var request UpdateSortOrderRequestObject

	var body UpdateSortOrderJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSortOrder(ctx, request.(UpdateSortOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSortOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSortOrderResponseObject); ok {
		if err := validResponse.VisitUpdateSortOrderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnvironment operation middleware
func (sh *strictHandler) GetEnvironment(ctx *gin.Context, name string) {
	var request GetEnvironmentRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnvironment(ctx, request.(GetEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEnvironmentResponseObject); ok {
		if err := validResponse.VisitGetEnvironmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ToggleEnvironmentOff operation middleware
func (sh *strictHandler) ToggleEnvironmentOff(ctx *gin.Context, name string) {
	var request ToggleEnvironmentOffRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ToggleEnvironmentOff(ctx, request.(ToggleEnvironmentOffRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ToggleEnvironmentOff")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ToggleEnvironmentOffResponseObject); ok {
		if err := validResponse.VisitToggleEnvironmentOffResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ToggleEnvironmentOn operation middleware
func (sh *strictHandler) ToggleEnvironmentOn(ctx *gin.Context, name string) {
	var request ToggleEnvironmentOnRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ToggleEnvironmentOn(ctx, request.(ToggleEnvironmentOnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ToggleEnvironmentOn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ToggleEnvironmentOnResponseObject); ok {
		if err := validResponse.VisitToggleEnvironmentOnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEvents operation middleware
func (sh *strictHandler) GetEvents(ctx *gin.Context, params GetEventsParams) {
	var request GetEventsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvents(ctx, request.(GetEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEventsResponseObject); ok {
		if err := validResponse.VisitGetEventsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchEvents operation middleware
func (sh *strictHandler) SearchEvents(ctx *gin.Context) {
	var request SearchEventsRequestObject

	var body SearchEventsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchEvents(ctx, request.(SearchEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SearchEventsResponseObject); ok {
		if err := validResponse.VisitSearchEventsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsForToggle operation middleware
func (sh *strictHandler) GetEventsForToggle(ctx *gin.Context, featureName string) {
	var request GetEventsForToggleRequestObject

	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsForToggle(ctx, request.(GetEventsForToggleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsForToggle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEventsForToggleResponseObject); ok {
		if err := validResponse.VisitGetEventsForToggleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllFeatureTypes operation middleware
func (sh *strictHandler) GetAllFeatureTypes(ctx *gin.Context) {
	var request GetAllFeatureTypesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllFeatureTypes(ctx, request.(GetAllFeatureTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllFeatureTypes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllFeatureTypesResponseObject); ok {
		if err := validResponse.VisitGetAllFeatureTypesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFeatureTypeLifetime operation middleware
func (sh *strictHandler) UpdateFeatureTypeLifetime(ctx *gin.Context, id string) {
	var request UpdateFeatureTypeLifetimeRequestObject

	request.Id = id

	var body UpdateFeatureTypeLifetimeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFeatureTypeLifetime(ctx, request.(UpdateFeatureTypeLifetimeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFeatureTypeLifetime")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateFeatureTypeLifetimeResponseObject); ok {
		if err := validResponse.VisitUpdateFeatureTypeLifetimeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllToggles operation middleware
func (sh *strictHandler) GetAllToggles(ctx *gin.Context) {
	var request GetAllTogglesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllToggles(ctx, request.(GetAllTogglesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllToggles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllTogglesResponseObject); ok {
		if err := validResponse.VisitGetAllTogglesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExportFeatures operation middleware
func (sh *strictHandler) ExportFeatures(ctx *gin.Context) {
	var request ExportFeaturesRequestObject

	var body ExportFeaturesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExportFeatures(ctx, request.(ExportFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExportFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExportFeaturesResponseObject); ok {
		if err := validResponse.VisitExportFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ImportToggles operation middleware
func (sh *strictHandler) ImportToggles(ctx *gin.Context) {
	var request ImportTogglesRequestObject

	var body ImportTogglesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ImportToggles(ctx, request.(ImportTogglesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportToggles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ImportTogglesResponseObject); ok {
		if err := validResponse.VisitImportTogglesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateImport operation middleware
func (sh *strictHandler) ValidateImport(ctx *gin.Context) {
	var request ValidateImportRequestObject

	var body ValidateImportJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateImport(ctx, request.(ValidateImportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateImport")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateImportResponseObject); ok {
		if err := validResponse.VisitValidateImportResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateFeature operation middleware
func (sh *strictHandler) ValidateFeature(ctx *gin.Context) {
	var request ValidateFeatureRequestObject

	var body ValidateFeatureJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateFeature(ctx, request.(ValidateFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateFeatureResponseObject); ok {
		if err := validResponse.VisitValidateFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(ctx *gin.Context, featureName string) {
	var request ListTagsRequestObject

	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddTag operation middleware
func (sh *strictHandler) AddTag(ctx *gin.Context, featureName string) {
	var request AddTagRequestObject

	request.FeatureName = featureName

	var body AddTagJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddTag(ctx, request.(AddTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddTagResponseObject); ok {
		if err := validResponse.VisitAddTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTags operation middleware
func (sh *strictHandler) UpdateTags(ctx *gin.Context, featureName string) {
	var request UpdateTagsRequestObject

	request.FeatureName = featureName

	var body UpdateTagsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTags(ctx, request.(UpdateTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTagsResponseObject); ok {
		if err := validResponse.VisitUpdateTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveTag operation middleware
func (sh *strictHandler) RemoveTag(ctx *gin.Context, featureName string, pType string, value string) {
	var request RemoveTagRequestObject

	request.FeatureName = featureName
	request.Type = pType
	request.Value = value

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveTag(ctx, request.(RemoveTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveTagResponseObject); ok {
		if err := validResponse.VisitRemoveTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFeedback operation middleware
func (sh *strictHandler) CreateFeedback(ctx *gin.Context) {
	var request CreateFeedbackRequestObject

	var body CreateFeedbackJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFeedback(ctx, request.(CreateFeedbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFeedback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateFeedbackResponseObject); ok {
		if err := validResponse.VisitCreateFeedbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFeedback operation middleware
func (sh *strictHandler) UpdateFeedback(ctx *gin.Context, id string) {
	var request UpdateFeedbackRequestObject

	request.Id = id

	var body UpdateFeedbackJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFeedback(ctx, request.(UpdateFeedbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFeedback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateFeedbackResponseObject); ok {
		if err := validResponse.VisitUpdateFeedbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetInstanceAdminStats operation middleware
func (sh *strictHandler) GetInstanceAdminStats(ctx *gin.Context) {
	var request GetInstanceAdminStatsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInstanceAdminStats(ctx, request.(GetInstanceAdminStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInstanceAdminStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetInstanceAdminStatsResponseObject); ok {
		if err := validResponse.VisitGetInstanceAdminStatsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetInstanceAdminStatsCsv operation middleware
func (sh *strictHandler) GetInstanceAdminStatsCsv(ctx *gin.Context) {
	var request GetInstanceAdminStatsCsvRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInstanceAdminStatsCsv(ctx, request.(GetInstanceAdminStatsCsvRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInstanceAdminStatsCsv")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetInstanceAdminStatsCsvResponseObject); ok {
		if err := validResponse.VisitGetInstanceAdminStatsCsvResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllPublicSignupTokens operation middleware
func (sh *strictHandler) GetAllPublicSignupTokens(ctx *gin.Context) {
	var request GetAllPublicSignupTokensRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllPublicSignupTokens(ctx, request.(GetAllPublicSignupTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllPublicSignupTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllPublicSignupTokensResponseObject); ok {
		if err := validResponse.VisitGetAllPublicSignupTokensResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePublicSignupToken operation middleware
func (sh *strictHandler) CreatePublicSignupToken(ctx *gin.Context) {
	var request CreatePublicSignupTokenRequestObject

	var body CreatePublicSignupTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePublicSignupToken(ctx, request.(CreatePublicSignupTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePublicSignupToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePublicSignupTokenResponseObject); ok {
		if err := validResponse.VisitCreatePublicSignupTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPublicSignupToken operation middleware
func (sh *strictHandler) GetPublicSignupToken(ctx *gin.Context, token string) {
	var request GetPublicSignupTokenRequestObject

	request.Token = token

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPublicSignupToken(ctx, request.(GetPublicSignupTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPublicSignupToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPublicSignupTokenResponseObject); ok {
		if err := validResponse.VisitGetPublicSignupTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePublicSignupToken operation middleware
func (sh *strictHandler) UpdatePublicSignupToken(ctx *gin.Context, token string) {
	var request UpdatePublicSignupTokenRequestObject

	request.Token = token

	var body UpdatePublicSignupTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePublicSignupToken(ctx, request.(UpdatePublicSignupTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePublicSignupToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePublicSignupTokenResponseObject); ok {
		if err := validResponse.VisitUpdatePublicSignupTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMaintenance operation middleware
func (sh *strictHandler) GetMaintenance(ctx *gin.Context) {
	var request GetMaintenanceRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMaintenance(ctx, request.(GetMaintenanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMaintenance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMaintenanceResponseObject); ok {
		if err := validResponse.VisitGetMaintenanceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ToggleMaintenance operation middleware
func (sh *strictHandler) ToggleMaintenance(ctx *gin.Context) {
	var request ToggleMaintenanceRequestObject

	var body ToggleMaintenanceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ToggleMaintenance(ctx, request.(ToggleMaintenanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ToggleMaintenance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ToggleMaintenanceResponseObject); ok {
		if err := validResponse.VisitToggleMaintenanceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApplications operation middleware
func (sh *strictHandler) GetApplications(ctx *gin.Context) {
	var request GetApplicationsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApplications(ctx, request.(GetApplicationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApplications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApplicationsResponseObject); ok {
		if err := validResponse.VisitGetApplicationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApplication operation middleware
func (sh *strictHandler) DeleteApplication(ctx *gin.Context, appName string) {
	var request DeleteApplicationRequestObject

	request.AppName = appName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApplication(ctx, request.(DeleteApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApplicationResponseObject); ok {
		if err := validResponse.VisitDeleteApplicationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApplication operation middleware
func (sh *strictHandler) GetApplication(ctx *gin.Context, appName string) {
	var request GetApplicationRequestObject

	request.AppName = appName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApplication(ctx, request.(GetApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApplicationResponseObject); ok {
		if err := validResponse.VisitGetApplicationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateApplication operation middleware
func (sh *strictHandler) CreateApplication(ctx *gin.Context, appName string) {
	var request CreateApplicationRequestObject

	request.AppName = appName

	var body CreateApplicationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateApplication(ctx, request.(CreateApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateApplicationResponseObject); ok {
		if err := validResponse.VisitCreateApplicationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPlayground operation middleware
func (sh *strictHandler) GetPlayground(ctx *gin.Context) {
	var request GetPlaygroundRequestObject

	var body GetPlaygroundJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlayground(ctx, request.(GetPlaygroundRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlayground")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPlaygroundResponseObject); ok {
		if err := validResponse.VisitGetPlaygroundResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAdvancedPlayground operation middleware
func (sh *strictHandler) GetAdvancedPlayground(ctx *gin.Context) {
	var request GetAdvancedPlaygroundRequestObject

	var body GetAdvancedPlaygroundJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAdvancedPlayground(ctx, request.(GetAdvancedPlaygroundRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAdvancedPlayground")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAdvancedPlaygroundResponseObject); ok {
		if err := validResponse.VisitGetAdvancedPlaygroundResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjects operation middleware
func (sh *strictHandler) GetProjects(ctx *gin.Context) {
	var request GetProjectsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjects(ctx, request.(GetProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjects")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectsResponseObject); ok {
		if err := validResponse.VisitGetProjectsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDeprecatedProjectOverview operation middleware
func (sh *strictHandler) GetDeprecatedProjectOverview(ctx *gin.Context, projectId string) {
	var request GetDeprecatedProjectOverviewRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeprecatedProjectOverview(ctx, request.(GetDeprecatedProjectOverviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeprecatedProjectOverview")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetDeprecatedProjectOverviewResponseObject); ok {
		if err := validResponse.VisitGetDeprecatedProjectOverviewResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectApiTokens operation middleware
func (sh *strictHandler) GetProjectApiTokens(ctx *gin.Context, projectId string) {
	var request GetProjectApiTokensRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectApiTokens(ctx, request.(GetProjectApiTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectApiTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectApiTokensResponseObject); ok {
		if err := validResponse.VisitGetProjectApiTokensResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateProjectApiToken operation middleware
func (sh *strictHandler) CreateProjectApiToken(ctx *gin.Context, projectId string) {
	var request CreateProjectApiTokenRequestObject

	request.ProjectId = projectId

	var body CreateProjectApiTokenJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProjectApiToken(ctx, request.(CreateProjectApiTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProjectApiToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProjectApiTokenResponseObject); ok {
		if err := validResponse.VisitCreateProjectApiTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteProjectApiToken operation middleware
func (sh *strictHandler) DeleteProjectApiToken(ctx *gin.Context, projectId string, token string) {
	var request DeleteProjectApiTokenRequestObject

	request.ProjectId = projectId
	request.Token = token

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectApiToken(ctx, request.(DeleteProjectApiTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectApiToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteProjectApiTokenResponseObject); ok {
		if err := validResponse.VisitDeleteProjectApiTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ArchiveFeatures operation middleware
func (sh *strictHandler) ArchiveFeatures(ctx *gin.Context, projectId string) {
	var request ArchiveFeaturesRequestObject

	request.ProjectId = projectId

	var body ArchiveFeaturesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ArchiveFeatures(ctx, request.(ArchiveFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ArchiveFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ArchiveFeaturesResponseObject); ok {
		if err := validResponse.VisitArchiveFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateArchiveFeatures operation middleware
func (sh *strictHandler) ValidateArchiveFeatures(ctx *gin.Context, projectId string) {
	var request ValidateArchiveFeaturesRequestObject

	request.ProjectId = projectId

	var body ValidateArchiveFeaturesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateArchiveFeatures(ctx, request.(ValidateArchiveFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateArchiveFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateArchiveFeaturesResponseObject); ok {
		if err := validResponse.VisitValidateArchiveFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// BulkToggleFeaturesEnvironmentOff operation middleware
func (sh *strictHandler) BulkToggleFeaturesEnvironmentOff(ctx *gin.Context, projectId string, environment string) {
	var request BulkToggleFeaturesEnvironmentOffRequestObject

	request.ProjectId = projectId
	request.Environment = environment

	var body BulkToggleFeaturesEnvironmentOffJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BulkToggleFeaturesEnvironmentOff(ctx, request.(BulkToggleFeaturesEnvironmentOffRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BulkToggleFeaturesEnvironmentOff")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(BulkToggleFeaturesEnvironmentOffResponseObject); ok {
		if err := validResponse.VisitBulkToggleFeaturesEnvironmentOffResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// BulkToggleFeaturesEnvironmentOn operation middleware
func (sh *strictHandler) BulkToggleFeaturesEnvironmentOn(ctx *gin.Context, projectId string, environment string) {
	var request BulkToggleFeaturesEnvironmentOnRequestObject

	request.ProjectId = projectId
	request.Environment = environment

	var body BulkToggleFeaturesEnvironmentOnJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BulkToggleFeaturesEnvironmentOn(ctx, request.(BulkToggleFeaturesEnvironmentOnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BulkToggleFeaturesEnvironmentOn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(BulkToggleFeaturesEnvironmentOnResponseObject); ok {
		if err := validResponse.VisitBulkToggleFeaturesEnvironmentOnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFeatures operation middleware
func (sh *strictHandler) DeleteFeatures(ctx *gin.Context, projectId string) {
	var request DeleteFeaturesRequestObject

	request.ProjectId = projectId

	var body DeleteFeaturesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFeatures(ctx, request.(DeleteFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteFeaturesResponseObject); ok {
		if err := validResponse.VisitDeleteFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckDependenciesExist operation middleware
func (sh *strictHandler) CheckDependenciesExist(ctx *gin.Context, projectId string) {
	var request CheckDependenciesExistRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CheckDependenciesExist(ctx, request.(CheckDependenciesExistRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckDependenciesExist")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CheckDependenciesExistResponseObject); ok {
		if err := validResponse.VisitCheckDependenciesExistResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectDora operation middleware
func (sh *strictHandler) GetProjectDora(ctx *gin.Context, projectId string) {
	var request GetProjectDoraRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectDora(ctx, request.(GetProjectDoraRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectDora")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectDoraResponseObject); ok {
		if err := validResponse.VisitGetProjectDoraResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddEnvironmentToProject operation middleware
func (sh *strictHandler) AddEnvironmentToProject(ctx *gin.Context, projectId string) {
	var request AddEnvironmentToProjectRequestObject

	request.ProjectId = projectId

	var body AddEnvironmentToProjectJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddEnvironmentToProject(ctx, request.(AddEnvironmentToProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddEnvironmentToProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddEnvironmentToProjectResponseObject); ok {
		if err := validResponse.VisitAddEnvironmentToProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveEnvironmentFromProject operation middleware
func (sh *strictHandler) RemoveEnvironmentFromProject(ctx *gin.Context, projectId string, environment string) {
	var request RemoveEnvironmentFromProjectRequestObject

	request.ProjectId = projectId
	request.Environment = environment

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveEnvironmentFromProject(ctx, request.(RemoveEnvironmentFromProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveEnvironmentFromProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveEnvironmentFromProjectResponseObject); ok {
		if err := validResponse.VisitRemoveEnvironmentFromProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddDefaultStrategyToProjectEnvironment operation middleware
func (sh *strictHandler) AddDefaultStrategyToProjectEnvironment(ctx *gin.Context, projectId string, environment string) {
	var request AddDefaultStrategyToProjectEnvironmentRequestObject

	request.ProjectId = projectId
	request.Environment = environment

	var body AddDefaultStrategyToProjectEnvironmentJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddDefaultStrategyToProjectEnvironment(ctx, request.(AddDefaultStrategyToProjectEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddDefaultStrategyToProjectEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddDefaultStrategyToProjectEnvironmentResponseObject); ok {
		if err := validResponse.VisitAddDefaultStrategyToProjectEnvironmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveFavoriteProject operation middleware
func (sh *strictHandler) RemoveFavoriteProject(ctx *gin.Context, projectId string) {
	var request RemoveFavoriteProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveFavoriteProject(ctx, request.(RemoveFavoriteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveFavoriteProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveFavoriteProjectResponseObject); ok {
		if err := validResponse.VisitRemoveFavoriteProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddFavoriteProject operation middleware
func (sh *strictHandler) AddFavoriteProject(ctx *gin.Context, projectId string) {
	var request AddFavoriteProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddFavoriteProject(ctx, request.(AddFavoriteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddFavoriteProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddFavoriteProjectResponseObject); ok {
		if err := validResponse.VisitAddFavoriteProjectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFeatures operation middleware
func (sh *strictHandler) GetFeatures(ctx *gin.Context, projectId string) {
	var request GetFeaturesRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeatures(ctx, request.(GetFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFeaturesResponseObject); ok {
		if err := validResponse.VisitGetFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFeature operation middleware
func (sh *strictHandler) CreateFeature(ctx *gin.Context, projectId string) {
	var request CreateFeatureRequestObject

	request.ProjectId = projectId

	var body CreateFeatureJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFeature(ctx, request.(CreateFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateFeatureResponseObject); ok {
		if err := validResponse.VisitCreateFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ArchiveFeature operation middleware
func (sh *strictHandler) ArchiveFeature(ctx *gin.Context, projectId string, featureName string) {
	var request ArchiveFeatureRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ArchiveFeature(ctx, request.(ArchiveFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ArchiveFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ArchiveFeatureResponseObject); ok {
		if err := validResponse.VisitArchiveFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFeature operation middleware
func (sh *strictHandler) GetFeature(ctx *gin.Context, projectId string, featureName string) {
	var request GetFeatureRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeature(ctx, request.(GetFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFeatureResponseObject); ok {
		if err := validResponse.VisitGetFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchFeature operation middleware
func (sh *strictHandler) PatchFeature(ctx *gin.Context, projectId string, featureName string) {
	var request PatchFeatureRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	var body PatchFeatureJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchFeature(ctx, request.(PatchFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchFeatureResponseObject); ok {
		if err := validResponse.VisitPatchFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFeature operation middleware
func (sh *strictHandler) UpdateFeature(ctx *gin.Context, projectId string, featureName string) {
	var request UpdateFeatureRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	var body UpdateFeatureJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFeature(ctx, request.(UpdateFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateFeatureResponseObject); ok {
		if err := validResponse.VisitUpdateFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CloneFeature operation middleware
func (sh *strictHandler) CloneFeature(ctx *gin.Context, projectId string, featureName string) {
	var request CloneFeatureRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	var body CloneFeatureJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CloneFeature(ctx, request.(CloneFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CloneFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CloneFeatureResponseObject); ok {
		if err := validResponse.VisitCloneFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFeatureDependencies operation middleware
func (sh *strictHandler) DeleteFeatureDependencies(ctx *gin.Context, projectId string, featureName string) {
	var request DeleteFeatureDependenciesRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFeatureDependencies(ctx, request.(DeleteFeatureDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFeatureDependencies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteFeatureDependenciesResponseObject); ok {
		if err := validResponse.VisitDeleteFeatureDependenciesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddFeatureDependency operation middleware
func (sh *strictHandler) AddFeatureDependency(ctx *gin.Context, projectId string, featureName string) {
	var request AddFeatureDependencyRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	var body AddFeatureDependencyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddFeatureDependency(ctx, request.(AddFeatureDependencyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddFeatureDependency")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddFeatureDependencyResponseObject); ok {
		if err := validResponse.VisitAddFeatureDependencyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFeatureDependency operation middleware
func (sh *strictHandler) DeleteFeatureDependency(ctx *gin.Context, projectId string, featureName string, parent string) {
	var request DeleteFeatureDependencyRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Parent = parent

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFeatureDependency(ctx, request.(DeleteFeatureDependencyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFeatureDependency")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteFeatureDependencyResponseObject); ok {
		if err := validResponse.VisitDeleteFeatureDependencyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFeatureEnvironment operation middleware
func (sh *strictHandler) GetFeatureEnvironment(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request GetFeatureEnvironmentRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeatureEnvironment(ctx, request.(GetFeatureEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeatureEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFeatureEnvironmentResponseObject); ok {
		if err := validResponse.VisitGetFeatureEnvironmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ToggleFeatureEnvironmentOff operation middleware
func (sh *strictHandler) ToggleFeatureEnvironmentOff(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request ToggleFeatureEnvironmentOffRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ToggleFeatureEnvironmentOff(ctx, request.(ToggleFeatureEnvironmentOffRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ToggleFeatureEnvironmentOff")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ToggleFeatureEnvironmentOffResponseObject); ok {
		if err := validResponse.VisitToggleFeatureEnvironmentOffResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ToggleFeatureEnvironmentOn operation middleware
func (sh *strictHandler) ToggleFeatureEnvironmentOn(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request ToggleFeatureEnvironmentOnRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ToggleFeatureEnvironmentOn(ctx, request.(ToggleFeatureEnvironmentOnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ToggleFeatureEnvironmentOn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ToggleFeatureEnvironmentOnResponseObject); ok {
		if err := validResponse.VisitToggleFeatureEnvironmentOnResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFeatureStrategies operation middleware
func (sh *strictHandler) GetFeatureStrategies(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request GetFeatureStrategiesRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeatureStrategies(ctx, request.(GetFeatureStrategiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeatureStrategies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFeatureStrategiesResponseObject); ok {
		if err := validResponse.VisitGetFeatureStrategiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddFeatureStrategy operation middleware
func (sh *strictHandler) AddFeatureStrategy(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request AddFeatureStrategyRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	var body AddFeatureStrategyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddFeatureStrategy(ctx, request.(AddFeatureStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddFeatureStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddFeatureStrategyResponseObject); ok {
		if err := validResponse.VisitAddFeatureStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetStrategySortOrder operation middleware
func (sh *strictHandler) SetStrategySortOrder(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request SetStrategySortOrderRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	var body SetStrategySortOrderJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetStrategySortOrder(ctx, request.(SetStrategySortOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetStrategySortOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SetStrategySortOrderResponseObject); ok {
		if err := validResponse.VisitSetStrategySortOrderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFeatureStrategy operation middleware
func (sh *strictHandler) DeleteFeatureStrategy(ctx *gin.Context, projectId string, featureName string, environment string, strategyId string) {
	var request DeleteFeatureStrategyRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment
	request.StrategyId = strategyId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFeatureStrategy(ctx, request.(DeleteFeatureStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFeatureStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteFeatureStrategyResponseObject); ok {
		if err := validResponse.VisitDeleteFeatureStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFeatureStrategy operation middleware
func (sh *strictHandler) GetFeatureStrategy(ctx *gin.Context, projectId string, featureName string, environment string, strategyId string) {
	var request GetFeatureStrategyRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment
	request.StrategyId = strategyId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeatureStrategy(ctx, request.(GetFeatureStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeatureStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFeatureStrategyResponseObject); ok {
		if err := validResponse.VisitGetFeatureStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchFeatureStrategy operation middleware
func (sh *strictHandler) PatchFeatureStrategy(ctx *gin.Context, projectId string, featureName string, environment string, strategyId string) {
	var request PatchFeatureStrategyRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment
	request.StrategyId = strategyId

	var body PatchFeatureStrategyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchFeatureStrategy(ctx, request.(PatchFeatureStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchFeatureStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchFeatureStrategyResponseObject); ok {
		if err := validResponse.VisitPatchFeatureStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFeatureStrategy operation middleware
func (sh *strictHandler) UpdateFeatureStrategy(ctx *gin.Context, projectId string, featureName string, environment string, strategyId string) {
	var request UpdateFeatureStrategyRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment
	request.StrategyId = strategyId

	var body UpdateFeatureStrategyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFeatureStrategy(ctx, request.(UpdateFeatureStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFeatureStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateFeatureStrategyResponseObject); ok {
		if err := validResponse.VisitUpdateFeatureStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEnvironmentFeatureVariants operation middleware
func (sh *strictHandler) GetEnvironmentFeatureVariants(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request GetEnvironmentFeatureVariantsRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnvironmentFeatureVariants(ctx, request.(GetEnvironmentFeatureVariantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnvironmentFeatureVariants")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEnvironmentFeatureVariantsResponseObject); ok {
		if err := validResponse.VisitGetEnvironmentFeatureVariantsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchEnvironmentsFeatureVariants operation middleware
func (sh *strictHandler) PatchEnvironmentsFeatureVariants(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request PatchEnvironmentsFeatureVariantsRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	var body PatchEnvironmentsFeatureVariantsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchEnvironmentsFeatureVariants(ctx, request.(PatchEnvironmentsFeatureVariantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchEnvironmentsFeatureVariants")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchEnvironmentsFeatureVariantsResponseObject); ok {
		if err := validResponse.VisitPatchEnvironmentsFeatureVariantsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OverwriteEnvironmentFeatureVariants operation middleware
func (sh *strictHandler) OverwriteEnvironmentFeatureVariants(ctx *gin.Context, projectId string, featureName string, environment string) {
	var request OverwriteEnvironmentFeatureVariantsRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName
	request.Environment = environment

	var body OverwriteEnvironmentFeatureVariantsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OverwriteEnvironmentFeatureVariants(ctx, request.(OverwriteEnvironmentFeatureVariantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OverwriteEnvironmentFeatureVariants")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OverwriteEnvironmentFeatureVariantsResponseObject); ok {
		if err := validResponse.VisitOverwriteEnvironmentFeatureVariantsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveFavoriteFeature operation middleware
func (sh *strictHandler) RemoveFavoriteFeature(ctx *gin.Context, projectId string, featureName string) {
	var request RemoveFavoriteFeatureRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveFavoriteFeature(ctx, request.(RemoveFavoriteFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveFavoriteFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveFavoriteFeatureResponseObject); ok {
		if err := validResponse.VisitRemoveFavoriteFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddFavoriteFeature operation middleware
func (sh *strictHandler) AddFavoriteFeature(ctx *gin.Context, projectId string, featureName string) {
	var request AddFavoriteFeatureRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddFavoriteFeature(ctx, request.(AddFavoriteFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddFavoriteFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddFavoriteFeatureResponseObject); ok {
		if err := validResponse.VisitAddFavoriteFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListParentOptions operation middleware
func (sh *strictHandler) ListParentOptions(ctx *gin.Context, projectId string, featureName string) {
	var request ListParentOptionsRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListParentOptions(ctx, request.(ListParentOptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListParentOptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListParentOptionsResponseObject); ok {
		if err := validResponse.VisitListParentOptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFeatureVariants operation middleware
func (sh *strictHandler) GetFeatureVariants(ctx *gin.Context, projectId string, featureName string) {
	var request GetFeatureVariantsRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFeatureVariants(ctx, request.(GetFeatureVariantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFeatureVariants")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFeatureVariantsResponseObject); ok {
		if err := validResponse.VisitGetFeatureVariantsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchFeatureVariants operation middleware
func (sh *strictHandler) PatchFeatureVariants(ctx *gin.Context, projectId string, featureName string) {
	var request PatchFeatureVariantsRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	var body PatchFeatureVariantsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchFeatureVariants(ctx, request.(PatchFeatureVariantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchFeatureVariants")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchFeatureVariantsResponseObject); ok {
		if err := validResponse.VisitPatchFeatureVariantsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OverwriteFeatureVariants operation middleware
func (sh *strictHandler) OverwriteFeatureVariants(ctx *gin.Context, projectId string, featureName string) {
	var request OverwriteFeatureVariantsRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	var body OverwriteFeatureVariantsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OverwriteFeatureVariants(ctx, request.(OverwriteFeatureVariantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OverwriteFeatureVariants")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OverwriteFeatureVariantsResponseObject); ok {
		if err := validResponse.VisitOverwriteFeatureVariantsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// OverwriteFeatureVariantsOnEnvironments operation middleware
func (sh *strictHandler) OverwriteFeatureVariantsOnEnvironments(ctx *gin.Context, projectId string, featureName string) {
	var request OverwriteFeatureVariantsOnEnvironmentsRequestObject

	request.ProjectId = projectId
	request.FeatureName = featureName

	var body OverwriteFeatureVariantsOnEnvironmentsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OverwriteFeatureVariantsOnEnvironments(ctx, request.(OverwriteFeatureVariantsOnEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OverwriteFeatureVariantsOnEnvironments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(OverwriteFeatureVariantsOnEnvironmentsResponseObject); ok {
		if err := validResponse.VisitOverwriteFeatureVariantsOnEnvironmentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectHealthReport operation middleware
func (sh *strictHandler) GetProjectHealthReport(ctx *gin.Context, projectId string) {
	var request GetProjectHealthReportRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectHealthReport(ctx, request.(GetProjectHealthReportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectHealthReport")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectHealthReportResponseObject); ok {
		if err := validResponse.VisitGetProjectHealthReportResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProjectOverview operation middleware
func (sh *strictHandler) GetProjectOverview(ctx *gin.Context, projectId string) {
	var request GetProjectOverviewRequestObject

	request.ProjectId = projectId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectOverview(ctx, request.(GetProjectOverviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectOverview")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProjectOverviewResponseObject); ok {
		if err := validResponse.VisitGetProjectOverviewResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReviveFeatures operation middleware
func (sh *strictHandler) ReviveFeatures(ctx *gin.Context, projectId string) {
	var request ReviveFeaturesRequestObject

	request.ProjectId = projectId

	var body ReviveFeaturesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReviveFeatures(ctx, request.(ReviveFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReviveFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReviveFeaturesResponseObject); ok {
		if err := validResponse.VisitReviveFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// StaleFeatures operation middleware
func (sh *strictHandler) StaleFeatures(ctx *gin.Context, projectId string) {
	var request StaleFeaturesRequestObject

	request.ProjectId = projectId

	var body StaleFeaturesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StaleFeatures(ctx, request.(StaleFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StaleFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(StaleFeaturesResponseObject); ok {
		if err := validResponse.VisitStaleFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddTagToFeatures operation middleware
func (sh *strictHandler) AddTagToFeatures(ctx *gin.Context, projectId string) {
	var request AddTagToFeaturesRequestObject

	request.ProjectId = projectId

	var body AddTagToFeaturesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddTagToFeatures(ctx, request.(AddTagToFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddTagToFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddTagToFeaturesResponseObject); ok {
		if err := validResponse.VisitAddTagToFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchFeatures operation middleware
func (sh *strictHandler) SearchFeatures(ctx *gin.Context, params SearchFeaturesParams) {
	var request SearchFeaturesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchFeatures(ctx, request.(SearchFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SearchFeaturesResponseObject); ok {
		if err := validResponse.VisitSearchFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSegments operation middleware
func (sh *strictHandler) GetSegments(ctx *gin.Context) {
	var request GetSegmentsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSegments(ctx, request.(GetSegmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSegments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSegmentsResponseObject); ok {
		if err := validResponse.VisitGetSegmentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSegment operation middleware
func (sh *strictHandler) CreateSegment(ctx *gin.Context) {
	var request CreateSegmentRequestObject

	var body CreateSegmentJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSegment(ctx, request.(CreateSegmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSegment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateSegmentResponseObject); ok {
		if err := validResponse.VisitCreateSegmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFeatureStrategySegments operation middleware
func (sh *strictHandler) UpdateFeatureStrategySegments(ctx *gin.Context) {
	var request UpdateFeatureStrategySegmentsRequestObject

	var body UpdateFeatureStrategySegmentsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFeatureStrategySegments(ctx, request.(UpdateFeatureStrategySegmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFeatureStrategySegments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateFeatureStrategySegmentsResponseObject); ok {
		if err := validResponse.VisitUpdateFeatureStrategySegmentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSegmentsByStrategyId operation middleware
func (sh *strictHandler) GetSegmentsByStrategyId(ctx *gin.Context, strategyId string) {
	var request GetSegmentsByStrategyIdRequestObject

	request.StrategyId = strategyId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSegmentsByStrategyId(ctx, request.(GetSegmentsByStrategyIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSegmentsByStrategyId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSegmentsByStrategyIdResponseObject); ok {
		if err := validResponse.VisitGetSegmentsByStrategyIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateSegment operation middleware
func (sh *strictHandler) ValidateSegment(ctx *gin.Context) {
	var request ValidateSegmentRequestObject

	var body ValidateSegmentJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateSegment(ctx, request.(ValidateSegmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateSegment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateSegmentResponseObject); ok {
		if err := validResponse.VisitValidateSegmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveSegment operation middleware
func (sh *strictHandler) RemoveSegment(ctx *gin.Context, id string) {
	var request RemoveSegmentRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveSegment(ctx, request.(RemoveSegmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveSegment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveSegmentResponseObject); ok {
		if err := validResponse.VisitRemoveSegmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSegment operation middleware
func (sh *strictHandler) GetSegment(ctx *gin.Context, id string) {
	var request GetSegmentRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSegment(ctx, request.(GetSegmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSegment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSegmentResponseObject); ok {
		if err := validResponse.VisitGetSegmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSegment operation middleware
func (sh *strictHandler) UpdateSegment(ctx *gin.Context, id string) {
	var request UpdateSegmentRequestObject

	request.Id = id

	var body UpdateSegmentJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSegment(ctx, request.(UpdateSegmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSegment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSegmentResponseObject); ok {
		if err := validResponse.VisitUpdateSegmentResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStrategiesBySegmentId operation middleware
func (sh *strictHandler) GetStrategiesBySegmentId(ctx *gin.Context, id string) {
	var request GetStrategiesBySegmentIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStrategiesBySegmentId(ctx, request.(GetStrategiesBySegmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStrategiesBySegmentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStrategiesBySegmentIdResponseObject); ok {
		if err := validResponse.VisitGetStrategiesBySegmentIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSplashSettings operation middleware
func (sh *strictHandler) UpdateSplashSettings(ctx *gin.Context, id string) {
	var request UpdateSplashSettingsRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSplashSettings(ctx, request.(UpdateSplashSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSplashSettings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateSplashSettingsResponseObject); ok {
		if err := validResponse.VisitUpdateSplashSettingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Export operation middleware
func (sh *strictHandler) Export(ctx *gin.Context, params ExportParams) {
	var request ExportRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Export(ctx, request.(ExportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Export")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExportResponseObject); ok {
		if err := validResponse.VisitExportResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Import operation middleware
func (sh *strictHandler) Import(ctx *gin.Context) {
	var request ImportRequestObject

	var body ImportJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Import(ctx, request.(ImportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Import")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ImportResponseObject); ok {
		if err := validResponse.VisitImportResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllStrategies operation middleware
func (sh *strictHandler) GetAllStrategies(ctx *gin.Context) {
	var request GetAllStrategiesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllStrategies(ctx, request.(GetAllStrategiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllStrategies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllStrategiesResponseObject); ok {
		if err := validResponse.VisitGetAllStrategiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateStrategy operation middleware
func (sh *strictHandler) CreateStrategy(ctx *gin.Context) {
	var request CreateStrategyRequestObject

	var body CreateStrategyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateStrategy(ctx, request.(CreateStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateStrategyResponseObject); ok {
		if err := validResponse.VisitCreateStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveStrategy operation middleware
func (sh *strictHandler) RemoveStrategy(ctx *gin.Context, name string) {
	var request RemoveStrategyRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveStrategy(ctx, request.(RemoveStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RemoveStrategyResponseObject); ok {
		if err := validResponse.VisitRemoveStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStrategy operation middleware
func (sh *strictHandler) GetStrategy(ctx *gin.Context, name string) {
	var request GetStrategyRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStrategy(ctx, request.(GetStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetStrategyResponseObject); ok {
		if err := validResponse.VisitGetStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateStrategy operation middleware
func (sh *strictHandler) UpdateStrategy(ctx *gin.Context, name string) {
	var request UpdateStrategyRequestObject

	request.Name = name

	var body UpdateStrategyJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateStrategy(ctx, request.(UpdateStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateStrategyResponseObject); ok {
		if err := validResponse.VisitUpdateStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeprecateStrategy operation middleware
func (sh *strictHandler) DeprecateStrategy(ctx *gin.Context, strategyName string) {
	var request DeprecateStrategyRequestObject

	request.StrategyName = strategyName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeprecateStrategy(ctx, request.(DeprecateStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeprecateStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeprecateStrategyResponseObject); ok {
		if err := validResponse.VisitDeprecateStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReactivateStrategy operation middleware
func (sh *strictHandler) ReactivateStrategy(ctx *gin.Context, strategyName string) {
	var request ReactivateStrategyRequestObject

	request.StrategyName = strategyName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ReactivateStrategy(ctx, request.(ReactivateStrategyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReactivateStrategy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ReactivateStrategyResponseObject); ok {
		if err := validResponse.VisitReactivateStrategyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTagTypes operation middleware
func (sh *strictHandler) GetTagTypes(ctx *gin.Context) {
	var request GetTagTypesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTagTypes(ctx, request.(GetTagTypesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTagTypes")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagTypesResponseObject); ok {
		if err := validResponse.VisitGetTagTypesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTagType operation middleware
func (sh *strictHandler) CreateTagType(ctx *gin.Context) {
	var request CreateTagTypeRequestObject

	var body CreateTagTypeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTagType(ctx, request.(CreateTagTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTagType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTagTypeResponseObject); ok {
		if err := validResponse.VisitCreateTagTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateTagType operation middleware
func (sh *strictHandler) ValidateTagType(ctx *gin.Context) {
	var request ValidateTagTypeRequestObject

	var body ValidateTagTypeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateTagType(ctx, request.(ValidateTagTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateTagType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateTagTypeResponseObject); ok {
		if err := validResponse.VisitValidateTagTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTagType operation middleware
func (sh *strictHandler) DeleteTagType(ctx *gin.Context, name string) {
	var request DeleteTagTypeRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTagType(ctx, request.(DeleteTagTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTagType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTagTypeResponseObject); ok {
		if err := validResponse.VisitDeleteTagTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTagType operation middleware
func (sh *strictHandler) GetTagType(ctx *gin.Context, name string) {
	var request GetTagTypeRequestObject

	request.Name = name

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTagType(ctx, request.(GetTagTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTagType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagTypeResponseObject); ok {
		if err := validResponse.VisitGetTagTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTagType operation middleware
func (sh *strictHandler) UpdateTagType(ctx *gin.Context, name string) {
	var request UpdateTagTypeRequestObject

	request.Name = name

	var body UpdateTagTypeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTagType(ctx, request.(UpdateTagTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTagType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTagTypeResponseObject); ok {
		if err := validResponse.VisitUpdateTagTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTags operation middleware
func (sh *strictHandler) GetTags(ctx *gin.Context) {
	var request GetTagsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTags(ctx, request.(GetTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagsResponseObject); ok {
		if err := validResponse.VisitGetTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTag operation middleware
func (sh *strictHandler) CreateTag(ctx *gin.Context) {
	var request CreateTagRequestObject

	var body CreateTagJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTag(ctx, request.(CreateTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTagResponseObject); ok {
		if err := validResponse.VisitCreateTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTagsByType operation middleware
func (sh *strictHandler) GetTagsByType(ctx *gin.Context, pType string) {
	var request GetTagsByTypeRequestObject

	request.Type = pType

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTagsByType(ctx, request.(GetTagsByTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTagsByType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagsByTypeResponseObject); ok {
		if err := validResponse.VisitGetTagsByTypeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTag operation middleware
func (sh *strictHandler) DeleteTag(ctx *gin.Context, pType string, value string) {
	var request DeleteTagRequestObject

	request.Type = pType
	request.Value = value

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTag(ctx, request.(DeleteTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTagResponseObject); ok {
		if err := validResponse.VisitDeleteTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTag operation middleware
func (sh *strictHandler) GetTag(ctx *gin.Context, pType string, value string) {
	var request GetTagRequestObject

	request.Type = pType
	request.Value = value

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTag(ctx, request.(GetTagRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTag")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTagResponseObject); ok {
		if err := validResponse.VisitGetTagResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTelemetrySettings operation middleware
func (sh *strictHandler) GetTelemetrySettings(ctx *gin.Context) {
	var request GetTelemetrySettingsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTelemetrySettings(ctx, request.(GetTelemetrySettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTelemetrySettings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTelemetrySettingsResponseObject); ok {
		if err := validResponse.VisitGetTelemetrySettingsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUiConfig operation middleware
func (sh *strictHandler) GetUiConfig(ctx *gin.Context) {
	var request GetUiConfigRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUiConfig(ctx, request.(GetUiConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUiConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUiConfigResponseObject); ok {
		if err := validResponse.VisitGetUiConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetUiConfig operation middleware
func (sh *strictHandler) SetUiConfig(ctx *gin.Context) {
	var request SetUiConfigRequestObject

	var body SetUiConfigJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetUiConfig(ctx, request.(SetUiConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetUiConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SetUiConfigResponseObject); ok {
		if err := validResponse.VisitSetUiConfigResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMe operation middleware
func (sh *strictHandler) GetMe(ctx *gin.Context) {
	var request GetMeRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMe(ctx, request.(GetMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMeResponseObject); ok {
		if err := validResponse.VisitGetMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx *gin.Context) {
	var request GetUsersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBaseUsersAndGroups operation middleware
func (sh *strictHandler) GetBaseUsersAndGroups(ctx *gin.Context) {
	var request GetBaseUsersAndGroupsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBaseUsersAndGroups(ctx, request.(GetBaseUsersAndGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBaseUsersAndGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBaseUsersAndGroupsResponseObject); ok {
		if err := validResponse.VisitGetBaseUsersAndGroupsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAdminCount operation middleware
func (sh *strictHandler) GetAdminCount(ctx *gin.Context) {
	var request GetAdminCountRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAdminCount(ctx, request.(GetAdminCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAdminCount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAdminCountResponseObject); ok {
		if err := validResponse.VisitGetAdminCountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ResetUserPassword operation middleware
func (sh *strictHandler) ResetUserPassword(ctx *gin.Context) {
	var request ResetUserPasswordRequestObject

	var body ResetUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ResetUserPassword(ctx, request.(ResetUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResetUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ResetUserPasswordResponseObject); ok {
		if err := validResponse.VisitResetUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchUsers operation middleware
func (sh *strictHandler) SearchUsers(ctx *gin.Context, params SearchUsersParams) {
	var request SearchUsersRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchUsers(ctx, request.(SearchUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SearchUsersResponseObject); ok {
		if err := validResponse.VisitSearchUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateUserPassword operation middleware
func (sh *strictHandler) ValidateUserPassword(ctx *gin.Context) {
	var request ValidateUserPasswordRequestObject

	var body ValidateUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateUserPassword(ctx, request.(ValidateUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateUserPasswordResponseObject); ok {
		if err := validResponse.VisitValidateUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx *gin.Context, id string) {
	var request DeleteUserRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *gin.Context, id string) {
	var request GetUserRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx *gin.Context, id string) {
	var request UpdateUserRequestObject

	request.Id = id

	var body UpdateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeUserPassword operation middleware
func (sh *strictHandler) ChangeUserPassword(ctx *gin.Context, id string) {
	var request ChangeUserPasswordRequestObject

	request.Id = id

	var body ChangeUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserPassword(ctx, request.(ChangeUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeUserPasswordResponseObject); ok {
		if err := validResponse.VisitChangeUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeMyPassword operation middleware
func (sh *strictHandler) ChangeMyPassword(ctx *gin.Context) {
	var request ChangeMyPasswordRequestObject

	var body ChangeMyPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeMyPassword(ctx, request.(ChangeMyPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeMyPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeMyPasswordResponseObject); ok {
		if err := validResponse.VisitChangeMyPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx *gin.Context) {
	var request GetProfileRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfile(ctx, request.(GetProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetProfileResponseObject); ok {
		if err := validResponse.VisitGetProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPats operation middleware
func (sh *strictHandler) GetPats(ctx *gin.Context) {
	var request GetPatsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPats(ctx, request.(GetPatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetPatsResponseObject); ok {
		if err := validResponse.VisitGetPatsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePat operation middleware
func (sh *strictHandler) CreatePat(ctx *gin.Context) {
	var request CreatePatRequestObject

	var body CreatePatJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePat(ctx, request.(CreatePatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreatePatResponseObject); ok {
		if err := validResponse.VisitCreatePatResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePat operation middleware
func (sh *strictHandler) DeletePat(ctx *gin.Context, id string) {
	var request DeletePatRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePat(ctx, request.(DeletePatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeletePatResponseObject); ok {
		if err := validResponse.VisitDeletePatResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllClientFeatures operation middleware
func (sh *strictHandler) GetAllClientFeatures(ctx *gin.Context) {
	var request GetAllClientFeaturesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllClientFeatures(ctx, request.(GetAllClientFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllClientFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllClientFeaturesResponseObject); ok {
		if err := validResponse.VisitGetAllClientFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClientFeature operation middleware
func (sh *strictHandler) GetClientFeature(ctx *gin.Context, featureName string) {
	var request GetClientFeatureRequestObject

	request.FeatureName = featureName

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetClientFeature(ctx, request.(GetClientFeatureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClientFeature")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetClientFeatureResponseObject); ok {
		if err := validResponse.VisitGetClientFeatureResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterClientMetrics operation middleware
func (sh *strictHandler) RegisterClientMetrics(ctx *gin.Context) {
	var request RegisterClientMetricsRequestObject

	var body RegisterClientMetricsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterClientMetrics(ctx, request.(RegisterClientMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterClientMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterClientMetricsResponseObject); ok {
		if err := validResponse.VisitRegisterClientMetricsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterClientApplication operation middleware
func (sh *strictHandler) RegisterClientApplication(ctx *gin.Context) {
	var request RegisterClientApplicationRequestObject

	var body RegisterClientApplicationJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterClientApplication(ctx, request.(RegisterClientApplicationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterClientApplication")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterClientApplicationResponseObject); ok {
		if err := validResponse.VisitRegisterClientApplicationResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFrontendFeatures operation middleware
func (sh *strictHandler) GetFrontendFeatures(ctx *gin.Context) {
	var request GetFrontendFeaturesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFrontendFeatures(ctx, request.(GetFrontendFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFrontendFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetFrontendFeaturesResponseObject); ok {
		if err := validResponse.VisitGetFrontendFeaturesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterFrontendMetrics operation middleware
func (sh *strictHandler) RegisterFrontendMetrics(ctx *gin.Context) {
	var request RegisterFrontendMetricsRequestObject

	var body RegisterFrontendMetricsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterFrontendMetrics(ctx, request.(RegisterFrontendMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterFrontendMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterFrontendMetricsResponseObject); ok {
		if err := validResponse.VisitRegisterFrontendMetricsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterFrontendClient operation middleware
func (sh *strictHandler) RegisterFrontendClient(ctx *gin.Context) {
	var request RegisterFrontendClientRequestObject

	var body RegisterFrontendClientJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterFrontendClient(ctx, request.(RegisterFrontendClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterFrontendClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterFrontendClientResponseObject); ok {
		if err := validResponse.VisitRegisterFrontendClientResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangePassword operation middleware
func (sh *strictHandler) ChangePassword(ctx *gin.Context) {
	var request ChangePasswordRequestObject

	var body ChangePasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangePassword(ctx, request.(ChangePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangePasswordResponseObject); ok {
		if err := validResponse.VisitChangePasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendResetPasswordEmail operation middleware
func (sh *strictHandler) SendResetPasswordEmail(ctx *gin.Context) {
	var request SendResetPasswordEmailRequestObject

	var body SendResetPasswordEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendResetPasswordEmail(ctx, request.(SendResetPasswordEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendResetPasswordEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendResetPasswordEmailResponseObject); ok {
		if err := validResponse.VisitSendResetPasswordEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateToken operation middleware
func (sh *strictHandler) ValidateToken(ctx *gin.Context) {
	var request ValidateTokenRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateToken(ctx, request.(ValidateTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidateTokenResponseObject); ok {
		if err := validResponse.VisitValidateTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidatePassword operation middleware
func (sh *strictHandler) ValidatePassword(ctx *gin.Context) {
	var request ValidatePasswordRequestObject

	var body ValidatePasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidatePassword(ctx, request.(ValidatePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidatePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidatePasswordResponseObject); ok {
		if err := validResponse.VisitValidatePasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// BulkMetrics operation middleware
func (sh *strictHandler) BulkMetrics(ctx *gin.Context) {
	var request BulkMetricsRequestObject

	var body BulkMetricsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BulkMetrics(ctx, request.(BulkMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BulkMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(BulkMetricsResponseObject); ok {
		if err := validResponse.VisitBulkMetricsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetValidTokens operation middleware
func (sh *strictHandler) GetValidTokens(ctx *gin.Context) {
	var request GetValidTokensRequestObject

	var body GetValidTokensJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetValidTokens(ctx, request.(GetValidTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetValidTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetValidTokensResponseObject); ok {
		if err := validResponse.VisitGetValidTokensResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *gin.Context) {
	var request GetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddPublicSignupTokenUser operation middleware
func (sh *strictHandler) AddPublicSignupTokenUser(ctx *gin.Context, token string) {
	var request AddPublicSignupTokenUserRequestObject

	request.Token = token

	var body AddPublicSignupTokenUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddPublicSignupTokenUser(ctx, request.(AddPublicSignupTokenUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPublicSignupTokenUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddPublicSignupTokenUserResponseObject); ok {
		if err := validResponse.VisitAddPublicSignupTokenUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidatePublicSignupToken operation middleware
func (sh *strictHandler) ValidatePublicSignupToken(ctx *gin.Context, token string) {
	var request ValidatePublicSignupTokenRequestObject

	request.Token = token

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidatePublicSignupToken(ctx, request.(ValidatePublicSignupTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidatePublicSignupToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ValidatePublicSignupTokenResponseObject); ok {
		if err := validResponse.VisitValidatePublicSignupTokenResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
